<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>Λεωνίδας Λιάκος - Γεωγράφος. Leonidas Liakos - Geographer - GIS</title><link href="https://geographer.gr/" rel="alternate"></link><link href="https://geographer.gr/feeds/gis.atom.xml" rel="self"></link><id>https://geographer.gr/</id><updated>2019-10-03T10:20:00+03:00</updated><entry><title>Raster και Raster Stack στην R</title><link href="https://geographer.gr/raster-%CE%BA%CE%B1%CE%B9-raster-stack-%CF%83%CF%84%CE%B7%CE%BD-r/" rel="alternate"></link><published>2019-10-03T10:20:00+03:00</published><updated>2019-10-03T10:20:00+03:00</updated><author><name>Leonidas Liakos</name></author><id>tag:geographer.gr,2019-10-03:/raster-και-raster-stack-στην-r/</id><summary type="html">&lt;p&gt;Η ανάρτηση αυτή περιλαμβάνει το περιεχόμενο από το workshop στο &lt;a href="https://2019.fosscomm.gr/"&gt;FOSSCOMM 2019&lt;/a&gt; στην Λαμία. Για
περισσότερες λεπτομέρειες ανατρέξτε στο &lt;a href="https://github.com/kokkytos/rworkshop"&gt;github repository&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Στόχος του εργαστηρίου είναι η εξοικείωση του χρήστη με το πακέτο &lt;a href="https://cran.r-project.org/web/packages/raster/index.html"&gt;raster&lt;/a&gt;
της R το οποίο προσφέρει την δυνατότητα ανάγνωσης ψηφιδωτών δεδομένων
(raster) και επεξεργασίας τους (&lt;a href="https://www.rdocumentation.org/packages/raster/versions/2.9-5/topics/crop"&gt;crop&lt;/a&gt;,
&lt;a href="https://www.rdocumentation.org/packages/raster/versions/2.9-5/topics/reclassify"&gt;reclassify&lt;/a&gt;,
&lt;a href="https://www.rdocumentation.org/packages/raster/versions/2.9-5/topics/projectRaster"&gt;reproject …&lt;/a&gt;&lt;/p&gt;</summary><content type="html">&lt;p&gt;Η ανάρτηση αυτή περιλαμβάνει το περιεχόμενο από το workshop στο &lt;a href="https://2019.fosscomm.gr/"&gt;FOSSCOMM 2019&lt;/a&gt; στην Λαμία. Για
περισσότερες λεπτομέρειες ανατρέξτε στο &lt;a href="https://github.com/kokkytos/rworkshop"&gt;github repository&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Στόχος του εργαστηρίου είναι η εξοικείωση του χρήστη με το πακέτο &lt;a href="https://cran.r-project.org/web/packages/raster/index.html"&gt;raster&lt;/a&gt;
της R το οποίο προσφέρει την δυνατότητα ανάγνωσης ψηφιδωτών δεδομένων
(raster) και επεξεργασίας τους (&lt;a href="https://www.rdocumentation.org/packages/raster/versions/2.9-5/topics/crop"&gt;crop&lt;/a&gt;,
&lt;a href="https://www.rdocumentation.org/packages/raster/versions/2.9-5/topics/reclassify"&gt;reclassify&lt;/a&gt;,
&lt;a href="https://www.rdocumentation.org/packages/raster/versions/2.9-5/topics/projectRaster"&gt;reproject&lt;/a&gt;,
&lt;a href="https://www.rdocumentation.org/packages/raster/versions/2.9-5/topics/resample"&gt;resample&lt;/a&gt;
κτλ.).&lt;/p&gt;
&lt;p&gt;Επιπλέον, θα επικεντρωθούμε στην κλάση &lt;a href="https://web.archive.org/web/20211006131229/https://www.rdocumentation.org/packages/raster/versions/2.9-5/topics/stack"&gt;raster
stack&lt;/a&gt; η οποία δημιουργεί συστοιχίες ψηφιδωτών δεδομένων, κατάλληλες
για χρονοσειρές και πολυκαναλικές εικόνες.&lt;/p&gt;
&lt;p&gt;Η διεξαγωγή του εργαστηρίου θα γίνει μέσω παραδειγμάτων και με την
χρήση δεδομένων νυκτερινών φώτων &lt;a href="https://www.rdocumentation.org/packages/raster/versions/2.9-5/topics/stack"&gt;DMSP-OLS
Nighttime Lights Time Series (Stable Lights Version 4)&lt;/a&gt;. Θα προηγηθεί
μια σύντομη παρουσίαση των βημάτων και της διαδικασίας ώστε οι χρήστες
να αποκτήσουν μια σύντομη αλλά περιεκτική εικόνα του στόχου του
εργαστηρίου και των δυνατοτητων που προσφέρει ο προγραμματισμός με την
R.&lt;/p&gt;
&lt;h3 id="εγκατάσταση-των-απαραίτητων-βιβλιοθηκών"&gt;Εγκατάσταση των
απαραίτητων βιβλιοθηκών&lt;/h3&gt;
&lt;pre&gt;&lt;code&gt;install.packages(c("raster","ggplot2","rasterVis","rgdal","leaflet"),dependencies=T)&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id="εισαγωγή-των-απαραίτητων-βιβλιοθηκών"&gt;Εισαγωγή των απαραίτητων
βιβλιοθηκών&lt;/h3&gt;
&lt;pre&gt;&lt;code&gt;library(raster)
library(ggplot2)
library(rasterVis)
library(rgdal)
library(leaflet)&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id="ορισμός-working-directory"&gt;Ορισμός Working directory&lt;/h3&gt;
&lt;pre&gt;&lt;code&gt;setwd('/home/leonidas/Desktop/rworkshop')&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id="επιβεβαίωση-ποιο-είναι-το-working-directory"&gt;Επιβεβαίωση ποιο
είναι το working directory&lt;/h3&gt;
&lt;pre&gt;&lt;code&gt;getwd()

###### [1] "/home/leonidas/Desktop/rworkshop"&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id="δημιουργία-rasterstack-object"&gt;Δημιουργία rasterStack
Object&lt;/h3&gt;
&lt;pre&gt;&lt;code&gt;myfiles &amp;lt;- list.files(path=file.path("data","dmsp_ols"),  pattern="*.stable_lights.tif$", full.names = TRUE)
s &amp;lt;- raster::stack(myfiles)&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id="οπτικοποίηση-raster-stack"&gt;Οπτικοποίηση raster stack&lt;/h3&gt;
&lt;pre&gt;&lt;code&gt;plot(s)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src="https://geographer.gr/images/index.png"/&gt;&lt;/p&gt;
&lt;h3 id="μερικές-ιδιότητες-του-rasterstack"&gt;Μερικές ιδιότητες του
rasterStack&lt;/h3&gt;
&lt;pre&gt;&lt;code&gt;class(s) # ποιάς κλάσης ειναι object?&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## [1] "RasterStack"
## attr(,"package")
## [1] "raster"&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;s@ncols  # πλήθος στηλών 
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## [1] 1422&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;s@nrows  # πλήθος γραμμών&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt; ## [1] 1122&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;s@extent # όρια γεωγραφικής έκτασης&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## class      : Extent 
## xmin       : 18.50417 
## xmax       : 30.35417 
## ymin       : 33.8625 
## ymax       : 43.2125&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;names(s)   # όνομα των επιμέρους raster&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;##  [1] "F101992.v4b_web.stable_lights" "F101993.v4b_web.stable_lights"
##  [3] "F101994.v4b_web.stable_lights" "F121994.v4b_web.stable_lights"
##  [5] "F121995.v4b_web.stable_lights" "F121996.v4b_web.stable_lights"
##  [7] "F121997.v4b_web.stable_lights" "F121998.v4b_web.stable_lights"
##  [9] "F121999.v4b_web.stable_lights" "F141997.v4b_web.stable_lights"
## [11] "F141998.v4b_web.stable_lights" "F141999.v4b_web.stable_lights"
## [13] "F142000.v4b_web.stable_lights" "F142001.v4b_web.stable_lights"
## [15] "F142002.v4b_web.stable_lights" "F142003.v4b_web.stable_lights"
## [17] "F152000.v4b_web.stable_lights" "F152001.v4b_web.stable_lights"
## [19] "F152002.v4b_web.stable_lights" "F152003.v4b_web.stable_lights"
## [21] "F152004.v4b_web.stable_lights" "F152005.v4b_web.stable_lights"
## [23] "F152006.v4b_web.stable_lights" "F152007.v4b_web.stable_lights"
## [25] "F162004.v4b_web.stable_lights" "F162005.v4b_web.stable_lights"
## [27] "F162006.v4b_web.stable_lights" "F162007.v4b_web.stable_lights"
## [29] "F162008.v4b_web.stable_lights" "F162009.v4b_web.stable_lights"
## [31] "F182010.v4d_web.stable_lights" "F182011.v4c_web.stable_lights"
## [33] "F182012.v4c_web.stable_lights" "F182013.v4c_web.stable_lights"&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;nlayers(s) # πλήθος raster&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## [1] 34&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;res(s) # resolution των raster&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## [1] 0.008333333 0.008333333&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;inMemory(s) # επαληθέουμε αν τα δεδομένα είναι στην μνήμη&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## [1] FALSE&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;fromDisk(s) # επαληθέουμε αν τα δεδομένα είναι στον δίσκο&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## [1] TRUE&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id="υποσύνολο-από-layers-του-stack"&gt;Υποσύνολο από layers του
stack&lt;/h3&gt;
&lt;pre&gt;&lt;code&gt;sub_s &amp;lt;- subset(s, c(1:5))
plot(sub_s)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src="https://geographer.gr/images/index2.png"/&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;sub_s&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## class      : RasterStack 
## dimensions : 1122, 1422, 1595484, 5  (nrow, ncol, ncell, nlayers)
## resolution : 0.008333333, 0.008333333  (x, y)
## extent     : 18.50417, 30.35417, 33.8625, 43.2125  (xmin, xmax, ymin, ymax)
## crs        : +proj=longlat +datum=WGS84 +no_defs +ellps=WGS84 +towgs84=0,0,0 
## names      : F101992.v4b_web.stable_lights, F101993.v4b_web.stable_lights, F101994.v4b_web.stable_lights, F121994.v4b_web.stable_lights, F121995.v4b_web.stable_lights 
## min values :                             0,                             0,                             0,                             0,                             0 
## max values :                            63,                            63,                            63,                            63,                            63&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;rm(sub_s) #διαγραφή object από το περιβάλλον
#sub_s&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id="αποκοπή-του-rasterstack-στα-όρια-του-ν.-μαγνησίας"&gt;Αποκοπή του
rasterStack στα όρια του Ν. Μαγνησίας&lt;/h3&gt;
&lt;h4 id="ανάγνωση-διανυσματικών-δεδομένων-geopackage"&gt;Ανάγνωση
διανυσματικών δεδομένων geopackage&lt;/h4&gt;
&lt;pre&gt;&lt;code&gt;pe &amp;lt;- readOGR(file.path("data","per_enot", "pe.gpkg"), "pe")&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## OGR data source with driver: GPKG 
## Source: "/home/leonidas/Desktop/rworkshop/data/per_enot/pe.gpkg", layer: "pe"
## with 75 features
## It has 5 fields&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;# ?readOGR
crs(pe)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;
## CRS arguments:
##  +proj=tmerc +lat_0=0 +lon_0=24 +k=0.9996 +x_0=500000 +y_0=0
## +ellps=GRS80 +towgs84=-199.87,74.79,246.62,0,0,0,0 +units=m
## +no_defs
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;plot(pe)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src="https://geographer.gr/images/pe_gpkg.png"/&gt;&lt;/p&gt;
&lt;h3 id="reprojection-σε-wgs84-και-επιλογή-του-ν.-μαγνησίας"&gt;Reprojection
σε WGS’84 και επιλογή του Ν. Μαγνησίας&lt;/h3&gt;
&lt;pre&gt;&lt;code&gt;pe_wgs &amp;lt;- sp::spTransform(pe, CRS("+init=epsg:4326"))
crs(pe_wgs)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## CRS arguments:
##  +init=epsg:4326 +proj=longlat +datum=WGS84 +no_defs +ellps=WGS84
## +towgs84=0,0,0&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;View(pe_wgs@data)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;magnisia &amp;lt;- subset(pe_wgs, KALCODE==c(24)) #επιλογή του Ν. Μαγνησίας
plot(magnisia)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src="https://geographer.gr/images/magnisia.png"/&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;print(magnisia)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## class       : SpatialPolygonsDataFrame 
## features    : 1 
## extent      : 22.49044, 23.35152, 38.96959, 39.60304  (xmin, xmax, ymin, ymax)
## crs         : +init=epsg:4326 +proj=longlat +datum=WGS84 +no_defs +ellps=WGS84 +towgs84=0,0,0 
## variables   : 5
## names       : OBJECTID, KALCODE,                        LEKTIKO,    SHAPE_Leng,    SHAPE_Area 
## value       :       24,      24, ΠΕΡΙΦΕΡΕΙΑΚΗ ΕΝΟΤΗΤΑ ΜΑΓΝΗΣΙΑΣ, 553550.759122, 2364238989.84&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Ορισμός των ορίων της περιοχής μέσω της δημιουργίας ενός extent
object&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;#ext&amp;lt;-extent(22.61,24.34,37.33,38.69) #Attiki
ext &amp;lt;- raster::extent(magnisia)
str(ext)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## Formal class 'Extent' [package "raster"] with 4 slots
##   ..@ xmin: num 22.5
##   ..@ xmax: num 23.4
##   ..@ ymin: num 39
##   ..@ ymax: num 39.6&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;plot(pe_wgs)
plot(as(ext, 'SpatialPolygons'),col=rgb(1, 0, 0, alpha=0.5), add=T)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src="https://geographer.gr/images/greece_magnisia.png"/&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;s &amp;lt;-crop(s, ext) # εδώ διατηρεί το αρχικό resolution και προσαρμόζει τα άκρα, επίσης μετατρέπει το stack σε brick

inMemory(s) # επαληθέουμε αν τα δεδομένα είναι στην μνήμη&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## [1] FALSE&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;fromDisk(s) # επαληθέουμε αν τα δεδομένα είναι στον δίσκο   &lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## [1] TRUE&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;s@extent&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## class      : Extent 
## xmin       : 22.4875 
## xmax       : 23.35417 
## ymin       : 38.97083 
## ymax       : 39.60417&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;names(s)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;##  [1] "F101992.v4b_web.stable_lights" "F101993.v4b_web.stable_lights"
##  [3] "F101994.v4b_web.stable_lights" "F121994.v4b_web.stable_lights"
##  [5] "F121995.v4b_web.stable_lights" "F121996.v4b_web.stable_lights"
##  [7] "F121997.v4b_web.stable_lights" "F121998.v4b_web.stable_lights"
##  [9] "F121999.v4b_web.stable_lights" "F141997.v4b_web.stable_lights"
## [11] "F141998.v4b_web.stable_lights" "F141999.v4b_web.stable_lights"
## [13] "F142000.v4b_web.stable_lights" "F142001.v4b_web.stable_lights"
## [15] "F142002.v4b_web.stable_lights" "F142003.v4b_web.stable_lights"
## [17] "F152000.v4b_web.stable_lights" "F152001.v4b_web.stable_lights"
## [19] "F152002.v4b_web.stable_lights" "F152003.v4b_web.stable_lights"
## [21] "F152004.v4b_web.stable_lights" "F152005.v4b_web.stable_lights"
## [23] "F152006.v4b_web.stable_lights" "F152007.v4b_web.stable_lights"
## [25] "F162004.v4b_web.stable_lights" "F162005.v4b_web.stable_lights"
## [27] "F162006.v4b_web.stable_lights" "F162007.v4b_web.stable_lights"
## [29] "F162008.v4b_web.stable_lights" "F162009.v4b_web.stable_lights"
## [31] "F182010.v4d_web.stable_lights" "F182011.v4c_web.stable_lights"
## [33] "F182012.v4c_web.stable_lights" "F182013.v4c_web.stable_lights"&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;res(s)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## [1] 0.008333333 0.008333333&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;nlayers(s)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## [1] 34&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id="προβολή-στο-εγσα-87"&gt;Προβολή στο ΕΓΣΑ’ 87&lt;/h3&gt;
&lt;pre&gt;&lt;code&gt;greekgrid &amp;lt;- "+proj=tmerc +lat_0=0 +lon_0=24 +k=0.9996 +x_0=500000 +y_0=0 +ellps=GRS80 +towgs84=-199.87,74.79,246.62,0,0,0,0 +units=m +no_defs"

s &amp;lt;- projectRaster(from=s, res=1000, crs=greekgrid, method="ngb") &lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;plot(s[[1]])&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src="https://geographer.gr/images/magnisia_ntl.png"/&gt;&lt;/p&gt;
&lt;p&gt;Προβολή σε χάρτη leaflet&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;leaflet() %&amp;gt;% 
  addTiles() %&amp;gt;%
  addRasterImage(s[[1]], opacity = 0.6)&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id="compare-rasters"&gt;Compare rasters&lt;/h3&gt;
&lt;pre&gt;&lt;code&gt;
compareRaster(s[[1]], s[[15]], extent=TRUE )&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## [1] TRUE&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;compareRaster(s[[1]], s[[15]], rowcol=TRUE )&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## [1] TRUE&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;compareRaster(s[[1]], s[[15]], crs=TRUE)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## [1] TRUE&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;compareRaster(s[[1]], s[[15]], res=TRUE)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## [1] TRUE&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;compareRaster(s[[1]], s[[15]], orig=TRUE)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## [1] TRUE&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;compareRaster(s[[1]], s[[15]], values=T,stopiffalse = F)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## [1] FALSE&lt;/code&gt;&lt;/pre&gt;
&lt;h1 id="resample-rasters"&gt;Resample rasters&lt;/h1&gt;
&lt;pre&gt;&lt;code&gt;#Δημιουργία νεόυ raster 
grid &amp;lt;- raster()
extent(grid) &amp;lt;- extent(s)
res(grid)=c(2000,2000)

resampled_s &amp;lt;- resample(s, grid, method = "ngb")
res(s)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## [1] 1000 1000&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;res(resampled_s)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## [1] 2000 2000&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id="μέσος-όρος-ανά-έτος-με-την-χρήση-stackapply"&gt;Μέσος όρος ανά έτος
με την χρήση stackApply&lt;/h3&gt;
&lt;pre&gt;&lt;code&gt;names(s)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;##  [1] "F101992.v4b_web.stable_lights" "F101993.v4b_web.stable_lights"
##  [3] "F101994.v4b_web.stable_lights" "F121994.v4b_web.stable_lights"
##  [5] "F121995.v4b_web.stable_lights" "F121996.v4b_web.stable_lights"
##  [7] "F121997.v4b_web.stable_lights" "F121998.v4b_web.stable_lights"
##  [9] "F121999.v4b_web.stable_lights" "F141997.v4b_web.stable_lights"
## [11] "F141998.v4b_web.stable_lights" "F141999.v4b_web.stable_lights"
## [13] "F142000.v4b_web.stable_lights" "F142001.v4b_web.stable_lights"
## [15] "F142002.v4b_web.stable_lights" "F142003.v4b_web.stable_lights"
## [17] "F152000.v4b_web.stable_lights" "F152001.v4b_web.stable_lights"
## [19] "F152002.v4b_web.stable_lights" "F152003.v4b_web.stable_lights"
## [21] "F152004.v4b_web.stable_lights" "F152005.v4b_web.stable_lights"
## [23] "F152006.v4b_web.stable_lights" "F152007.v4b_web.stable_lights"
## [25] "F162004.v4b_web.stable_lights" "F162005.v4b_web.stable_lights"
## [27] "F162006.v4b_web.stable_lights" "F162007.v4b_web.stable_lights"
## [29] "F162008.v4b_web.stable_lights" "F162009.v4b_web.stable_lights"
## [31] "F182010.v4d_web.stable_lights" "F182011.v4c_web.stable_lights"
## [33] "F182012.v4c_web.stable_lights" "F182013.v4c_web.stable_lights"&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;years &amp;lt;- substr(names(s),4,7)


#Α' τρόπος
indices &amp;lt;- c(1,2,3,3,4,5,6,7,8,6,7,8,9,10,11,12,9,10,11,12,13,14,15,16,13,14,15,16,17,18,19,20,21,22)

# B' τρόπος
indices &amp;lt;- factor(years)
levels(indices) &amp;lt;-1:length(levels(indices))

nlayers(s)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## [1] 34&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;s&amp;lt;-stackApply(s, as.integer(indices), fun = mean, na.rm = TRUE)
nlayers(s)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## [1] 22&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;names(s) &amp;lt;-unique(years)&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id="reclassify-τιμών"&gt;Reclassify τιμών&lt;/h3&gt;
&lt;p&gt;Ορίζουμε όσες τιμές στο raster είναι μικρότερες/ίσες του 6 στα raster
layers σε NA&lt;/p&gt;
&lt;h4 id="ος-τρόπος"&gt;1&lt;sup&gt;ος&lt;/sup&gt; τρόπος&lt;/h4&gt;
&lt;pre&gt;&lt;code&gt;rc1 &amp;lt;- s

rc1[rc1&amp;lt;=6] &amp;lt;- NA #δεν ειναι memory safe
&lt;/code&gt;&lt;/pre&gt;
&lt;h4 id="ος-τρόπος-1"&gt;2&lt;sup&gt;ος&lt;/sup&gt; τρόπος&lt;/h4&gt;
&lt;pre&gt;&lt;code&gt;s_calc &amp;lt;- raster::calc(s, fun=function(x){x[x&amp;lt;=6]&amp;lt;-NA; return(x)}) &lt;/code&gt;&lt;/pre&gt;
&lt;h4 id="ος-τρόπος-2"&gt;3&lt;sup&gt;ος&lt;/sup&gt; τρόπος&lt;/h4&gt;
&lt;p&gt;rc2 &amp;lt;- raster::reclassify(s, c(-Inf,6,NA))&lt;/p&gt;
&lt;p&gt;plot(s[[11]]) # plot ενδέκατο raster από το αρχικό stac&lt;/p&gt;
&lt;p&gt;&lt;img src="https://geographer.gr/images/magnisia_ntl2.png"/&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;plot(s_calc[[11]]) #plot από το αρχικό stack, από το φιλτραρισμένο, εναλλακτικά plot(s_calc$index_1992)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src="https://geographer.gr/images/magnisia_ntl3.png"/&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;compareRaster(rc1, rc2, values=T)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## [1] TRUE&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;compareRaster(s_calc,rc2, values=T)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## [1] TRUE&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;compareRaster(s_calc,s, values=T,stopiffalse = F)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## [1] FALSE&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id="οπτικοποίηση-με-το-levelplot"&gt;Οπτικοποίηση με το levelplot&lt;/h3&gt;
&lt;pre&gt;&lt;code&gt;rasterVis::levelplot(s_calc) # προσοχή μπορεί να αργήσει αν ειναι πολλά raster&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src="https://geographer.gr/images/levelplot.png"/&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;names(s)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;##  [1] "X1992" "X1993" "X1994" "X1995" "X1996" "X1997" "X1998" "X1999"
##  [9] "X2000" "X2001" "X2002" "X2003" "X2004" "X2005" "X2006" "X2007"
## [17] "X2008" "X2009" "X2010" "X2011" "X2012" "X2013"&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;(years &amp;lt;- substring(names(s),2))&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;##  [1] "1992" "1993" "1994" "1995" "1996" "1997" "1998" "1999" "2000" "2001"
## [11] "2002" "2003" "2004" "2005" "2006" "2007" "2008" "2009" "2010" "2011"
## [21] "2012" "2013"&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;rasterVis::levelplot(s_calc,main="Raster δεδομενα DMSP/OLS για την Μαγνησία, 1992-2013", 

                     scales=list(y=list(draw=FALSE),
                                 x=list(draw=FALSE)),  
                     names.attr=years,
                     colorkey=NULL)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src="https://geographer.gr/images/levelplot2.png"/&gt;&lt;/p&gt;
&lt;h1 id="υπολογισμός-sol-μέσω-cellstats"&gt;Υπολογισμός SoL μέσω
cellStats&lt;/h1&gt;
&lt;pre&gt;&lt;code&gt;SoL &amp;lt;- cellStats(s_calc, stat='sum', na.rm=TRUE)

df&amp;lt;-data.frame(SoL=SoL, Year=as.integer(years) )#δημιουργία dataframe
write.csv(df,file.path('output','SoL.csv')) # εγγραφή σε csv&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id="οπτικοποίηση-δεδομένων-sol-σε-γράφημα"&gt;Οπτικοποίηση δεδομένων
SoL σε γράφημα&lt;/h3&gt;
&lt;h4 id="γράφημα-με-τυπικά-εργαλεία-plot-της-r"&gt;Γράφημα με τυπικά
εργαλεία plot της R&lt;/h4&gt;
&lt;pre&gt;&lt;code&gt;#jpeg('SoL.jpg')
#dev.off
plot(x=df$Year,
       y=df$SoL, 
       type='l',
       xlab="Year", 
       ylab="Sum of Lights (SoL)",
       main='SoL for Magnesia',xaxt="n")
  axis(1, at=df$Year,cex.axis=0.8, las=2)
points(x=df$Year,y=df$SoL)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src="https://geographer.gr/images/sol_magnisia.png"/&gt;&lt;/p&gt;
&lt;h4 id="γράφημα-με-ggplot"&gt;Γράφημα με ggplot&lt;/h4&gt;
&lt;pre&gt;&lt;code&gt;ggplot2::ggplot(data=df, aes(x=Year,y=SoL))+
  geom_line()+
  geom_point()+
  ggtitle("Sum of Lights (SoL) for Magnesia")+ 
  scale_x_continuous("Years", labels = as.character(df$Year), breaks = df$Year)+
  theme(plot.title = element_text(hjust = 0.5))+theme(text = element_text(size=14),
                                                      axis.text.x = element_text(angle=90)) &lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src="https://geographer.gr/images/sol_magnisia2.png"/&gt;&lt;/p&gt;
&lt;h3 id="αποθήκευση-γραφήματος"&gt;Αποθήκευση γραφήματος&lt;/h3&gt;
&lt;pre&gt;&lt;code&gt;ggplot2::ggsave(file.path("output",'SoL.png'), plot = last_plot(), device = "png", 
       scale = 1, width = 10, height = 5, units = c("in", "cm", "mm"),
       dpi = 300, limitsize = TRUE)&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id="αποθήκευση-των-rasterstack-σαν-ξεχωριστά-αρχεία-geotiff"&gt;Αποθήκευση
των rasterStack σαν ξεχωριστά αρχεία geotiff&lt;/h3&gt;
&lt;pre&gt;&lt;code&gt;# προσοχή στο data(t)ype όχι data(T)ype
raster::writeRaster(s_calc, filename=file.path("output",years), bylayer=TRUE,datatype="INT1U", options="COMPRESS=LZW", format="GTiff",overwrite=TRUE)&lt;/code&gt;&lt;/pre&gt;</content><category term="GIS"></category><category term="R"></category><category term="raster"></category><category term="stack"></category><category term="NTL"></category><category term="DMSP-OLS"></category><category term="github"></category></entry><entry><title>Λήψη δορυφορικών εικόνων στην R μέσω του GIBS API</title><link href="https://geographer.gr/lepse-doruphorikon-eikonon-sten-r-meso-tou-gibs-api/" rel="alternate"></link><published>2017-11-19T10:20:00+02:00</published><updated>2017-11-19T10:20:00+02:00</updated><author><name>Leonidas Liakos</name></author><id>tag:geographer.gr,2017-11-19:/lepse-doruphorikon-eikonon-sten-r-meso-tou-gibs-api/</id><summary type="html">&lt;p&gt;Η υπηρεσία &lt;a href="https://wiki.earthdata.nasa.gov/display/GIBS/Global+Imagery+Browse+Services+-+GIBS"&gt;Global
Imagery Browse Services (GIBS)&lt;/a&gt; του παρατηρητηρίου &lt;a href="https://earthdata.nasa.gov/"&gt;Earth Observing System Data and
Information System (EOSDIS)&lt;/a&gt; παρέχει δορυφορικές εικόνες πλήρους
ανάλυσης σε παγκόσμιο επίπεδο. Η υπηρεσία παρέχει πρόσβαση σε 600 και
πλέον προϊόντα δορυφορικών εικόνων τα οποία στην πλειονότητά τους είναι
διαθέσιμα με χρονική υστέρηση λίγων ωρών από την …&lt;/p&gt;</summary><content type="html">&lt;p&gt;Η υπηρεσία &lt;a href="https://wiki.earthdata.nasa.gov/display/GIBS/Global+Imagery+Browse+Services+-+GIBS"&gt;Global
Imagery Browse Services (GIBS)&lt;/a&gt; του παρατηρητηρίου &lt;a href="https://earthdata.nasa.gov/"&gt;Earth Observing System Data and
Information System (EOSDIS)&lt;/a&gt; παρέχει δορυφορικές εικόνες πλήρους
ανάλυσης σε παγκόσμιο επίπεδο. Η υπηρεσία παρέχει πρόσβαση σε 600 και
πλέον προϊόντα δορυφορικών εικόνων τα οποία στην πλειονότητά τους είναι
διαθέσιμα με χρονική υστέρηση λίγων ωρών από την διέλευση του δορυφόρου.
Η οπτικοποίηση των δεδομένων αυτών υποστηρίζεται από σχετική διαδικτυακή
εφαρμογή &lt;a href="https://worldview.earthdata.nasa.gov/"&gt;WorldView&lt;/a&gt;αλλά και μέσω
υπηρεσιών (πρωτόκολλα OGC Web Map Tile Service (WMTS)/Tiled Web Map
Service (TWMS)) που επιτρέπουν την ενσωμάτωσή του σε τρίτες εφαρμογές.
Επιπλέον μια από της πλέον χρήσιμες λειτουργίες της υπηρεσίας GIBS είναι
δυνατότητα εκτέλεσης σεναρίου εντολών μέσω της βιβλιοθήκης &lt;a href="http://www.gdal.org/"&gt;Geospatial Data Abstraction Library
(GDAL)&lt;/a&gt;. Αυτή η δυνατότητα παρέχει στον χρήση την ευκολία να
αυτοματοποιήσει την λήψη δεδομένων (π.χ. μαζική λήψη δεδομένων, αυτόματη
περιοδική λήψη, λήψη δεδομένων υπό συγκεκριμένες συνθήκες κτλ.).&lt;/p&gt;
&lt;p&gt;Στην τρέχουσα ανάρτηση παρουσιάζεται ένα σενάριο λήψης δεδομένων από
την πλατφόρμα GIBS με την γλώσσα προγραμματισμού R. Στόχος είναι να
δημιουργηθεί ένα σενάριο εντολών όπου ο χρήστης θα παρέχει στο script
πληροφορίες για το προϊόν και το script θα λαμβάνει τις σχετικές
δορυφορικές εικόνες.&lt;/p&gt;
&lt;p&gt;Οι πληροφορίες αυτές αφορούν το όνομα του προϊόντος, το προβολικό του
σύστημα, την ημερομηνία λήψης και την περιοχή μελέτης που ενδιαφέρει τον
χρήστη. Οι πληροφορίες για κάθε προϊόν (ονομασία, επίπεδα εστίασης,
προβολικό σύστημα) είναι διαθέσιμες στην σχετική ενότητα της &lt;a href="https://wiki.earthdata.nasa.gov/display/GIBS/GIBS+Available+Imagery+Products"&gt;υπηρεσίας&lt;/a&gt;.
Στην συνέχεια θα αυτοματοποιήσουμε την λήψη μιας σειράς εικόνων VIIRS
για ένα συγκεκριμένο χρονικό διάστημα.&lt;/p&gt;
&lt;p&gt;Το σενάριο R απαιτεί το πακέτο &lt;a href="https://cran.r-project.org/web/packages/gdalUtils/index.html"&gt;gdalUtils&lt;/a&gt;,
ένα πακέτο “περιτυλίγµατος” (wrapper) για την βιβλιοθήκη GDAL, το οποίο
φορτώνουμε στο περιβάλλον εργασίας της R:&lt;/p&gt;
&lt;div class="sourceCode" id="cb1"&gt;&lt;pre class="sourceCode r"&gt;&lt;code class="sourceCode r"&gt;&lt;span id="cb1-1"&gt;&lt;a aria-hidden="true" href="#cb1-1" tabindex="-1"&gt;&lt;/a&gt;&lt;span class="fu"&gt;library&lt;/span&gt;(gdalUtils)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Ακολουθεί η συνάρτηση (function) που πραγματοποιεί την λήψη των
δορυφορικών εικόνων. Δέχεται ως παραμέτρους την ημερομηνία λήψης του
προϊόντος (αν δεν οριστεί από τον χρήστη ορίζεται ως προκαθορισμένη η
τρέχουσα), το όνομα του προϊόντος, τον κωδικό προβολικού συστήματος κατά
EPSG, τον κατάλογο που θέλουμε να αποθηκεύσουμε τα δεδομένα
(προκαθορισμένος ο $HOME/gibs_downloads) και την γεωγραφική έκταση
(extent) της περιοχής ενδιαφέροντος.&lt;/p&gt;
&lt;p&gt;Το σενάριο χρησιμοποιεί την υπηρεσία Tiled Web Map Service μέσω της
συνάρτησης gdal_translate του πακέτου gdalUtils. Ανάλογα με τις
πληροφορίες που παρέχει ο χρήστης δημιουργεί δυναμικά ένα προσωρινό
αρχείο XML το οποίο μεταβιβάζει σαν παράμετρο στην συνάρτηση &lt;a href="http://www.gdal.org/gdal_translate.html"&gt;gdal_translate&lt;/a&gt;.
Επιστρέφει την διαδρομή της ληφθείσας εικόνας στο τοπικό σύστημα αρχείων
του χρήστη.&lt;/p&gt;
&lt;div class="sourceCode" id="cb2"&gt;&lt;pre class="sourceCode r"&gt;&lt;code class="sourceCode r"&gt;&lt;span id="cb2-1"&gt;&lt;a aria-hidden="true" href="#cb2-1" tabindex="-1"&gt;&lt;/a&gt;rGIBS&lt;span class="ot"&gt;&amp;lt;-&lt;/span&gt;&lt;span class="cf"&gt;function&lt;/span&gt;(&lt;span class="at"&gt;date=&lt;/span&gt;&lt;span class="fu"&gt;Sys.Date&lt;/span&gt;(), EPSGCODE,PRODUCT,projwin, &lt;span class="at"&gt;outputdir=&lt;/span&gt;&lt;span class="fu"&gt;file.path&lt;/span&gt;(&lt;span class="fu"&gt;Sys.getenv&lt;/span&gt;(&lt;span class="st"&gt;"HOME"&lt;/span&gt;),&lt;span class="st"&gt;"gibs_downloads"&lt;/span&gt;),...){&lt;/span&gt;
&lt;span id="cb2-2"&gt;&lt;a aria-hidden="true" href="#cb2-2" tabindex="-1"&gt;&lt;/a&gt;  &lt;span class="fu"&gt;dir.create&lt;/span&gt;(outputdir, &lt;span class="at"&gt;showWarnings =&lt;/span&gt; &lt;span class="cn"&gt;FALSE&lt;/span&gt;)&lt;/span&gt;
&lt;span id="cb2-3"&gt;&lt;a aria-hidden="true" href="#cb2-3" tabindex="-1"&gt;&lt;/a&gt;  &lt;span class="fu"&gt;setwd&lt;/span&gt;(outputdir)&lt;/span&gt;
&lt;span id="cb2-4"&gt;&lt;a aria-hidden="true" href="#cb2-4" tabindex="-1"&gt;&lt;/a&gt;  &lt;span class="co"&gt;#generate xml&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb2-5"&gt;&lt;a aria-hidden="true" href="#cb2-5" tabindex="-1"&gt;&lt;/a&gt;  makeXML &lt;span class="ot"&gt;&amp;lt;-&lt;/span&gt; &lt;span class="cf"&gt;function&lt;/span&gt;(date, EPSGCODE,PRODUCT){&lt;/span&gt;
&lt;span id="cb2-6"&gt;&lt;a aria-hidden="true" href="#cb2-6" tabindex="-1"&gt;&lt;/a&gt;    myxml&lt;span class="ot"&gt;&amp;lt;-&lt;/span&gt; &lt;span class="fu"&gt;sprintf&lt;/span&gt;(&lt;span class="st"&gt;'https://gibs.earthdata.nasa.gov/twms/epsg%s/best/twms.cgi?%s tileset%s'&lt;/span&gt;,EPSGCODE, PRODUCT, date)&lt;/span&gt;
&lt;span id="cb2-7"&gt;&lt;a aria-hidden="true" href="#cb2-7" tabindex="-1"&gt;&lt;/a&gt;    tmp &lt;span class="ot"&gt;&amp;lt;-&lt;/span&gt; &lt;span class="fu"&gt;tempfile&lt;/span&gt;(&lt;span class="at"&gt;fileext=&lt;/span&gt;&lt;span class="st"&gt;".xml"&lt;/span&gt;)&lt;/span&gt;
&lt;span id="cb2-8"&gt;&lt;a aria-hidden="true" href="#cb2-8" tabindex="-1"&gt;&lt;/a&gt;    fileConn&lt;span class="ot"&gt;&amp;lt;-&lt;/span&gt;&lt;span class="fu"&gt;file&lt;/span&gt;(tmp)&lt;/span&gt;
&lt;span id="cb2-9"&gt;&lt;a aria-hidden="true" href="#cb2-9" tabindex="-1"&gt;&lt;/a&gt;    &lt;span class="fu"&gt;writeLines&lt;/span&gt;(myxml, fileConn)&lt;/span&gt;
&lt;span id="cb2-10"&gt;&lt;a aria-hidden="true" href="#cb2-10" tabindex="-1"&gt;&lt;/a&gt;    &lt;span class="fu"&gt;close&lt;/span&gt;(fileConn)&lt;/span&gt;
&lt;span id="cb2-11"&gt;&lt;a aria-hidden="true" href="#cb2-11" tabindex="-1"&gt;&lt;/a&gt;    &lt;span class="fu"&gt;return&lt;/span&gt;(tmp)&lt;/span&gt;
&lt;span id="cb2-12"&gt;&lt;a aria-hidden="true" href="#cb2-12" tabindex="-1"&gt;&lt;/a&gt;  }&lt;/span&gt;
&lt;span id="cb2-13"&gt;&lt;a aria-hidden="true" href="#cb2-13" tabindex="-1"&gt;&lt;/a&gt; &lt;/span&gt;
&lt;span id="cb2-14"&gt;&lt;a aria-hidden="true" href="#cb2-14" tabindex="-1"&gt;&lt;/a&gt;  infile&lt;span class="ot"&gt;&amp;lt;-&lt;/span&gt;&lt;span class="fu"&gt;makeXML&lt;/span&gt;(date,EPSGCODE,PRODUCT)&lt;/span&gt;
&lt;span id="cb2-15"&gt;&lt;a aria-hidden="true" href="#cb2-15" tabindex="-1"&gt;&lt;/a&gt;  outfile&lt;span class="ot"&gt;&amp;lt;-&lt;/span&gt;&lt;span class="fu"&gt;gsub&lt;/span&gt;(&lt;span class="st"&gt;" "&lt;/span&gt;,&lt;span class="st"&gt;"_"&lt;/span&gt;,(&lt;span class="fu"&gt;sprintf&lt;/span&gt;(&lt;span class="st"&gt;'%s_%s_EPSG%s.tif'&lt;/span&gt;,PRODUCT,date,EPSGCODE)))&lt;/span&gt;
&lt;span id="cb2-16"&gt;&lt;a aria-hidden="true" href="#cb2-16" tabindex="-1"&gt;&lt;/a&gt; &lt;/span&gt;
&lt;span id="cb2-17"&gt;&lt;a aria-hidden="true" href="#cb2-17" tabindex="-1"&gt;&lt;/a&gt; &lt;/span&gt;
&lt;span id="cb2-18"&gt;&lt;a aria-hidden="true" href="#cb2-18" tabindex="-1"&gt;&lt;/a&gt;  &lt;span class="fu"&gt;gdal_translate&lt;/span&gt;(&lt;/span&gt;
&lt;span id="cb2-19"&gt;&lt;a aria-hidden="true" href="#cb2-19" tabindex="-1"&gt;&lt;/a&gt;    infile,&lt;/span&gt;
&lt;span id="cb2-20"&gt;&lt;a aria-hidden="true" href="#cb2-20" tabindex="-1"&gt;&lt;/a&gt;    outfile,&lt;/span&gt;
&lt;span id="cb2-21"&gt;&lt;a aria-hidden="true" href="#cb2-21" tabindex="-1"&gt;&lt;/a&gt;    &lt;span class="at"&gt;projwin=&lt;/span&gt;projwin,&lt;/span&gt;
&lt;span id="cb2-22"&gt;&lt;a aria-hidden="true" href="#cb2-22" tabindex="-1"&gt;&lt;/a&gt;    &lt;span class="at"&gt;verbose =&lt;/span&gt; T,&lt;/span&gt;
&lt;span id="cb2-23"&gt;&lt;a aria-hidden="true" href="#cb2-23" tabindex="-1"&gt;&lt;/a&gt;    ...&lt;/span&gt;
&lt;span id="cb2-24"&gt;&lt;a aria-hidden="true" href="#cb2-24" tabindex="-1"&gt;&lt;/a&gt;  )&lt;/span&gt;
&lt;span id="cb2-25"&gt;&lt;a aria-hidden="true" href="#cb2-25" tabindex="-1"&gt;&lt;/a&gt; &lt;/span&gt;
&lt;span id="cb2-26"&gt;&lt;a aria-hidden="true" href="#cb2-26" tabindex="-1"&gt;&lt;/a&gt; &lt;span class="co"&gt;#delete temp file&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb2-27"&gt;&lt;a aria-hidden="true" href="#cb2-27" tabindex="-1"&gt;&lt;/a&gt;  &lt;span class="fu"&gt;unlink&lt;/span&gt;(infile)&lt;/span&gt;
&lt;span id="cb2-28"&gt;&lt;a aria-hidden="true" href="#cb2-28" tabindex="-1"&gt;&lt;/a&gt;  &lt;span class="fu"&gt;message&lt;/span&gt;(&lt;span class="fu"&gt;sprintf&lt;/span&gt;(&lt;span class="st"&gt;"Image %s was saved in %s"&lt;/span&gt;, outfile, outputdir))&lt;/span&gt;
&lt;span id="cb2-29"&gt;&lt;a aria-hidden="true" href="#cb2-29" tabindex="-1"&gt;&lt;/a&gt;  &lt;span class="fu"&gt;return&lt;/span&gt; (&lt;span class="fu"&gt;file.path&lt;/span&gt;(outputdir,outfile))&lt;/span&gt;
&lt;span id="cb2-30"&gt;&lt;a aria-hidden="true" href="#cb2-30" tabindex="-1"&gt;&lt;/a&gt; &lt;/span&gt;
&lt;span id="cb2-31"&gt;&lt;a aria-hidden="true" href="#cb2-31" tabindex="-1"&gt;&lt;/a&gt;}&lt;/span&gt;
&lt;span id="cb2-32"&gt;&lt;a aria-hidden="true" href="#cb2-32" tabindex="-1"&gt;&lt;/a&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Έστω ότι στόχος είναι η λήψη της εικόνας του προϊόντος VIIRS
DayNightBand για την 15η Αυγούστου του 2017 για την Ελλάδα. Ο χρήστης
καλείται να παρέχει της πληροφορίες αυτές στην συνάρτηση rGIBS. Τις
πληροφορίες αυτές θα τις ορίσουμε με την μορφή μεταβλητών:&lt;/p&gt;
&lt;div class="sourceCode" id="cb3"&gt;&lt;pre class="sourceCode r"&gt;&lt;code class="sourceCode r"&gt;&lt;span id="cb3-1"&gt;&lt;a aria-hidden="true" href="#cb3-1" tabindex="-1"&gt;&lt;/a&gt;PRODUCT&lt;span class="ot"&gt;&amp;lt;-&lt;/span&gt;&lt;span class="st"&gt;'VIIRS SNPP DayNightBand ENCC'&lt;/span&gt; &lt;span class="co"&gt;# όνομα προϊόντος&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb3-2"&gt;&lt;a aria-hidden="true" href="#cb3-2" tabindex="-1"&gt;&lt;/a&gt;EPSGCODE&lt;span class="ot"&gt;&amp;lt;-&lt;/span&gt;&lt;span class="dv"&gt;4326&lt;/span&gt; &lt;span class="co"&gt;#  EPSG κωδικός&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb3-3"&gt;&lt;a aria-hidden="true" href="#cb3-3" tabindex="-1"&gt;&lt;/a&gt;date&lt;span class="ot"&gt;&amp;lt;-&lt;/span&gt;&lt;span class="st"&gt;'2017-08-15'&lt;/span&gt; &lt;span class="co"&gt;# ημερομηνία λήψης&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb3-4"&gt;&lt;a aria-hidden="true" href="#cb3-4" tabindex="-1"&gt;&lt;/a&gt;projwin &lt;span class="ot"&gt;&amp;lt;-&lt;/span&gt; &lt;span class="fu"&gt;c&lt;/span&gt;(&lt;span class="fl"&gt;19.07&lt;/span&gt;, &lt;span class="fl"&gt;42.16&lt;/span&gt;, &lt;span class="fl"&gt;28.39&lt;/span&gt;, &lt;span class="fl"&gt;34.5&lt;/span&gt;) &lt;span class="co"&gt;# γεωγραφική έκταση (extent) της περιοχής μελέτης&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Στην συνέχεια θα καλέσουμε την συνάρτηση rGIBS και θα προσαρτήσουμε
την επιστραφείσα τιμή στην μεταβλητή image&lt;/p&gt;
&lt;div class="sourceCode" id="cb4"&gt;&lt;pre class="sourceCode r"&gt;&lt;code class="sourceCode r"&gt;&lt;span id="cb4-1"&gt;&lt;a aria-hidden="true" href="#cb4-1" tabindex="-1"&gt;&lt;/a&gt;image&lt;span class="ot"&gt;&amp;lt;-&lt;/span&gt;&lt;span class="fu"&gt;rGIBS&lt;/span&gt;(&lt;span class="at"&gt;date=&lt;/span&gt;date,&lt;span class="at"&gt;EPSGCODE=&lt;/span&gt;EPSGCODE,&lt;span class="at"&gt;PRODUCT=&lt;/span&gt;PRODUCT, &lt;span class="at"&gt;projwin=&lt;/span&gt;projwin, &lt;span class="at"&gt;of =&lt;/span&gt; &lt;span class="st"&gt;"GTiff"&lt;/span&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Η μεταβλητή image περιέχει την διαδρομή της εικόνας που μεταφορτώθηκε
και μπορεί να χρησιμοποιηθεί σε άλλες συναρτήσεις. Ας οπτικοποιήσουμε
την εικόνα VIIRS που λάβαμε.&lt;/p&gt;
&lt;div class="sourceCode" id="cb5"&gt;&lt;pre class="sourceCode r"&gt;&lt;code class="sourceCode r"&gt;&lt;span id="cb5-1"&gt;&lt;a aria-hidden="true" href="#cb5-1" tabindex="-1"&gt;&lt;/a&gt;&lt;span class="fu"&gt;plotRGB&lt;/span&gt;(&lt;span class="fu"&gt;stack&lt;/span&gt;(image))&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;img src="https://geographer.gr/images/Rplot_Nighttime_Imagery-286x300.png"/&gt;&lt;/p&gt;
&lt;p&gt;Όπως προαναφέρθηκε στόχος του σεναρίου είναι η μαζική λήψη εικόνων
ενός χρονικού διαστήματος σε ημερήσια βάση. Ας δημιουργήσουμε μια λίστα
με τις ημερομηνίες ανά ημέρα για το διάστημα 01/08/2017 ως 05/08/2017. Η
λίστα δεν είναι απαραίτητο να περιλαμβάνει διαδοχικές ημερομηνίες.&lt;/p&gt;
&lt;div class="sourceCode" id="cb6"&gt;&lt;pre class="sourceCode r"&gt;&lt;code class="sourceCode r"&gt;&lt;span id="cb6-1"&gt;&lt;a aria-hidden="true" href="#cb6-1" tabindex="-1"&gt;&lt;/a&gt;dates&lt;span class="ot"&gt;&amp;lt;-&lt;/span&gt;&lt;span class="fu"&gt;seq&lt;/span&gt;(&lt;span class="fu"&gt;as.Date&lt;/span&gt;(&lt;span class="st"&gt;"2017/08/01"&lt;/span&gt;), &lt;span class="fu"&gt;as.Date&lt;/span&gt;(&lt;span class="st"&gt;"2017/08/05"&lt;/span&gt;), &lt;span class="st"&gt;"days"&lt;/span&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Μπορούμε για κάθε στοιχείο της λίστας (κάθε ημερομηνία) να
κατεβάσουμε την σχετική δορυφορική εικόνα VIIRS μέσω της συνάρτησης
lapply:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;myresults&amp;lt;-lapply(
dates,
rGIBS,
EPSGCODE=EPSGCODE,
PRODUCT=PRODUCT,
projwin=projwin,
of = "GTiff"
)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Η μεταβλητή &lt;em&gt;myresults&lt;/em&gt; είναι λίστα η οποία περιλαμβάνει τις
διαδρομές των αρχείων που μεταφορτώθηκαν ανά ημέρα.&lt;/p&gt;
&lt;p&gt;Υποσημειώσεις: 1. Ο κώδικας της ανάρτησης είναι διαθέσιμος σε &lt;a href="https://gist.github.com/kokkytos/59421f6b62df85fecba05a0ffd0cfba1"&gt;github
gist&lt;/a&gt;. 2. Το script έχει δοκιμαστεί επιτυχώς με GDAL 2.2.1. Έχει
αποτύχει με GDAL 2.1.2 3. Δεν έχει δοκιμαστεί η λήψη άλλων
προϊόντων.&lt;/p&gt;</content><category term="GIS"></category><category term="API"></category><category term="gdal"></category><category term="gdalUtils"></category><category term="GIBS"></category><category term="R"></category></entry><entry><title>Τρισδιάστατα μοντέλα για εκτύπωση βουνών της Ελλάδας</title><link href="https://geographer.gr/trisdiastata-montela-gia-ektupose-bounon-tes-elladas/" rel="alternate"></link><published>2015-10-19T10:20:00+03:00</published><updated>2015-10-19T10:20:00+03:00</updated><author><name>Leonidas Liakos</name></author><id>tag:geographer.gr,2015-10-19:/trisdiastata-montela-gia-ektupose-bounon-tes-elladas/</id><summary type="html">&lt;p&gt;Στα πλαίσιο του έργου “Ηλεκτρονικές Υπηρεσίες για την Ανάπτυξη και
Διάδοση του Ανοιχτού Λογισμικού” δημιουργήθηκαν τρισδιάστατα μοντέλα για
βουνά της Ελλάδας, κατάλληλα για εκτύπωση σε 3D εκτυπωτή. Η ομάδα έργου
αποτελείται από τους &lt;a href="https://gr.linkedin.com/in/dstath"&gt;Δημήτρη
Σταθάκη&lt;/a&gt;,&lt;a href="https://gr.linkedin.com/in/leonidasliakos"&gt;Λεωνίδα
Λιάκο&lt;/a&gt;, &lt;a href="https://gr.linkedin.com/pub/faraslis-ioannis/9/30b/40"&gt;Ιωάννη
Φαρασλή&lt;/a&gt; και &lt;a href="https://www.linkedin.com/pub/christos-liotiris/a0/32b/18"&gt;Χρίστο
Λυοτύρη&lt;/a&gt;. Τα συγκεκριμένα βουνά που μοντελοποιήθηκαν είναι ο Υμηττός …&lt;/p&gt;</summary><content type="html">&lt;p&gt;Στα πλαίσιο του έργου “Ηλεκτρονικές Υπηρεσίες για την Ανάπτυξη και
Διάδοση του Ανοιχτού Λογισμικού” δημιουργήθηκαν τρισδιάστατα μοντέλα για
βουνά της Ελλάδας, κατάλληλα για εκτύπωση σε 3D εκτυπωτή. Η ομάδα έργου
αποτελείται από τους &lt;a href="https://gr.linkedin.com/in/dstath"&gt;Δημήτρη
Σταθάκη&lt;/a&gt;,&lt;a href="https://gr.linkedin.com/in/leonidasliakos"&gt;Λεωνίδα
Λιάκο&lt;/a&gt;, &lt;a href="https://gr.linkedin.com/pub/faraslis-ioannis/9/30b/40"&gt;Ιωάννη
Φαρασλή&lt;/a&gt; και &lt;a href="https://www.linkedin.com/pub/christos-liotiris/a0/32b/18"&gt;Χρίστο
Λυοτύρη&lt;/a&gt;. Τα συγκεκριμένα βουνά που μοντελοποιήθηκαν είναι ο Υμηττός,
το Πήλιο και η Σαμοθράκη (όλο το νησί). Τα ψηφιακά μοντέλα που
αναπαράχθηκαν διατίθενται υπό την άδεια Creative Commons
Attribution-ShareAlike 4.0 International.&lt;/p&gt;
&lt;figure&gt;
&lt;img alt="Μοντέλο για 3d εκτύπωση για το Πήλιο" src="https://geographer.gr/images/8acbf210-6b77-11e5-98b4-73c6c8739ceb-1024x483.png"/&gt;
&lt;figcaption aria-hidden="true"&gt;Μοντέλο για 3d εκτύπωση για το
Πήλιο&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;p&gt;Η διαδικασία αναλυτικά για κάθε βουνό περιλαμβάνει:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;απόκτηση Ψηφιακού Μοντέλου Εδάφους από ανοικτά δεδομένα (ASTER GDEM
V.2 με χωρική ανάλυση περίπου 30μ.)&lt;/li&gt;
&lt;li&gt;δημιουργία μωσαϊκού από τα επιμέρους φύλλα (tiles).&lt;/li&gt;
&lt;li&gt;αποκοπή στην γεωγραφική έκταση του κάθε βουνού.&lt;/li&gt;
&lt;li&gt;προβολή των δεδομένων στο σύστημα συντεταγμένων ΕΓΣΑ87.&lt;/li&gt;
&lt;li&gt;την επιλογή του απαιτούμενου βαθμού υπερβολής (z factor) ώστε να
βελτιστοποιηθεί το οπτικό αποτέλεσμα της εκτύπωσης.&lt;/li&gt;
&lt;li&gt;μετάφραση των δεδομένων σε φορματ κατάλληλο για 3D printer.&lt;/li&gt;
&lt;li&gt;εκτύπωση σε 3D printer εντός κύβου με διάσταση 20x20x20cm.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Για την ολοκλήρωση του έργου χρησιμοποιήθηκε ΕΛ/ΛΑΚ. Πιο συγκεκριμένα
τα λογισμικά:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;gdal_merge,για την δημιουργία μωσαϊκού των επιμέρους πλακιδίων του
ψηφιακού μοντέλου εδάφους.&lt;/li&gt;
&lt;li&gt;gdalwarp, για την επαναπροβολή του ψηφιακού μοντέλου εδάφους από το
WGS’84 στο ΕΓΣΑ’87.&lt;/li&gt;
&lt;li&gt;gdal_translate, για την αποκοπή του ψηφιακού μοντέλου εδάφους στα
όρια των ορεινών όγκων.&lt;/li&gt;
&lt;li&gt;Kosmo GIS Desktop με το πρόσθετο DEMto3D, για την μετατροπή των
αρχείων ψηφιακού μοντέλου εδάφους (μορφότυπο geotiff) σε μορφότυπο
κατάλληλο για τρισδιάστατη εκτύπωση (stl).&lt;/li&gt;
&lt;li&gt;Meshlab, για την απλοποίηση των αρχείων stl.&lt;/li&gt;
&lt;li&gt;Blender, για την προσθήκη ανάγλυφου αποτυπώματος με τον τίτλο της
περιοχής και τον κατάλληλο ορισμό της κλίμακας.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Η διαδικασία και τα σχετικά αρχεία για 3d εκτύπωση είναι διαθέσιμα
στο σχετικό αποθετήριο στο github: &lt;a class="uri" href="https://github.com/ellak-monades-aristeias/greekmnts3d"&gt;https://github.com/ellak-monades-aristeias/greekmnts3d&lt;/a&gt;
&lt;/p&gt;
&lt;figure&gt;
&lt;img alt="Εκτυπωμένο μοντέλο τμήματος του Πηλίου" src="https://geographer.gr/images/94cfbbe8-6b77-11e5-872e-0147ac615e8a-300x225.jpg"/&gt;
&lt;figcaption aria-hidden="true"&gt;Εκτυπωμένο μοντέλο τμήματος του
Πηλίου&lt;/figcaption&gt;
&lt;/figure&gt;</content><category term="GIS"></category><category term="3d printing"></category><category term="Blender"></category><category term="gdalwrap"></category><category term="gdal_merge"></category><category term="gdal_translate"></category><category term="Meshlab"></category><category term="ΕΛ/ΛΑΚ"></category></entry><entry><title>PyQgis tips. QgsVectorLayer από postgis sql ερώτημα</title><link href="https://geographer.gr/pyqgis-tips-qgsvectorlayer-apo-postgis-sql-erotema/" rel="alternate"></link><published>2014-09-23T00:10:00+03:00</published><updated>2014-09-23T00:10:00+03:00</updated><author><name>Leonidas Liakos</name></author><id>tag:geographer.gr,2014-09-23:/pyqgis-tips-qgsvectorlayer-apo-postgis-sql-erotema/</id><summary type="html">&lt;p&gt;Μία πολύ χρήσιμη δυνατότητα που μας προσφέρεται από τo &lt;a href="http://docs.qgis.org/testing/en/docs/pyqgis_developer_cookbook/index.html"&gt;pyqgis&lt;/a&gt;
είναι να “φορτώνουμε” vector layer που προέρχεται από ερώτημα sql στην
&lt;a href="http://postgis.net/"&gt;postgis&lt;/a&gt;. Έτσι ο χρήστης μπορεί να
συνδυάσει την πληροφορία που θέλει με εντολές join και να φτιάξει το
layer που επιθυμεί. Ωστόσο, στην σχετική &lt;a href="http://docs.qgis.org/testing/en/docs/pyqgis_developer_cookbook/loadlayer.html"&gt;τεκμηρίωση&lt;/a&gt;
για το τρόπο που …&lt;/p&gt;</summary><content type="html">&lt;p&gt;Μία πολύ χρήσιμη δυνατότητα που μας προσφέρεται από τo &lt;a href="http://docs.qgis.org/testing/en/docs/pyqgis_developer_cookbook/index.html"&gt;pyqgis&lt;/a&gt;
είναι να “φορτώνουμε” vector layer που προέρχεται από ερώτημα sql στην
&lt;a href="http://postgis.net/"&gt;postgis&lt;/a&gt;. Έτσι ο χρήστης μπορεί να
συνδυάσει την πληροφορία που θέλει με εντολές join και να φτιάξει το
layer που επιθυμεί. Ωστόσο, στην σχετική &lt;a href="http://docs.qgis.org/testing/en/docs/pyqgis_developer_cookbook/loadlayer.html"&gt;τεκμηρίωση&lt;/a&gt;
για το τρόπο που φορτώνουμε vector layers δεν αναφέρεται η σχετική
δυνατότητα. Μετά από αρκετό ψάξιμο και δοκιμές κατέληξα σε μερικά tips
για το πως γίνεται. Αναγκαίες προϋποθέσεις για το sql ερώτημα είναι:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Να υπάρχει πεδίο γεωμετρίας μέσα σε αυτό&lt;/li&gt;
&lt;li&gt;να υπάρχει μοναδικό πεδίο τύπου integer&lt;/li&gt;
&lt;li&gt;ο κώδικας sql πρέπει να περικλείεται σε παρενθέσεις ώστε να είναι
διακρίνεται ότι πρόκειται για sql ερώτημα και όχι για όνομα πίνακα.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Τα υπόλοιπα συντάσσονται με το ίδιο τρόπο που “φορτώνεται” ένας
πίνακας postgis:&lt;/p&gt;
&lt;div class="sourceCode" id="cb1"&gt;&lt;pre class="sourceCode python"&gt;&lt;code class="sourceCode python"&gt;&lt;span id="cb1-1"&gt;&lt;a aria-hidden="true" href="#cb1-1" tabindex="-1"&gt;&lt;/a&gt;sql &lt;span class="op"&gt;=&lt;/span&gt;&lt;span class="st"&gt;"(select the_geom, id, name from mytable)"&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb1-2"&gt;&lt;a aria-hidden="true" href="#cb1-2" tabindex="-1"&gt;&lt;/a&gt;uri &lt;span class="op"&gt;=&lt;/span&gt; QgsDataSourceURI()&lt;/span&gt;
&lt;span id="cb1-3"&gt;&lt;a aria-hidden="true" href="#cb1-3" tabindex="-1"&gt;&lt;/a&gt;uri.setConnection(&lt;span class="st"&gt;"localhost"&lt;/span&gt;,&lt;span class="st"&gt;"5432"&lt;/span&gt;,&lt;span class="st"&gt;"mydb"&lt;/span&gt;,&lt;span class="st"&gt;"postgres"&lt;/span&gt;,&lt;span class="st"&gt;"xxxxx"&lt;/span&gt;)&lt;/span&gt;
&lt;span id="cb1-4"&gt;&lt;a aria-hidden="true" href="#cb1-4" tabindex="-1"&gt;&lt;/a&gt;uri.setDataSource(&lt;span class="st"&gt;""&lt;/span&gt;,sql,&lt;span class="st"&gt;"the_geom"&lt;/span&gt;,&lt;span class="st"&gt;""&lt;/span&gt;,&lt;span class="st"&gt;"id"&lt;/span&gt;)&lt;/span&gt;
&lt;span id="cb1-5"&gt;&lt;a aria-hidden="true" href="#cb1-5" tabindex="-1"&gt;&lt;/a&gt;vlayer &lt;span class="op"&gt;=&lt;/span&gt; QgsVectorLayer(uri.uri(),&lt;span class="st"&gt;"LayerName"&lt;/span&gt;,&lt;span class="st"&gt;"postgres"&lt;/span&gt;)&lt;/span&gt;
&lt;span id="cb1-6"&gt;&lt;a aria-hidden="true" href="#cb1-6" tabindex="-1"&gt;&lt;/a&gt;QgsMapLayerRegistry.instance().addMapLayer(vlayer)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Επίσης, κατόπιν δοκιμών, παρατήρησα ότι το sql ερώτημα δεν πρέπει να
τελειώνει με ερωτηματικό (;) αλλά ούτε πρέπει να οριστεί κάτι στο schema
του QgsDataSourceURI (όπως φαίνεται και στην γραμμή 4, η πρώτη
παράμετρος στο setDataSource είναι ““).&lt;/p&gt;</content><category term="GIS"></category><category term="postgis"></category><category term="pyqgis"></category><category term="python"></category><category term="qgis"></category><category term="sql"></category></entry><entry><title>Υπολογισμός της καμπύλης Lorenz με το open source πακέτο στατιστικής R</title><link href="https://geographer.gr/upologismos-tes-kampules-lorenz-me-to-open-source-paketo-statistikes-r/" rel="alternate"></link><published>2013-10-09T00:10:00+03:00</published><updated>2013-10-09T00:10:00+03:00</updated><author><name>Leonidas Liakos</name></author><id>tag:geographer.gr,2013-10-09:/upologismos-tes-kampules-lorenz-me-to-open-source-paketo-statistikes-r/</id><summary type="html">&lt;p&gt;Ένα από τα μέτρα συγκέντρωσης για την εκτίμηση των περιφερειακών
ανισοτήτων είναι η καμπύλη Lorenz. Για την εφαρμογή της καμπύλης Lorenz
(Παπαδασκαλόπουλος, 2000), οι επιμέρους γεωγραφικές περιοχές με την
έκταση και τον αντίστοιχο πληθυσμό τους, ταξινομούνται κατά φθίνουσα
σειρά της πυκνότητας αυτών, και κάθε μιας των δυο τούτων στηλών, της …&lt;/p&gt;</summary><content type="html">&lt;p&gt;Ένα από τα μέτρα συγκέντρωσης για την εκτίμηση των περιφερειακών
ανισοτήτων είναι η καμπύλη Lorenz. Για την εφαρμογή της καμπύλης Lorenz
(Παπαδασκαλόπουλος, 2000), οι επιμέρους γεωγραφικές περιοχές με την
έκταση και τον αντίστοιχο πληθυσμό τους, ταξινομούνται κατά φθίνουσα
σειρά της πυκνότητας αυτών, και κάθε μιας των δυο τούτων στηλών, της
εκτάσεως και του πληθυσμού, υπολογίζεται η ποσοστιαία κατανομή, καθώς
και η αθροιστική σειρά των ποσοστιαίων τούτων αναλογιών. Στη συνέχεια σε
σύστημα ορθογώνιων συντεταγμένων χαράσσεται η γραφική παράσταση της
καμπύλης Lorenz, στην οποία ο μεν άξονας των τετμημένων μετρά την
αθροιστική σειρά της ποσοστιαίας κατανομής του πληθυσμού, ο δε άξονας
των τεταγμένων της αθροιστική σειρά της ποσοστιαίας κατανομής της
εκτάσεως και εντοπίζονται τα σημεία της αντιστοιχίας των αθροιστικών
σειρών (%) εκτάσεως και πληθυσμού, τα οποία σχηματίζουν πολυγωνική
γραμμή ο (καλούμενη καμπύλη Lorenz), φέρεται δε και η διαγώνιος (45ο),
καλούμενη διαγώνιος ισοκατανομής.&lt;/p&gt;
&lt;p&gt;&lt;img src="https://geographer.gr/images/Economics_Gini_coefficient2.png"/&gt;&lt;/p&gt;
&lt;p&gt;Στην απεικόνιση αυτή παρατηρούνται τα εξής:&lt;/p&gt;
&lt;ol type="1"&gt;
&lt;li&gt;αν ο πληθυσμός ήταν ομοιομόρφως κατανεμημένος σε όλες τις επιμέρους
περιοχές (γεωγραφικά διαμερίσματα), η αθροιστική καμπύλη του πληθυσμού
θα ακολουθούσε τη διαγώνιο γραμμή της αθροιστικής σειράς των περιοχών
(διαγώνιος ισοκατανομής).&lt;/li&gt;
&lt;li&gt;εάν, αντιθέτως ο πληθυσμός ήταν κατανεμημένος με την μέγιστη δυνατή
ανισότητα, τότε η αθροιστική καμπύλη του πληθυσμού θα συνέπιπτε με τον
άξονα των τετμημένων.&lt;/li&gt;
&lt;li&gt;ο βαθμός συγκεντρώσεως αντιπροσωπεύεται κατ’ ακολουθία από την
απόκλιση της καμπύλης μεταξύ των δύο αυτών άκρων.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Στα πλαίσια του τρέχοντος άρθρου και για εκπαιδευτικούς λόγους θα
υπολογιστεί η καμπύλη Lorenz για τον νομό Θεσπρωτίας το 2001 με την
βοήθεια του στατιστικού πακέτου R.&lt;/p&gt;
&lt;p&gt;To R (&lt;a class="uri" href="http://www.r-project.org/"&gt;http://www.r-project.org/&lt;/a&gt;) είναι ένα υπολογιστικό πακέτο
που προσφέρει δυνατότητες διαχείρισης και στατιστικής ανάλυσης δεδομένων
καθώς και δυνατότητες κατασκευής γραφημάτων. Βασίζεται στην γλώσσα
προγραμματισμού S (που χρησιμοποιεί και το στατιστικό πακέτο S plus) και
πρόκειται για λογισμικό ανοικτού κώδικα (open source) που διατίθεται
ελεύθερα. &lt;a href="https://cran.r-project.org/doc/FAQ/R-FAQ.html#What-is-R_003f"&gt;Δείτε
περισσότερα σχετικά με το R&lt;/a&gt; Φυσικά ο υπολογισμός της καμπύλης αποκτά
μεγαλύτερη αξία όταν εκτιμηθεί διαχρονικά και συγκριθεί με αντίστοιχες
καμπύλες άλλων περιφερειών ή της χώρας. Τα σχετικά δεδομένα για τον Ν.
Θεσπρωτίας το έτος 2001 είναι αποθηκευμένα σε ένα αρχείο CSV στην
ακόλουθη μορφή:&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr class="header"&gt;
&lt;th&gt;&lt;strong&gt;ID&lt;/strong&gt;&lt;/th&gt;
&lt;th&gt;&lt;strong&gt;Name&lt;/strong&gt;&lt;/th&gt;
&lt;th&gt;&lt;strong&gt;Population&lt;/strong&gt;&lt;/th&gt;
&lt;th&gt;&lt;strong&gt;Area&lt;/strong&gt;&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr class="odd"&gt;
&lt;td&gt;320100&lt;/td&gt;
&lt;td&gt;ΔΗΜΟΣ ΗΓΟΥΜΕΝΙΤΣΗΣ&lt;/td&gt;
&lt;td&gt;14710&lt;/td&gt;
&lt;td&gt;111.752&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class="even"&gt;
&lt;td&gt;326100&lt;/td&gt;
&lt;td&gt;ΚΟΙΝΟΤΗΤΑ ΠΕΡΔΙΚΑΣ&lt;/td&gt;
&lt;td&gt;2272&lt;/td&gt;
&lt;td&gt;34.605&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class="odd"&gt;
&lt;td&gt;320700&lt;/td&gt;
&lt;td&gt;ΔΗΜΟΣ ΣΥΒΟΤΩΝ&lt;/td&gt;
&lt;td&gt;3010&lt;/td&gt;
&lt;td&gt;72.439&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class="even"&gt;
&lt;td&gt;320200&lt;/td&gt;
&lt;td&gt;ΔΗΜΟΣ ΑΧΕΡΟΝΤΑ&lt;/td&gt;
&lt;td&gt;2344&lt;/td&gt;
&lt;td&gt;67.343&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class="odd"&gt;
&lt;td&gt;320500&lt;/td&gt;
&lt;td&gt;ΔΗΜΟΣ ΠΑΡΑΠΟΤΑΜΟΥ&lt;/td&gt;
&lt;td&gt;1668&lt;/td&gt;
&lt;td&gt;60.334&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class="even"&gt;
&lt;td&gt;320600&lt;/td&gt;
&lt;td&gt;ΔΗΜΟΣ ΣΑΓΙΑΔΑΣ&lt;/td&gt;
&lt;td&gt;2160&lt;/td&gt;
&lt;td&gt;87.803&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class="odd"&gt;
&lt;td&gt;320400&lt;/td&gt;
&lt;td&gt;ΔΗΜΟΣ ΠΑΡΑΜΥΘΙΑΣ&lt;/td&gt;
&lt;td&gt;7859&lt;/td&gt;
&lt;td&gt;342.197&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class="even"&gt;
&lt;td&gt;320300&lt;/td&gt;
&lt;td&gt;ΔΗΜΟΣ ΜΑΡΓΑΡΙΤΙΟΥ&lt;/td&gt;
&lt;td&gt;3032&lt;/td&gt;
&lt;td&gt;149.223&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class="odd"&gt;
&lt;td&gt;320800&lt;/td&gt;
&lt;td&gt;ΔΗΜΟΣ ΦΙΛΙΑΤΩΝ&lt;/td&gt;
&lt;td&gt;8288&lt;/td&gt;
&lt;td&gt;495.727&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class="even"&gt;
&lt;td&gt;326200&lt;/td&gt;
&lt;td&gt;ΚΟΙΝΟΤΗΤΑ ΣΟΥΛΙΟΥ&lt;/td&gt;
&lt;td&gt;748&lt;/td&gt;
&lt;td&gt;93.23&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;Εγκαθιστούμε το R με:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;sudo apt-get install r-base-core&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Εκκινούμε το R πληκτρολογώντας στο τερματικό R (αν θέλουμε γραφικό
περιβάλλον πληκτρολογούμε R –gui=Tk) Κατεβάζουμε και εγκαθιστούμε το
πακέτο lawstat:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;install.packages("lawstat")&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Φορτώνουμε το απαραίτητο πακέτο lawstat με:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;library(lawstat)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Διαβάζουμε τα δεδομένα με την εντολή:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;Data&amp;lt;-read.table('data.csv', header=TRUE)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Στην συνέχεια υπολογίζουμε και αποθηκεύουμε το γράφημα της καμπύλης
Lorenz με τις παρακάτω εντολές:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;png("myplot.png",width=700,height=500)
lorenz.curve(Data[,"Population"], Data[,"Area"])
dev.off()&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Το αποτέλεσμα των παραπάνω εντολών είναι η καμπύλη Lorenz:&lt;/p&gt;
&lt;p&gt;&lt;img src="https://geographer.gr/images/myplot.png"/&gt;&lt;/p&gt;
&lt;p&gt;Η σχετική εντολή στο R (lorenz.curve), δεν υπολογίζει μόνο την
καμπύλη Lorenz αλλά υπολογίζει και διάφορους συντελεστές, (oπως ο
συντελεστής Gini), που αναγράφονται στο αριστερό τμήμα εντός του
γραφήματος.&lt;/p&gt;
&lt;p&gt;Βιβλιογραφία:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Παπαδασκαλόπουλος, Αθ. (2000) Μέθοδοι Περιφερειακής Ανάλυσης,
Παπαζήσης: Αθήνα.&lt;/li&gt;
&lt;li&gt;R-project, Documentation of Lorenz Curve,
http://rss.acs.unt.edu/Rdoc/library/lawstat/html/lorenz.curve.html,
[Πρόσβαση: 3/09/2010].&lt;/li&gt;
&lt;li&gt;Εθνική Στατιστική Υπηρεσία (ΕΣΥΕ), Απογραφή πληθυσμού 2001.
Διαθέσιμο στο: http://www.statistics.gr [Πρόσβαση:10/11/2009]&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;(&lt;em&gt;Ο υπολογισμός της καμπύλης Lorenz έγινε στην διανομή Ubuntu
10.04 LTS-Lucid Lynx με την έκδοση R 2.10.1&lt;/em&gt;)&lt;/p&gt;</content><category term="GIS"></category><category term="lawstat"></category><category term="R"></category><category term="καμπύλη Lorenz"></category></entry><entry><title>Υπολογισμός δεικτών χωρικής κεντρικότητας με την R</title><link href="https://geographer.gr/%CF%87%CF%89%CF%81%CE%B9%CE%BA%CE%AE-%CE%BA%CE%B5%CE%BD%CF%84%CF%81%CE%B9%CE%BA%CF%8C%CF%84%CE%B7%CF%84%CE%B1/" rel="alternate"></link><published>2013-09-22T10:20:00+03:00</published><updated>2013-09-22T10:20:00+03:00</updated><author><name>Leonidas Liakos</name></author><id>tag:geographer.gr,2013-09-22:/χωρική-κεντρικότητα/</id><summary type="html">&lt;p&gt;Οι κεντρογραφικές τεχνικές αποτελούν τις βασικές τεχνικές
περιγραφικής στατιστικής της χωρικής κατανομής. Ο πιο απλός περιγραφικός
δείκτης μιας κατανομής είναι ο &lt;strong&gt;χωρικός μέσος (mean
center)&lt;/strong&gt;. Ουσιαστικά πρόκειται για τον μέσο όρο των
συντεταγμένων Χ,Υ μιας σημειακής κατανομής. Συχνά αποκαλείται και
κεντροειδές.&lt;/p&gt;
&lt;p&gt;Δίνεται από τον τύπο:&lt;/p&gt;
&lt;p&gt;&lt;span class="math display"&gt;\[{x}=\frac{\sum\limits_ …&lt;/span&gt;&lt;/p&gt;</summary><content type="html">&lt;p&gt;Οι κεντρογραφικές τεχνικές αποτελούν τις βασικές τεχνικές
περιγραφικής στατιστικής της χωρικής κατανομής. Ο πιο απλός περιγραφικός
δείκτης μιας κατανομής είναι ο &lt;strong&gt;χωρικός μέσος (mean
center)&lt;/strong&gt;. Ουσιαστικά πρόκειται για τον μέσο όρο των
συντεταγμένων Χ,Υ μιας σημειακής κατανομής. Συχνά αποκαλείται και
κεντροειδές.&lt;/p&gt;
&lt;p&gt;Δίνεται από τον τύπο:&lt;/p&gt;
&lt;p&gt;&lt;span class="math display"&gt;\[{x}=\frac{\sum\limits_{i=1}^n{x_i}}{n},
{y}=\frac{\sum\limits_{i=1}^n{y_i}}{n}\]&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;όπου,&lt;/p&gt;
&lt;p&gt;&lt;span class="math inline"&gt;\(x,y\)&lt;/span&gt; οι συντεταγμένες του χωρικού
μέσου δηλαδή ο μέσος όρος των συντεταγμένων &lt;span class="math inline"&gt;\(x_i,y_i\)&lt;/span&gt; του πλήθους &lt;span class="math inline"&gt;\(N\)&lt;/span&gt; των σημείων της κατανομής. Ταυτόχρονα
με τον αριθμητικό χωρικό μέσο, μπορεί να υπολογιστεί ο
&lt;strong&gt;σταθμισμένος χωρικός μέσος (Weighted Mean Center)&lt;/strong&gt; όπου
ο υπολογισμός γίνεται με το στάθμισμα κάθε συντεταγμένης με μία
μεταβλητή π.χ. εισόδημα, εγκληματικότητα, πληθυσμός κτλ.&lt;/p&gt;
&lt;p&gt;Δίνεται από τον τύπο:&lt;/p&gt;
&lt;p&gt;&lt;span class="math display"&gt;\[{x}_w=\frac{\sum\limits_{i=1}^n{w_ix_i}}{n},{y}_w=\frac{\sum\limits_{i=1}^n{w_iy_i}}{n}\]&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;όπου, &lt;span class="math inline"&gt;\(x_w,y_w\)&lt;/span&gt; οι συντεταγμένες
του σταθμισμένου χωρικού μέσου δηλαδή ο μέσος όρος των διακριτών
συντεταγμένων &lt;span class="math inline"&gt;\(x_i,y_i\)&lt;/span&gt; του πλήθους
&lt;span class="math inline"&gt;\(N\)&lt;/span&gt; των σημείων της κατανομής
σταθμισμένες με το βάρος &lt;span class="math inline"&gt;\(W_i\)&lt;/span&gt; του
κάθε σημείου.&lt;/p&gt;
&lt;p&gt;Παράλληλα με τον χωρικό μέσο ή τον σταθμισμένο χωρικό μέσο,
υπολογίζεται και &lt;strong&gt;η τυπική απόσταση (Standard Distance)&lt;/strong&gt;
ως δείκτης μέτρησης του βαθμού συγκέντρωσης ή διασποράς των σημείων γύρω
από τον χωρικό (ή σταθμισμένο) μέσο. Αποτέλει ότι και η τυπική απόσταση
σε μια μη χωρική κατανομή. Δίνεται από τον τύπο:&lt;/p&gt;
&lt;p&gt;&lt;span class="math display"&gt;\[S_D=\sqrt{\frac{\sum\limits_{i=1}^n(x_i-{x})^2 +
\sum\limits_{i=1}^n(y_i-{y})^2}{n}}\]&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;όπου, &lt;span class="math inline"&gt;\(S_D\)&lt;/span&gt; , η τυπική απόσταση,
&lt;span class="math inline"&gt;\(x,y\)&lt;/span&gt; οι συντεταγμένες του χωρικού
μέσου και &lt;span class="math inline"&gt;\(x_i,y_i\)&lt;/span&gt; οι συντεταγμένες
του κάθε διακριτού σημείου της σημειακής κατανομής.&lt;/p&gt;
&lt;p&gt;Κατ’ αντιστοιχία, υπολογίζεται και &lt;strong&gt;η σταθμισμένη τυπική
απόσταση (weighted standard distance)&lt;/strong&gt; σε περιπτώσεις που
μελετάται η διασπορά σε σχέση με τον σταθμισμένο μέσο όρο.&lt;/p&gt;
&lt;p&gt;Δίνεται από τον τύπο:&lt;/p&gt;
&lt;p&gt;&lt;span class="math display"&gt;\[S_{WD}=\sqrt{\frac{\sum\limits_{i=1}^n
w_i(x_i-{x})^2 + \sum\limits_{i=1}^n w_i(y_i-{y})^2}{n}}\]&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;όπου, &lt;span class="math inline"&gt;\(S_{WD}\)&lt;/span&gt; , η σταθμισμένη
τυπική απόσταση, &lt;span class="math inline"&gt;\(x,y\)&lt;/span&gt; οι
συντεταγμένες του χωρικού μέσου, &lt;span class="math inline"&gt;\(x_i,y_i\)&lt;/span&gt; οι συντεταγμένες του κάθε
διακριτού σημείου της σημειακής κατανομής και &lt;span class="math inline"&gt;\(W_i\)&lt;/span&gt; τ το αντίστοιχο βάρος τους.&lt;/p&gt;
&lt;p&gt;Οι ανωτέρω δείκτες αποκτούν ιδιαίτερη αξία όταν συγκριθούν
διαχρονικά.&lt;/p&gt;
&lt;p&gt;Ας περιγράψουμε ένα παράδειγμα υπολογισμού των παραπάνω δεικτών με το
&lt;a href="http://cran.r-project.org/"&gt;R&lt;/a&gt;. Η σημειακή κατανομή θα
αποτελείται από τους οικισμούς του Ν. Θεσπρωτίας και από τον πραγματικό
πληθυσμό τους κατά τα έτη 1991 και 2001 για περιπτώσεις υπολογισμού
σταθμισμένων δεικτών.&lt;/p&gt;
&lt;p&gt;Ο υπολογισμός των δεικτών χωρικής κεντρικότητας στο R γίνεται με την
χρήση του πακέτου &lt;a href="http://cran.r-project.org/web/packages/aspace/aspace.pdf"&gt;aspace&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Πριν λοιπόν ξεκινήσουμε πρέπει να εγκαταστήσουμε τα απαραίτητα πακέτα
στο R: &lt;a href="http://cran.r-project.org/web/packages/aspace/aspace.pdf"&gt;aspace&lt;/a&gt;,
&lt;a href="http://cran.r-project.org/web/packages/maptools/maptools.pdf"&gt;maptools&lt;/a&gt;,
&lt;a href="http://cran.r-project.org/web/packages/shapefiles/shapefiles.pdf"&gt;shapefiles&lt;/a&gt;,
&lt;a href="http://cran.r-project.org/web/packages/rgdal/rgdal.pdf"&gt;rgdal&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Ξεκινήστε το R ως υπερχρήστης (αλλιώς η εγκατάσταση των πακέτων θα
αποτύχει) και δώστε τις παρακάτω εντολές&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;install.packages("aspace")
install.packages("maptools")
install.packages("shapefiles")
install.packages("rgdal")&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Στην συνέχεια θα σας ζητηθεί να επιλέξετε έναν mirror. Επιλέξτε
Greece και συνεχίστε. Επανεκκινήστε το R ως κανονικός πλέον χρήστης και
δοκιμάστε να φορτώσετε τα παραπάνω πακέτα με τις εξής εντολές:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;library("aspace")
library("maptools")
library("shapefiles")
library("rgdal")&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;την συνέχεια ακολουθεί ο υπολογισμός τον δεικτών (ανατρέξτε στα
σχόλια για λεπτομέρειες):&lt;/p&gt;
&lt;h3 id="υπολογισμός-του-χωρικού-μέσου-των-οικισμών-του-ν.-θεσπρωτίας"&gt;Υπολογισμός
του Χωρικού Μέσου των οικισμών του Ν. Θεσπρωτίας:&lt;/h3&gt;
&lt;pre&gt;&lt;code&gt;#ανάγνωση του αρχείου shapefile OIKISMOI
oikismoi &amp;lt;- readShapePoints("OIKISMOI")
 
#Υπολογισμός του χωρικού μέσου mean_center
mean_centre(id=1, filename="mean.txt", weighted=FALSE, weights=NULL, points=coordinates(oikismoi))
#εξαγωγή σε shapefile 
shp &amp;lt;- convert.to.shapefile (data.frame(meanloc), data.frame(meanatt),"id",1)
write.shapefile(shp, "Mean", arcgis=T)
#εγγραφή αρχείου prj για το ΕΓΣΑ '87
cat(yt(proj4string&amp;lt;-("+proj=tmerc +lat_0=0 +lon_0=24 +k=0.9996 +x_0=500000 +y_0=0 +ellps=GRS80 +towgs84=-199.87,74.79,246.62,0,0,0,0 +units=m +no_defs")),file="Mean.prj")&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Ο Χωρικός Μέσος των οικισμών του Ν. Θεσπρωτίας εντοπίζεται στο σημείο
Χ=191482.2, Υ=4381093.&lt;/p&gt;
&lt;h3 id="υπολογισμός-του-σταθμισμένου-χωρικού-μέσου-για-τον-πραγματικό-πληθυσμό-του-1991-των-οικισμών-του-ν.-θεσπρωτίας"&gt;Υπολογισμός
του Σταθμισμένου Χωρικού Μέσου για τον πραγματικό πληθυσμό του 1991 των
οικισμών του Ν. Θεσπρωτίας:&lt;/h3&gt;
&lt;pre&gt;&lt;code&gt;mean_centre(id=1, filename="mean_PRAG91.txt", weighted=TRUE, weights=oikismoi$POPPRAG199, points=coordinates(oikismoi))
#εξαγωγή σε shapefile
shp &amp;lt;- convert.to.shapefile (data.frame(meanloc), data.frame(meanatt),"id",1)
write.shapefile(shp, "Mean_PRAG1991", arcgis=T)
#εγγραφή αρχείου prj για το ΕΓΣΑ '87
cat(showWKT(proj4string&amp;lt;-("+proj=tmerc +lat_0=0 +lon_0=24 +k=0.9996 +x_0=500000 +y_0=0 +ellps=GRS80 +towgs84=-199.87,74.79,246.62,0,0,0,0 +units=m +no_defs")),file="Mean_PRAG1991.prj")&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Ο Σταθμισμένος Χωρικός Μέσος των οικισμών του Ν. Θεσπρωτίας για το
2001 εντοπίζεται στο σημείο Χ=187644.1, Υ=4378180.&lt;/p&gt;
&lt;h3 id="υπολογισμός-της-σταθμισμένης-τυπικής-απόστασης-για-τον-πραγματικό-πληθυσμό-του-1991-των-οικισμών-του-ν.-θεσπρωτίας"&gt;Υπολογισμός
της Σταθμισμένης Τυπικής Απόστασης για τον πραγματικό πληθυσμό του 1991
των οικισμών του Ν. Θεσπρωτίας:&lt;/h3&gt;
&lt;pre&gt;&lt;code&gt;## SDD 1991
calc_sdd(id=1, filename="SDD_PRAG91.txt", centre.xy=NULL, calccentre=TRUE,weighted=TRUE, weights=oikismoi$POPPRAG199,points=coordinates(oikismoi),verbose=TRUE)
shp &amp;lt;- convert.to.shapefile(sddloc,sddatt,"id",5)
write.shapefile(shp, "SDD_1991", arcgis=T)
cat(showWKT(proj4string&amp;lt;-("+proj=tmerc +lat_0=0 +lon_0=24 +k=0.9996 +x_0=500000 +y_0=0 +ellps=GRS80 +towgs84=-199.87,74.79,246.62,0,0,0,0 +units=m +no_defs")),file="SDD_1991.prj")&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Η Σταθμισμένη Τυπική Απόσταση για τον πραγματικό πληθυσμό του 1991
των οικισμών του Ν. Θεσπρωτίας έχει ακτίνα 14563.64μ.&lt;/p&gt;
&lt;p&gt;To R δίνει την δυνατότητα στον χρήστη να αποδόσει σε γράφημα τους
δείκτες του πακέτου aspace. Στην περίπτωση της Σταθμισμένης Τυπικής
Απόστασης η απόδοση γίνεται με την χρήσης της εντολής plot_sdd. Η εντολή
plot_sdd αποδίδει την τυπική απόσταση σαν ένα κύκλο με κέντρο τον χωρικό
μέσο.&lt;/p&gt;
&lt;p&gt;Παρατίθεται η σύνταξη της σχετικής εντολής:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt; plot_sdd(centre.col='red', titletxt="Σταθμισμένη Τυπική Απόσταση n για τον πραγματικό πληθυσμό του 1991 των οικισμών του Ν. Θεσπρωτίας", jpeg=TRUE)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Το αποτέλεσμα είναι το παρακάτω γράφημα:&lt;/p&gt;
&lt;p&gt;&lt;img src="https://geographer.gr/images/SDD1.jpg"/&gt;&lt;/p&gt;
&lt;h3 id="υπολογισμός-του-σταθμισμένου-χωρικού-μέσου-για-τον-πραγματικό-πληθυσμό-του-2001-των-οικισμών-του-ν.-θεσπρωτίας"&gt;Υπολογισμός
του Σταθμισμένου Χωρικού Μέσου για τον πραγματικό πληθυσμό του 2001 των
οικισμών του Ν. Θεσπρωτίας:&lt;/h3&gt;
&lt;pre&gt;&lt;code&gt;mean_centre(id=1, filename="mean_PRAG2001.txt", weighted=TRUE, weights=oikismoi$POPPRAG200, points=coordinates(oikismoi))
#εξαγωγή σε shapefile
shp &amp;lt;- convert.to.shapefile (data.frame(meanloc), data.frame(meanatt),"id",1)
write.shapefile(shp, "Mean_PRAG2001", arcgis=T)
#εγγραφή αρχείου prj για το ΕΓΣΑ '87
cat(showWKT(proj4string&amp;lt;-("+proj=tmerc +lat_0=0 +lon_0=24 +k=0.9996 +x_0=500000 +y_0=0 +ellps=GRS80 +towgs84=-199.87,74.79,246.62,0,0,0,0 +units=m +no_defs")),file="Mean_PRAG2001.prj")&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Ο Σταθμισμένος Χωρικός Μέσος των οικισμών του Ν. Θεσπρωτίας για το
2001 εντοπίζεται στο σημείο Χ=186711.3, Υ=4377762.&lt;/p&gt;
&lt;h3 id="υπολογισμός-της-σταθμισμένης-τυπικής-απόστασης-για-τον-πραγματικό-πληθυσμό-του-2001-των-οικισμών-του-ν.-θεσπρωτίας"&gt;Υπολογισμός
της Σταθμισμένης Τυπικής Απόστασης για τον πραγματικό πληθυσμό του 2001
των οικισμών του Ν. Θεσπρωτίας:&lt;/h3&gt;
&lt;pre&gt;&lt;code&gt;## SDD 2001
calc_sdd(id=1, filename="SDD_2001.txt", centre.xy=NULL, calccentre=TRUE,weighted=TRUE, weights=oikismoi$POPPRAG200,points=coordinates(oikismoi),verbose=TRUE)
write.shapefile(shp, "SDD_2001", arcgis=T)
cat(showWKT(proj4string&amp;lt;-("+proj=tmerc +lat_0=0 +lon_0=24 +k=0.9996 +x_0=500000 +y_0=0 +ellps=GRS80 +towgs84=-199.87,74.79,246.62,0,0,0,0 +units=m +no_defs")),file="SDD_2001.prj")&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Η Σταθμισμένη Τυπική Απόσταση για τον πραγματικό πληθυσμό του 2001
των οικισμών του Ν. Θεσπρωτίας έχει ακτίνα 14019.97μ.&lt;/p&gt;
&lt;p&gt;Οι δείκτες είναι πιο αποκαλυπτικοί αν αποδοθούν σε έναν χάρτη.&lt;/p&gt;
&lt;p&gt;&lt;img src="https://geographer.gr/images/xorikos.mesos_.jpeg"/&gt;&lt;/p&gt;
&lt;p&gt;Το πρώτο βασικό συμπέρασμα που διεξάγεται από τον χάρτη είναι ότι οι
σταθμισμένοι χωρικοί μέσοι εντοπίζονται ΝΔ από τον χωρικό μέσο προφανώς
ως απόρροια της επιρροής του πληθυσμού αστικών κέντρων όπως η
Ηγουμενίτσα, η Πέρδικα, το Μαργαρίτι, το Γαρδίκι και η Παραμυθιά.&lt;/p&gt;
&lt;p&gt;Όσον αφορά τον σταθμισμένο χωρικό μέσο του πραγματικού πληθυσμού
αυτός κινείται διαχρονικά, από το 1991 στο 2001, προς τα Δ-ΝΔ ως
αποτέλεσμα της σημαντικής αύξησης του πραγματικού πληθυσμού της
Ηγουμενίτσας (+28,00%) και της μείωσης του πληθυσμού των Φιλιατών
(-13,00%).&lt;/p&gt;
&lt;p&gt;Η σταθμισμένη τυπική απόσταση δεν σημειώνει αξιόλογη μεταβολή παρά
μόνο μια μικρή συσπείρωση των τιμών γύρω από τον σταθμισμένο χωρικό μέσο
το 2001 σε σχέση με το 1991.&lt;/p&gt;
&lt;p&gt;Ανάλογα με τα δεδομένα μας και τον τρόπο προσπέλασης τους ο
υπολογισμός των δεικτών μπορεί να γίνει με κλίση του R μέσω python με το
πακέτο &lt;a href="http://rpy.sourceforge.net/"&gt;rpy/rpy2&lt;/a&gt; ή μέσω Grass
GIS με το πακέτο &lt;a href="http://cran.r-project.org/web/packages/spgrass6/spgrass6.pdf"&gt;spgrass6&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Για παράδειγμα ο υπολογισμός του χωρικού μέσου μπορεί να υπολογιστεί
μέσω Python και rpy2 με το παρακάτω script:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;import rpy2.robjects as robjects
from rpy2.robjects.packages import importr
r=robjects.r
aspace = importr("aspace")
maptools = importr("maptools")
shapefiles = importr("shapefiles")
rgdal = importr("rgdal")
sp = importr("sp")
shp=maptools.readShapePoints("OIKISMOI")
mean=aspace.mean_centre(id=1, filename="mean.txt", weighted="FALSE", weights="NULL",points=sp.coordinates(shp))
myshp = shapefiles.convert_to_shapefile(r('data.frame(meanatt)'), r('data.frame(meanloc)'), "id",1)
shapefiles.write_shapefile(myshp, "Mean", arcgis="T")
proj4string="+proj=tmerc +lat_0=0 +lon_0=24 +k=0.9996 +x_0=500000 +y_0=0 +ellps=GRS80 +towgs84=-199.87,74.79,246.62,0,0,0,0 +units=m +no_defs"
r.cat(rgdal.showWKT(proj4string, file="Mean.prj"))&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Η αντίστοιχη διαδικασία μπορεί να εκτελεστεί και μέσω GRASS με την
χρήστου του πακέτου
[spgrass6](http://cran.r-project.org/web/packages/spgrass6/spgrass6.pdf
όπως φαίνεται στο παράδειγμα:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;library("aspace")
library("spgrass6")
oikismoi &amp;lt;- readVECT6("OIKISMOI")
mean_centre(id=1, filename="mean.txt", weighted=FALSE, weights=NULL, points=coordinates(oikismoi))
mean_centre &amp;lt;- SpatialPointsDataFrame(coords=data.frame(meanloc[2],meanloc[3]), data=meanatt)
writeVECT6(mean_centre,v.in.ogr_flags=c("o", "overwrite"), "mean_centre")&lt;/code&gt;&lt;/pre&gt;</content><category term="GIS"></category><category term="aspace"></category><category term="maptools"></category><category term="R"></category><category term="rgdal"></category><category term="rpy"></category><category term="shapefiles"></category><category term="spgrass6"></category></entry><entry><title>Οπτική βελτίωση σκιασμένου αναγλύφου εδάφους</title><link href="https://geographer.gr/optike-beltiose-skiasmenou-anagluphou-edaphous/" rel="alternate"></link><published>2013-02-13T00:10:00+02:00</published><updated>2013-02-13T00:10:00+02:00</updated><author><name>Leonidas Liakos</name></author><id>tag:geographer.gr,2013-02-13:/optike-beltiose-skiasmenou-anagluphou-edaphous/</id><summary type="html">&lt;p&gt;Παρακάτω προτείνεται μια μεθοδολογία με εργαλεία ΕΛ/ΛΑΚ, για την
οπτική βελτίωση μιας σκίασης αναγλύφου εδάφους.&lt;/p&gt;
&lt;p&gt;Το λογισμικό που απαιτείται είναι το &lt;a href="http://www.gdal.org/gdaldem.html"&gt;gdaldem&lt;/a&gt;, &lt;a href="http://www.gdal.org/gdalwarp.html"&gt;gdalwrap&lt;/a&gt; και το &lt;a href="https://www.gimp.org/"&gt;GIMP&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Τα κλασσικά προγράμματα ΣΓΠ αναπαριστούν την σκίαση αναγλύφου με
τρόπο μονότονο, συχνά μη φυσικό και με περιττή πληροφορία για τον
αναγνώστη.&lt;/p&gt;
&lt;p&gt;Στόχος είναι …&lt;/p&gt;</summary><content type="html">&lt;p&gt;Παρακάτω προτείνεται μια μεθοδολογία με εργαλεία ΕΛ/ΛΑΚ, για την
οπτική βελτίωση μιας σκίασης αναγλύφου εδάφους.&lt;/p&gt;
&lt;p&gt;Το λογισμικό που απαιτείται είναι το &lt;a href="http://www.gdal.org/gdaldem.html"&gt;gdaldem&lt;/a&gt;, &lt;a href="http://www.gdal.org/gdalwarp.html"&gt;gdalwrap&lt;/a&gt; και το &lt;a href="https://www.gimp.org/"&gt;GIMP&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Τα κλασσικά προγράμματα ΣΓΠ αναπαριστούν την σκίαση αναγλύφου με
τρόπο μονότονο, συχνά μη φυσικό και με περιττή πληροφορία για τον
αναγνώστη.&lt;/p&gt;
&lt;p&gt;Στόχος είναι να εφαρμόσουμε μια τεχνική που πρώτος εφάρμοσε ο &lt;a href="http://www.reliefshading.com/cartographers/imhof.html"&gt;Eduard
Imhof&lt;/a&gt;, την αναπαράσταση του αναγλύφου με θέαση αφ’ ύψηλου (aerial
perspective). Η συγκεκριμένη τεχνική του Imhof προσομοιάζει την
πραγματική, αφ’ υψηλού οπτική ενός τοπίου όπου ο θεατής βλέπει τις
κορυφές με περισσότερη λεπτομέρεια και έντονη αντίθεση και τις περιοχές
χαμηλότερου υψομέτρου με λιγότερη λεπτομέρεια λόγω απόστασης και ομίχλης
στο τοπίο. Η τεχνική που ακολουθεί απαιτεί:&lt;/p&gt;
&lt;ol type="1"&gt;
&lt;li&gt;&lt;p&gt;Ένα Ψηφιακό Μοντέλο Εδάφους (DEM)&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Σκίαση του ανωτέρω DEM με διπλάσια κάθετη υπερβολή του υψομέτρου
(z exaggeration).&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Σκίαση του ανωτέρω DEM με διπλάσια κάθετη υπερβολή του υψομέτρου
(z exaggeration) και πηγή φωτός σε γωνία 90 μοιρών.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Τεχνικές θαμπώματος (blur) για την εξομάλυνση και την απαλοιφή
της περιττής πληροφορίας του DEM.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Οπτική ενίσχυση των ορεινών όγκων και μίξη του αποτελέσματος με
την σκίαση.&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Παρακάτω φαίνεται η σύγκριση μεταξύ μίας τυπικής σκίασης αναγλύφου
και της σκίασης που προκύπτει μετά την προτεινόμενη μέθοδο απεικόνισης
και επεξεργασίας.&lt;/p&gt;
&lt;!-- more --&gt;
&lt;p&gt;&lt;img src="https://geographer.gr/images/aster_ggrs.hillshade.z1.jpg" title="Τυπική σκίαση αναγλύφου" width="400"/&gt;
&lt;img src="https://geographer.gr/images/dem_final.jpg" title="Σκίαση αναγλύφου κατόπιν επεξεργασίας" width="400"/&gt;&lt;/p&gt;
&lt;h3 id="περιγραφη-τησ-μεθοδου"&gt;ΠΕΡΙΓΡΑΦΗ ΤΗΣ ΜΕΘΟΔΟΥ&lt;/h3&gt;
&lt;p&gt;Κατεβάζουμε από την ιστοσελίδα &lt;a class="uri" href="http://gdem.ersdac.jspacesystems.or.jp/search.jsp"&gt;http://gdem.ersdac.jspacesystems.or.jp/search.jsp&lt;/a&gt; το
απαραίτητο Dem προς επεξεργασία στην περίπτωσή μας το:
ASTGTM2_N39E020.zip&lt;/p&gt;
&lt;p&gt;Ακολουθεί αποσυμπίεση του συμπιεσμένου αρχείου με:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;unzip -j ASTGTM2_N39E020.zip&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Μετατροπή του DEM στο ΕΓΣΑ’87 με:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;gdalwarp -t_srs EPSG:2100 -s_srs EPSG:4326 ASTGTM2_N39E020_dem.tif aster_GGRS.tif -r bilinear&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Κρίσιμη επίδραση στην οπτική απόδοση της σκίασης του αναγλύφου έχει η
παράμετρος της κάθετης υπερβολής (z exaggeration) του υψομέτρου, η οποία
ορίζεται στο διπλάσιο.&lt;/p&gt;
&lt;p&gt;Υπολογισμός σκίασης του ανωτέρω DEM με διπλάσια κάθετη υπερβολή του
υψομέτρου:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;gdaldem hillshade aster_GGRS.tif aster_GGRS.hillshade.z2.tif -z 2&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Υπολογισμός σκίασης του ανωτέρω DEM με διπλάσια κάθετη υπερβολή του
υψομέτρου (z exaggeration) και με ύψος φωτεινής πηγής 90 μοίρες:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;gdaldem hillshade aster_GGRS.tif aster_GGRS.x2.alt90.tif -z 2 -alt 90 -compute_edges&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id="επεξεργασια-στο-gimp"&gt;ΕΠΕΞΕΡΓΑΣΙΑ ΣΤΟ GIMP&lt;/h3&gt;
&lt;ol type="1"&gt;
&lt;li&gt;Γενίκευση της σκίασης και τεχνικές θαμπώματος (blur)&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Ανοίγουμε στο GIMP το αρχείο aster_GGRS.hillshade.z2.tif με σκοπό
αρχικά να μειώσουμε τον “θορυβο” και την περιττή πληροφορία, να
γενικεύσουμε την επιφάνεια. Ένα κατάλληλο εργαλείο γι’ αυτή την
επεξεργασία είναι το &lt;a href="http://registry.gimp.org/node/24208"&gt;Simple surface blur/bilateral
filter&lt;/a&gt;, το οποίο απαιτεί ειδική εγκατάσταση στο GIMP.&lt;/p&gt;
&lt;p&gt;Επιλέγουμε &lt;em&gt;Filters-&amp;gt;Blur-&amp;gt;Simple Bilateral&lt;/em&gt; και
ορίζουμε τιμές:&lt;/p&gt;
&lt;p&gt;Size:79&lt;/p&gt;
&lt;p&gt;Threshold:118&lt;/p&gt;
&lt;p&gt;Οι τιμές είναι ενδεικτικές και προκύπτουν μετά από δοκιμές, ανάλογα
την επίδραση στο τελικό αποτέλεσμα.&lt;/p&gt;
&lt;p&gt;Επιλέγουμε &lt;em&gt;Filters-&amp;gt;Blur-&amp;gt;Gaussian Blur&lt;/em&gt; και ορίζουμε
τιμές στο Blur Radius:&lt;/p&gt;
&lt;p&gt;Horizontal:3&lt;/p&gt;
&lt;p&gt;Vertical:3&lt;/p&gt;
&lt;p&gt;&lt;img src="https://geographer.gr/images/gaussian_blur.jpg"/&gt;&lt;/p&gt;
&lt;p&gt;Μπορούμε να συνεχίσουμε την αφαίρεση “θορύβου” με το φίλτρο Despeckle
(Filters &amp;gt; Enhance &amp;gt; Despeckle) όπου δίνουμε τις παραμέτρους της
παρακάτω εικόνας: &lt;img src="https://geographer.gr/images/despeckle.jpg"/&gt;&lt;/p&gt;
&lt;ol start="2" type="1"&gt;
&lt;li&gt;Οπτική ενίσχυση του αναγλύφου με βάση το υψόμετρο:&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Μετατρέπουμε το Dem (aster_GGRS.tif) σε μορφή αναγνώσιμη για το GIMP
(8-bit):&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;convert aster_GGRS.tif -evaluate multiply 26.54 -depth 8 new.tif&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;και το ανοίγουμε στο GIMP. Το επιλέγουμε και το αντιγράφουμε.&lt;/p&gt;
&lt;p&gt;Στην συνέχεια στο GIMP, στο αρχείο όπου επεξεργαζόμαστε το ανάγλυφο
(aster_GGRS.hillshade.z2.tif), δημιουργούμε ένα αντίγραφο του layer και
σε αυτό προσθέτουμε μία Layer Mask από το Layer-&amp;gt;Mask-&amp;gt;Add Layer
Mask-&amp;gt;Layers Alpha Channel. Στο mode ορίζουμε Multiply.&lt;/p&gt;
&lt;p&gt;Κάνουμε paste into το layer με το DEM (aster_GGRS.tif) πάνω στο
Duplicated Layer και στην συνέχεια με δεξί κλίκ Anchor Layer.&lt;/p&gt;
&lt;p&gt;Τα layers στο GIMP πρέπει να είναι σε αυτή την μορφή:&lt;/p&gt;
&lt;p&gt;&lt;img src="https://geographer.gr/images/layers.jpg"/&gt;&lt;/p&gt;
&lt;p&gt;Πάνω στο Duplicated Layer κάνουμε με δεξί κλίκ Show Layer Mask και
Edit Layer Mask. Βλέπουμε το layer δηλαδή το αρχείο DEM που
χρησιμοποιειται για την διαφάνεια Alpha. Μπορούμε να τονίσουμε ακόμα
περισσότερο τις κορυφές του αναγλύφου με τις εντολές Colors-&amp;gt;Levels
και Colors-&amp;gt;Brightenest-Contrast και Colors-&amp;gt;Auto-&amp;gt;Stretch
Contrast.&lt;/p&gt;
&lt;p&gt;&lt;img src="https://geographer.gr/images/alpha.jpg"/&gt;&lt;/p&gt;
&lt;p&gt;Έτσι επιτυγχάνουμε να τονίσουμε τους ορεινούς όγκους του αναγλύφου
και την αίσθηση της οπτική θέασης αφ’ ύψηλου. Όπως φαίνεται στην
παρακάτω εικόνα η εφαρμογή της μάσκας στην σκίαση αναγλύφου έχει σαν
αποτέλεσμα να καθιστά ορατά μόνο συγκεκριμένα τμήματα.&lt;/p&gt;
&lt;p&gt;&lt;img src="https://geographer.gr/images/alpha.png"/&gt;&lt;/p&gt;
&lt;p&gt;Το επόμενο βήμα είναι να προσθέσουμε το αρχείο
aster_GGRS.x2.alt90.tif στο αρχείο μας σαν layer (File-&amp;gt;Open as
Layer) και να το μεταφέρουμε στην κορυφή της σειράς των layers. &lt;img src="https://geographer.gr/images/dem_alt90.jpg"/&gt;&lt;/p&gt;
&lt;p&gt;Τέλος του ορίζουμε μικρή τιμή διαφάνειας (π.χ. 20%), με δοκιμές
φαίνεται ανάλογα το αποτέλεσμα της μίξης των layers. Το αρχείο
αποθηκεύεται με την ονομασία final.tif &lt;img src="https://geographer.gr/images/dem_final.jpg"/&gt;&lt;/p&gt;
&lt;p&gt;Μετά το πέρας της διαδικασίας το αρχείο δεν έχει πλέον καμία
γεωαναφορά και για να την επαναφέρουμε μπορούμε να εκμεταλλευτούμε τα
αντίστοιχα δεδομένα από τα αρχεία εισόδου που χρησιμοποιήθηκαν και
περιέχουν γεωγραφική εξάρτηση και πληροφορία. Αρκεί ένα από αυτά τα
αρχεία για να εξάγουμε την σχετική πληροφορία και να την προσαρτήσουμε
στο αρχείο της σκίασης με την προυπόθεση όμως ότι αυτό δεν έχει υποστεί
αλλαγές στο μέγεθός του.Έστω ότι το αρχείο που χρησιμοποιούμε είναι το
αρχικό αρχείο ψηφιακού μοντέλου εδάφους στο ΕΓΣΑ’87, το αρχείο
aster_GGRS.tif&lt;/p&gt;
&lt;p&gt;Οι εντολές που απαιτούνται είναι:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;listgeo -tfw aster_GGRS.tif
listgeo aster_GGRS.tif&amp;amp;gt;projdef.txt
geotifcp -e aster_GGRS.tfw -g projdef.txt final.tif final.GGRS.tif&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Με την πρώτη εντολή εξάγουμε τo αρχείο tfw από το aster_GGRS.tif, Με
την δεύτερη εντολή εξάγουμε τα μεταδεδομένα του αρχείου aster_GGRS.tif
και τέλος Με την τρίτη εντολή επισυνάπτουμε το αρχείο tfw και τα
μεταδεδομένα σε ένα νέο αρχείο σκίασης αναγλύφου. Το τελικό στάδιο είναι
να συγχωνεύσουμε την σκίαση αναγλύφου με το ψηφιακό μοντέλου εδάφους σε
φυσικά χρώματα. Γι’ αυτήν την διαδικασία απαιτείται μια παλέτα χρωμάτων
κατηγοριοποιημένη σύμφωνα με κλάσεις του υψομέτρου. Για να φτιάξουμε την
παλέτα απαιτείται να γνωρίζουμε το μέγιστο και το ελάχιστο υψόμετρο του
αρχείου μας (μπορούμε να το αναζητήσουμε με: gdalinfo -mm
aster_GGRS.tif) και ανάλογα το εύρος και το πλήθος των κλάσεων ορίζουμε
τις τιμές ανά κλάση. Μία τέτοια παλέτα χρωμάτων φαίνεται παρακάτω:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;0 216 242 254
0.001 110 220 110
900 240 250 160
1300 230 220 170
1900 220 220 220
2500 250 250 250&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Για την αναπαραγωγή του νέου έγχρωμου DEM δίνουμε την παρακάτω
εντολή:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;gdaldem color-relief -co compress=lzw aster_GGRS.tif dem_ramp2 aster_GGRS-color2.tif&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;a href="https://geographer.gr/extra/dem_ramp2"&gt;βλέπε αρχείο dem_ramp2&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Η τελική συγχώνευση μπορεί να ολοκληρωθεί με την συμβολή διάφορων
λογισμικών όπως το QGIS, ή το Tilemill ή ακόμα και με μία εντολή στο
τερματικό μέσω του nik2img.py όπως:&lt;/p&gt;
&lt;p&gt;nik2img.py mapnik.xml out.png -d 3273 4144 -e 153409.664 4320757.413
243762.891 4435155.143&lt;/p&gt;
&lt;p&gt;&lt;a href="https://geographer.gr/extra/mapnik.xml"&gt;βλέπε αρχείο
mapnik.xml&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;όπου -d οι διαστάσεις της εικόνας σε εικονοστοιχεία και -e η έκταση
του χάρτη σε μονάδες μέτρησης του ΕΓΣΑ’87 (μέτρα). Το τελικό απότέλεσμα
είναι το παρακάτω:&lt;/p&gt;
&lt;p&gt;&lt;img src="https://geographer.gr/images/out.jpg"/&gt;&lt;/p&gt;</content><category term="GIS"></category><category term="dem"></category><category term="gdaldem"></category><category term="gdalwrap"></category><category term="GIMP"></category><category term="σκίαση εδάφους"></category></entry><entry><title>Online Σύστημα Γεωγραφικών Πληροφοριών Δήμου Σουλίου</title><link href="https://geographer.gr/online-sustema-geographikon-plerophorion-demou-souliou/" rel="alternate"></link><published>2013-02-08T10:20:00+02:00</published><updated>2013-02-08T10:20:00+02:00</updated><author><name>Leonidas Liakos</name></author><id>tag:geographer.gr,2013-02-08:/online-sustema-geographikon-plerophorion-demou-souliou/</id><summary type="html">&lt;p&gt;Η εν λόγω πλατφόρμα αποτελεί ένα Σύστημα Γεωγραφικών Πληροφοριών
(ΣΓΠ-GIS) για τον &lt;a href="http://www.dimossouliou.gov.gr/"&gt;δήμο
Σουλίου&lt;/a&gt; σε πρώιμο στάδιο. Η λειτουργία του βασίζεται στο λογισμικό
ανοικτού κώδικα WorldMap που είναι μια πλατφόρμα τεχνολογίας διαδικτύου
σε συνδυασμό με ΣΓΠ. Η πλατφόρμα προσφέρει την τεχνολογική υποδομή μέσω
της οποίας μπορεί να στηριχθεί η αποτύπωση …&lt;/p&gt;</summary><content type="html">&lt;p&gt;Η εν λόγω πλατφόρμα αποτελεί ένα Σύστημα Γεωγραφικών Πληροφοριών
(ΣΓΠ-GIS) για τον &lt;a href="http://www.dimossouliou.gov.gr/"&gt;δήμο
Σουλίου&lt;/a&gt; σε πρώιμο στάδιο. Η λειτουργία του βασίζεται στο λογισμικό
ανοικτού κώδικα WorldMap που είναι μια πλατφόρμα τεχνολογίας διαδικτύου
σε συνδυασμό με ΣΓΠ. Η πλατφόρμα προσφέρει την τεχνολογική υποδομή μέσω
της οποίας μπορεί να στηριχθεί η αποτύπωση κάθε είδους χωρικών δεδομένων
(διανυσματικών και ψηφιδωτών) και να χαρτογραφηθούν πολύτιμα δεδομένα
που είναι αποσπασματικά αποθηκευμένα σε έγγραφα, χάρτες, συσκευές GPS,
ιδιωτικές συλλογές και δημόσια αρχεία. Σκοπεύοντας στην συγχώνευση
γεωχωρικών δεδομένων από διαφορετικές πηγές και μέσα αποτελεί ένα
εύχρηστο εργαλείο σχεδιασμού για τις τοπικές αρχές αυτοδιοίκησης αλλά
και μία ολοκληρωμένη βάση δεδομένων για τον μεμονωμένο επιστήμονα,
ερευνητή. Αναμφισβήτητη δε είναι και η συνεισφορά του στον επισκέπτη
αυτού του τόπου εφόσον μπορεί ταυτόχρονα να λειτουργήσει σαν τουριστικός
χάρτης σε όποιον περιηγητή επιθυμεί να γνωρίσεις τις ομορφιές του δήμου.
Οι λειτουργίες του όμως δεν περιορίζονται στην απλή εποπτεία των χωρικών
δεδομένων αλλά με συμμετοχικό τρόπο κάθε χρήστης-επισκέπτης της
πλατφόρμας μπορεί να συμβάλει με την προσθήκη/διόρθωση δεδομένων σε
αυτή. Μέσω ενός συστήματος καταχώρησης δικαιωμάτων, ο διαχειριστής
επιλέγει το επίπεδο πρόσβασης στην επεξεργασία και προσπέλασης των
χωρικών δεδομένων σε ομάδες χρηστών. Παράλληλα με την απόδοση των
χωρικών δεδομένων η πλατφόρμα προσφέρει σε αρκετές περιπτώσεις πληθώρα
περιγραφικών δεδομένων για τα γεωγραφικά αντικείμενα καθώς και
παραπομπές σε ιστοσελίδες σχετικές με αυτά. Όσον αφορά την πηγή των
δεδομένων αυτά προέρχονται από πηγές που διαθέτουν ελεύθερα δεδομένα
όπως το &lt;a href="http://geodata.gov.gr/"&gt;geodata.gov.gr&lt;/a&gt; αλλά και από
επεξεργασία δεδομένων από το προσωπικό αρχείο του διαχειριστή. Είναι
λοιπόν στο χέρι των χρηστών να επεκταθεί η γκάμα των θεματικών επιπέδων
των δεδομένων, να αξιολογηθεί ποιοτικά και να ενημερώνεται τακτικά ώστε
να έχει πρακτική εφαρμογή σε καθημερινές δράσης σε συλλογικό αλλά και
ατομικό επίπεδο. Σε μελλοντικές εκδόσεις θα μπορούσε να καλύψει ανάγκες
της διοικητικής λειτουργίας του δήμου στο σχεδιασμό και την εκπόνηση
έργων και την λήψη αποφάσεων αφού υπάρχει η δυνατότητα να αποτυπωθούν
δεδομένα συνοδευόμενα με τα σχετικά αρχεία τεκμηρίωσης όπως Γενικά
Πολεοδομικά Σχέδια, Πολεοδομικές Μελέτες, Ζώνες αντικειμενικών αξιών
ακινήτων, Αναδασμοί, δίκτυα κοινής ωφελείας, διαδρομές απορριματοφόρών,
κοινόχρηστοι χώροι, ζώνες προστασίας αρχαιολογικών χώρων και φυσικών
πόρων κ.α. Ταυτόχρονα, με την ανάρτηση όλων αυτών των δεδομένων στο
διαδίκτυο, η τοπική αυτοδιοίκηση μπορεί να αποφορτιστεί από το βάρος της
διάχυσης της πληροφορίας προς το κοινό αποφεύγοντας παραδοσιακές
μεθόδους που πολλές φορές ταλαιπωρούν τον πολίτη και δεσμεύουν
πολύτιμους ανθρώπινους πόρους από την διοικητική μηχανή.&lt;/p&gt;
&lt;p&gt;&lt;img src="https://geographer.gr/images/gis_souliou.jpg"/&gt;&lt;/p&gt;
&lt;p&gt;Δείτε το Σύστημα Γεωγραφικών Πληροφοριών &lt;a href="http://worldmap.harvard.edu/maps/536"&gt;εδώ&lt;/a&gt;&lt;/p&gt;</content><category term="GIS"></category><category term="GIS"></category><category term="Δήμος Σουλίου"></category><category term="Σύστημα Γεωγραφικών Πληροφοριών"></category></entry><entry><title>Αυτοματοποιημένη χαρτογράφηση της σεισμικής δραστηριότητας με βιβλιοθήκες ΕΛΛΑΚ.</title><link href="https://geographer.gr/automatopoiemene-khartographese-tes-seismikes-drasteriotetas-me-bibliothekes-ellak/" rel="alternate"></link><published>2012-01-28T00:10:00+02:00</published><updated>2012-01-28T00:10:00+02:00</updated><author><name>Leonidas Liakos</name></author><id>tag:geographer.gr,2012-01-28:/automatopoiemene-khartographese-tes-seismikes-drasteriotetas-me-bibliothekes-ellak/</id><summary type="html">&lt;p&gt;Αρκετοί χρήστες, κυρίως αρχάριοι, αναρωτιούνται γιατί να
χρησιμοποιήσει κάποιος μια γλώσσα προγραμματισμού και να συντάξει ένα
σενάριο (script), πολύπλοκων αρκετές φορές, εντολών για να παράγει ένα
χάρτη από την στιγμή που υπάρχει λογισμικό με γραφικό περιβάλλον που με
ευκολία μπορεί να οδηγήσει στο ίδιο αποτέλεσμα; Η απάντηση είναι, μεταξύ
άλλων …&lt;/p&gt;</summary><content type="html">&lt;p&gt;Αρκετοί χρήστες, κυρίως αρχάριοι, αναρωτιούνται γιατί να
χρησιμοποιήσει κάποιος μια γλώσσα προγραμματισμού και να συντάξει ένα
σενάριο (script), πολύπλοκων αρκετές φορές, εντολών για να παράγει ένα
χάρτη από την στιγμή που υπάρχει λογισμικό με γραφικό περιβάλλον που με
ευκολία μπορεί να οδηγήσει στο ίδιο αποτέλεσμα; Η απάντηση είναι, μεταξύ
άλλων, γιατί θέλει να αυτοματοποιήσει την διαδικασία και να αποφύγει ο
χρήστης την επανάληψη εργασιών που πολλές φορές στοιχίζει σε χρόνο και
χρήμα. Με την σύνταξη του κατάλληλου σεναρίου ο υπολογιστής αναλαμβάνει
να εκτελέσει όλη την εργασία και να την επαναλαμβάνει όποτε ο χρήστης
του ορίσει.&lt;/p&gt;
&lt;p&gt;&lt;img src="https://geographer.gr/images/eqf1.png"/&gt;&lt;/p&gt;
&lt;p&gt;Για να γίνει πιο κατανοητή η δύναμη της αυτοματοποιημένης
χαρτογραφίας παρατίθεται ένα παράδειγμα χαρτογράφησης των σεισμών σε
παγκόσμιο επίπεδο.&lt;/p&gt;
&lt;p&gt;Τα δεδομένα για το υπόβαθρο του χάρτη προέρχονται από την ιστοσελίδα
&lt;a href="http://www.naturalearthdata.com/"&gt;Natural Earth&lt;/a&gt; ενώ τα
δεδομένα με τα επίκεντρα των σεισμών προέρχονται από το &lt;a href="http://earthquake.usgs.gov/"&gt;United States Geological Survey&lt;/a&gt;
(USGS).&lt;/p&gt;
&lt;p&gt;Διαλέξαμε το &lt;a href="http://earthquake.usgs.gov/earthquakes/catalogs/eqs7day-M2.5.tx"&gt;αρχείο&lt;/a&gt;
που περιλαμβάνει τους σεισμούς των τελευταίων 7 ημερών μεγέθους άνω των
2,5 Richter.&lt;/p&gt;
&lt;p&gt;Σκοπός του σεναρίου (script) είναι:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Να κατεβάσει από το διαδίκτυο τα απαραίτητα δεδομένα σε μορφή
CSV.&lt;/li&gt;
&lt;li&gt;Να μετατρέψει το αρχείο CSV σε Shapefile με την βιβλιοθήκη ogr.&lt;/li&gt;
&lt;li&gt;Να παράγει τον τελικό χάρτη που θα συνδυάζει το γεωφυσικό υπόβαθρο
με τα επικεντρα των σεισμών με βοήθεια της βιβλιοθήκης Mapnik.&lt;/li&gt;
&lt;li&gt;Να φορτώσει τον χάρτη σε μορφή PNG στην τρέχουσα ιστοσελίδα.&lt;/li&gt;
&lt;li&gt;Να εκτελείται επαναλαμβανόμενα σε καθημερινή βάση ώστε ο χάρτης να
ανεβαίνει ενημερωμένος στην σελίδα.&lt;/li&gt;
&lt;li&gt;Το σενάριο συντάχθηκε με την Python στο λειτουργικό σύστημα Ubuntu
Linux 11.04 (Natty Narwhal).&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Το σενάριο:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;# -*- coding: utf-8 -*-
#!/usr/bin/python
 
#Εισάγουμε τις απαραίτητες βιβλιοθήκες
import os,  urllib, mapnik,  Image,  csv,  ftplib,  datetime
from osgeo import ogr
from osgeo import osr
from StringIO import StringIO
 
import PIL
from PIL import ImageFont
from PIL import Image
from PIL import ImageDraw
 
#Κατεβάζουμε τα απαραίτητα δεδομένα σε csv μορφή
print "Downloading data file..."
now = datetime.datetime.now()
url ='http://earthquake.usgs.gov/earthquakes/catalogs/eqs7day-M2.5.txt'
file = 'earthquakes.txt'
urllib.urlretrieve( url,file)
 
#Δημιουργία του shapefile
outShapeFile = 'earthquakes.shp'
drv = ogr.GetDriverByName('ESRI Shapefile')
 
if os.path.exists(str(outShapeFile)):
drv.DeleteDataSource(str(outShapeFile))
print "Deleting shapefile that already exists: " + outShapeFile
 
# Δημιουργία SpatialReference
t_srs = osr.SpatialReference()
t_srs.SetFromUserInput('WGS84')
 
ds = drv.CreateDataSource(outShapeFile)
print "Creating shapefile: " + outShapeFile
layer = ds.CreateLayer(ds.GetName(), geom_type = ogr.wkbPoint, srs = t_srs)
 
#Τα πεδία με το όνομα τους και τις ιδιότητές τους
fields=[['Src',  ogr.OFTString, 5],
['Eqid',  ogr.OFTString , 15],
['Version',  ogr.OFTInteger] ,
['Datetime',  ogr.OFTString, 255] ,
['Lat',  ogr.OFTReal],
['Lon',  ogr.OFTReal],
['Magnitude',  ogr.OFTReal],
['Depth',  ogr.OFTReal],
['NST',  ogr.OFTReal],
['Region',  ogr.OFTString, 100]
]
 
#Δημιουργία πεδίων
for field in fields:
fieldname=field[0]
fieldproperty=field[1]
print "Creating Field "  + fieldname
ofield  = ogr.FieldDefn(fieldname, fieldproperty)
if fieldproperty ==4:#Ειδικό property αν είναι string
fieldlen=field[2]
ofield.SetWidth(fieldlen)
layer.CreateField(ofield)
 
print "Creating geometry object..."
geom = ogr.Geometry(type=ogr.wkbPoint)
 
# αρχικοποίηση μιας απαραίτητης μεταβλητής
Line = ""
 
#Ανάγνωση αρχείου csv
f=open(str('earthquakes.txt'), 'r')
f.readline()
while Line.isalnum:
Line = f.readline()
if not Line: break
data = StringIO(Line)
reader = csv.reader(data, delimiter=',')
for row in reader:
geom.AddPoint(float(row[5]),float(row[4]))#Προσθήκη ενός σημείου
feat = ogr.Feature(feature_def=layer.GetLayerDefn())
print "Importing shape into feature."
feat.SetGeometry(geom)
#Προσθήκη δεδομένων στο feature
print "Importing attributes into feature."
feat.SetField('Src',row[0] )
feat.SetField('Eqid',row[1] )
feat.SetField('Version',row[2] )
feat.SetField('Datetime',row[3] )
feat.SetField('Lat',row[4] )
feat.SetField('Lon',row[5] )
feat.SetField('Magnitude',row[6] )
feat.SetField('Depth',row[7] )
feat.SetField('NST',row[8] )
feat.SetField('Region',row[9] )
layer.CreateFeature(feat)
 
#Διαγραφή objects
feat.Destroy()
ds.Destroy()
 
#Δημιουργία του χάρτη με το mapnik
 
mapfile = 'world_styles.xml' #απαραίτητο xml με τις πηγές των αρχείων και διάφορες ιδιότητές τους
map_output = 'earthquakes.png'
m = mapnik.Map(1024, 550)
mapnik.load_map(m, mapfile)
bbox = mapnik.Envelope(mapnik.Coord(-180.0, -90.0), mapnik.Coord(180.0, 90.0))
m.zoom_to_box(bbox)
mapnik.render_to_file(m, map_output,  "png") #εξαγωγή σε png
 
#Αναγραφή της ημερομηνίας ενημέρωσης του χάρτη.
font = ImageFont.truetype("/usr/share/fonts/truetype/ttf-dejavu/DejaVuSansCondensed.ttf",12)
infile = "earthquakes.png"
img=Image.open(infile)
draw = ImageDraw.Draw(img)
 
curdate= now.strftime("%d-%m-%Y %H:%M")
draw.text((10, 0),u"Τελευταία ενημέρωση:" + curdate + ", by geographer.gr",(0, 0,0),font=font)
draw = ImageDraw.Draw(img)
img.save("earthquakes.png")
 
#Δημιουργία thumbnail
print "Generate the thumbnail"
thumbfile="earthquakes_404x196_a0da98766e696ec356a29088bc2d8e16.jpg"
image = Image.open(map_output)
image = image.resize((500, 250), Image.ANTIALIAS)
image.save(thumbfile)
 
#Ανέβασμα των χαρτών με ftp στους απαραίτητους φακέλους στο geographer.gr
print "Upload data on geographer.gr"
ftp = ftplib.FTP("geographer.gr")
print ftp.login("myusername", "mypass")
print ftp.cwd('/public_html/images/stories/earthquakes')
print ftp.storbinary("STOR " + map_output, open(map_output, "rb"))
 
print ftp.cwd('/public_html/plugins/content/fboxbot/thumbs')
print ftp.storbinary("STOR " + thumbfile, open(thumbfile, "rb"))
print 'Closing FTP connection'
print ftp.close()
 
print "Job done!"
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Όπως φαίνεται παραπάνω το mapnik χρησιμοποιεί για την δημιουργία του
χάρτη ένα αρχείο xml όπου περιέχει την προέλευση των αρχείων των
δεδομένων και διάφορες ιδιότητες τους όπως το γεωγραφικό σύστημα
αναφορά, σύμβολα και κλάσεις. Το περιεχόμενο του αρχείου δίδεται
παρακάτω:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;&amp;lt;?xml version="1.0" encoding="utf-8"?&amp;gt;
&amp;lt;Map srs="+init=epsg:4326" bgcolor="rgb(255,255,255)"&amp;gt;
&amp;lt;Style name="NE2_50M_SR_W_style"&amp;gt;
&amp;lt;Rule&amp;gt;
&amp;lt;RasterSymbolizer&amp;gt;
&amp;lt;CssParameter name="scaling"&amp;gt;bilinear&amp;lt;/CssParameter&amp;gt;
&amp;lt;/RasterSymbolizer&amp;gt;
&amp;lt;/Rule&amp;gt;
&amp;lt;/Style&amp;gt;
 
&amp;lt;Style name="earthquakes_style"&amp;gt;
&amp;lt;Rule&amp;gt;
&amp;lt;Filter&amp;gt;(([Magnitude]&amp;amp;amp;gt;=2.5) and ([Magnitude]&amp;amp;amp;lt;=3.5))&amp;lt;/Filter&amp;gt;
&amp;lt;PointSymbolizer allow_overlap="yes" file="symbols/sym_0.png" type="png" width="7" height="7" opacity="1"&amp;gt;&amp;lt;/PointSymbolizer&amp;gt;
&amp;lt;/Rule&amp;gt;
&amp;lt;Rule&amp;gt;
&amp;lt;Filter&amp;gt;(([Magnitude]&amp;amp;amp;gt;3.5) and ([Magnitude]&amp;amp;amp;lt;=4.5))&amp;lt;/Filter&amp;gt;
&amp;lt;PointSymbolizer allow_overlap="yes" file="symbols/sym_1.png" type="png" width="9" height="9" opacity="1"&amp;gt;&amp;lt;/PointSymbolizer&amp;gt;
&amp;lt;/Rule&amp;gt;
&amp;lt;Rule&amp;gt;
&amp;lt;Filter&amp;gt;(([Magnitude]&amp;amp;amp;gt;4.5) and ([Magnitude]&amp;amp;amp;lt;=5))&amp;lt;/Filter&amp;gt;
&amp;lt;PointSymbolizer allow_overlap="yes" file="symbols/sym_2.png" type="png" width="13" height="13" opacity="1"&amp;gt;&amp;lt;/PointSymbolizer&amp;gt;
&amp;lt;/Rule&amp;gt;
&amp;lt;Rule&amp;gt;
&amp;lt;Filter&amp;gt;(([Magnitude]&amp;amp;amp;gt;5) and ([Magnitude]&amp;amp;amp;lt;=5.5))&amp;lt;/Filter&amp;gt;
&amp;lt;PointSymbolizer allow_overlap="yes" file="symbols/sym_3.png" type="png" width="15" height="15" opacity="1"&amp;gt;&amp;lt;/PointSymbolizer&amp;gt;
&amp;lt;/Rule&amp;gt;
&amp;lt;Rule&amp;gt;
&amp;lt;Filter&amp;gt;(([Magnitude]&amp;amp;amp;gt;5.5) and ([Magnitude]&amp;amp;amp;lt;=6.2))&amp;lt;/Filter&amp;gt;
&amp;lt;PointSymbolizer allow_overlap="yes" file="symbols/sym_4.png" type="png" width="21" height="21" opacity="1"&amp;gt;&amp;lt;/PointSymbolizer&amp;gt;
&amp;lt;/Rule&amp;gt;
&amp;lt;/Style&amp;gt;
 
&amp;lt;Layer name="HYP_50M_SR_W" srs="+init=epsg:4326"&amp;gt;
&amp;lt;StyleName&amp;gt;NE2_50M_SR_W_style&amp;lt;/StyleName&amp;gt;
&amp;lt;Datasource&amp;gt;
&amp;lt;Parameter name="file"&amp;gt;NE2_50M_SR_W/NE2_50M_SR_W.tif&amp;lt;/Parameter&amp;gt;
&amp;lt;Parameter name="type"&amp;gt;gdal&amp;lt;/Parameter&amp;gt;
&amp;lt;/Datasource&amp;gt;
&amp;lt;/Layer&amp;gt;
&amp;lt;Layer name="earthquakes" srs="+init=epsg:4326"&amp;gt;
&amp;lt;StyleName&amp;gt;earthquakes_style&amp;lt;/StyleName&amp;gt;
&amp;lt;Datasource&amp;gt;
&amp;lt;Parameter name="file"&amp;gt;earthquakes.shp&amp;lt;/Parameter&amp;gt;
&amp;lt;Parameter name="type"&amp;gt;shape&amp;lt;/Parameter&amp;gt;
&amp;lt;/Datasource&amp;gt;
&amp;lt;/Layer&amp;gt;
 
&amp;lt;/Map&amp;gt;
 
&amp;lt;!-- nik2img.py mapnik.xml out.png -d 1017 308 -e -302.42451763 -76.2454581721 301.57881763 105.848158172 --&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src="https://geographer.gr/images/earthquakes.png"/&gt;&lt;/p&gt;
&lt;p&gt;Για την καθημερινή επαναλαμβανόμενη εκτέλεση του σεναρίου (π.χ. στις
8:50 κάθε πρωί) χρησιμοποιούμε την υπηρεσία &lt;a href="https://en.wikipedia.org/wiki/Cron"&gt;cron&lt;/a&gt; του linux, όπου
εισάγουμε την παρακάτω εγγραφή στο αρχείο &lt;a href="https://web.archive.org/web/20230205213835/http://crontab.org/"&gt;crontab&lt;/a&gt;:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;50 8 * * * cd ~/GIS/earthquakes;/usr/bin/python&lt;/code&gt;&lt;/pre&gt;</content><category term="GIS"></category><category term="mapnik"></category><category term="ogr"></category><category term="python"></category><category term="σεισμοί"></category></entry><entry><title>Μετατροπή συντεταγμένων από το ED50, ETRS89 - ETRS-LAEA , WGS84 στο ΕΓΣΑ87</title><link href="https://geographer.gr/metatrope-suntetagmenon-apo-to-ed50-etrs89-etrs-laea-wgs84-sto-egsa87/" rel="alternate"></link><published>2012-01-28T00:10:00+02:00</published><updated>2012-01-28T00:10:00+02:00</updated><author><name>Leonidas Liakos</name></author><id>tag:geographer.gr,2012-01-28:/metatrope-suntetagmenon-apo-to-ed50-etrs89-etrs-laea-wgs84-sto-egsa87/</id><summary type="html">&lt;p&gt;&lt;img src="https://geographer.gr/images/gdal-logo.png"/&gt;&lt;/p&gt;
&lt;p&gt;Πολλά από τα δεδομένα, παγκόσμιας ή ευρωπαϊκής κλίμακας, που
χρησιμοποιούνται στις εφαρμογές ΣΓΠ στην Ελλάδα απαιτούν μετατροπή του
γεωδαιτικού συστήματος αναφοράς (ΓΣΑ) στο &lt;a href="https://el.wikipedia.org/wiki/%CE%95%CE%BB%CE%BB%CE%B7%CE%BD%CE%B9%CE%BA%CF%8C_%CE%93%CE%B5%CF%89%CE%B4%CE%B1%CE%B9%CF%84%CE%B9%CE%BA%CF%8C_%CE%A3%CF%8D%CF%83%CF%84%CE%B7%CE%BC%CE%B1_%CE%91%CE%BD%CE%B1%CF%86%CE%BF%CF%81%CE%AC%CF%82_1987"&gt;ΕΓΣΑ
’87&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Στο παρόν άρθρο προτείνονται τρόποι μετατροπής συντεταγμένων προς το
ΕΓΣΑ’87 με βιβλιοθήκες ΕΛ/ΛΑΚ. Για την μετατροπή συντεταγμένων
χρησιμοποιούνται οι βιβλιοθήκες &lt;a href="http://proj.maptools.org/man_cs2cs.html"&gt;cs2cs&lt;/a&gt;, &lt;a href="http://www.gdal.org/ogr2ogr.html"&gt;ogr2ogr&lt;/a&gt; και …&lt;/p&gt;</summary><content type="html">&lt;p&gt;&lt;img src="https://geographer.gr/images/gdal-logo.png"/&gt;&lt;/p&gt;
&lt;p&gt;Πολλά από τα δεδομένα, παγκόσμιας ή ευρωπαϊκής κλίμακας, που
χρησιμοποιούνται στις εφαρμογές ΣΓΠ στην Ελλάδα απαιτούν μετατροπή του
γεωδαιτικού συστήματος αναφοράς (ΓΣΑ) στο &lt;a href="https://el.wikipedia.org/wiki/%CE%95%CE%BB%CE%BB%CE%B7%CE%BD%CE%B9%CE%BA%CF%8C_%CE%93%CE%B5%CF%89%CE%B4%CE%B1%CE%B9%CF%84%CE%B9%CE%BA%CF%8C_%CE%A3%CF%8D%CF%83%CF%84%CE%B7%CE%BC%CE%B1_%CE%91%CE%BD%CE%B1%CF%86%CE%BF%CF%81%CE%AC%CF%82_1987"&gt;ΕΓΣΑ
’87&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Στο παρόν άρθρο προτείνονται τρόποι μετατροπής συντεταγμένων προς το
ΕΓΣΑ’87 με βιβλιοθήκες ΕΛ/ΛΑΚ. Για την μετατροπή συντεταγμένων
χρησιμοποιούνται οι βιβλιοθήκες &lt;a href="http://proj.maptools.org/man_cs2cs.html"&gt;cs2cs&lt;/a&gt;, &lt;a href="http://www.gdal.org/ogr2ogr.html"&gt;ogr2ogr&lt;/a&gt; και &lt;a href="http://www.gdal.org/gdalwarp.html"&gt;gdalwarp&lt;/a&gt; ανάλογα με τον
τύπο των δεδομένων.&lt;/p&gt;
&lt;p&gt;Η πρώτη χρησιμοποιείται για την μετατροπή ενός ή παραπάνω ζευγών
συντεταγμένων, η δεύτερη για μετατροπή διανυσματικών δεδομένων
(π.χ.shapefiles) και η τρίτη για ψηφιδωτά αρχεία (π.χ. αρχεία tiff). Για
περισσότερες πληροφορίες σχετικά με τον τρόπο σύνταξης και τις διάφορες
παραμέτρους ο χρήστης μπορεί να ανατρέξει στα αρχεία τεκμηρίωσης της
κάθε βιβλιοθήκης.&lt;/p&gt;
&lt;p&gt;Σημαντικό σε κάθε περίπτωση είναι να γνωρίζει ο χρήστης πως ορίζεται
το ΓΣΑ προέλευσης και προορισμού. Για τον ορισμό του ΓΣΑ υπάρχουν
διάφορες μορφές καθώς και διαφορετική μορφή για την μετατροπή ανάλογα με
την βιβλιοθήκη που καλείται.&lt;/p&gt;
&lt;p&gt;Ένα ΓΣΑ μπορεί να οριστεί/κληθεί είτε μέσω του κωδικού &lt;a href="http://www.epsg-registry.org/"&gt;EPSG&lt;/a&gt;, είτε μέσω μιάς πρότασης
&lt;a href="https://trac.osgeo.org/proj/wiki/GenParms"&gt;παραμέτρων
Proj4&lt;/a&gt;. Σε κάθε περίπτωση είναι αναγκαίο να είναι εγκατεστημένη η
βιβλιοθήκη &lt;a href="https://trac.osgeo.org/proj/"&gt;proj4&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Για παράδειγμα το ΕΓΣΑ’87 μπορεί να κληθεί/οριστεί με τους εξής
τρόπους:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;"EPSG:2100"
"+init=epsg:2100"
"+proj=tmerc +lat_0=0 +lon_0=24 +k=0.9996 +x_0=500000 +y_0=0 +ellps=GRS80 +towgs84=-199.87,74.79,246.62,0,0,0,0 +units=m +no_defs"&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Οι κωδικοί EPSG αλλά και οι ορισμοί σε μορφή Proj4 που αφορούν τα ΓΣΑ
είναι διαθέσιμοι στο &lt;a class="uri" href="https://spatialreference.org/"&gt;https://spatialreference.org/&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Δείτε περισσότερα ανα ΓΣΑ: &lt;a href="http://spatialreference.org/ref/epsg/4230/"&gt;ED50&lt;/a&gt;, &lt;a href="http://spatialreference.org/ref/epsg/3035/"&gt;ETRS89/ETRS-LAEA&lt;/a&gt; ,
&lt;a href="http://spatialreference.org/ref/epsg/4326/"&gt;WGS84&lt;/a&gt;, &lt;a href="http://spatialreference.org/ref/epsg/2100/"&gt;ΕΓΣΑ ’87&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Προς το παρόν θα επικεντρωθώ στην παρουσίαση 3 παραδειγμάτων:&lt;/p&gt;
&lt;p&gt;Για την μετατροπή ενός ζεύγους συντεταγμένων (π.χ.
20&lt;sup&gt;ο&lt;/sup&gt;,40&lt;sup&gt;ο&lt;/sup&gt;) από το ED50 στο ΕΓΣΑ’87 εκτελούμε την
εντολή:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;echo 20 40|cs2cs +init=epsg:4230 +towgs84=-86,-92.2,-127.5  +to +init=epsg:2100&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Αν θέλουμε να μετατρέψουμε ένα πλήθος συντεταγμένων αποθηκευμένες σε
ένα αρχείο (coords.txt):&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;cat coords.txt|cs2cs +init=epsg:4230 +towgs84=-86,-92.2,-127.5  +to +init=epsg:2100&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Προσοχή στο datum shift &lt;code&gt;+towgs84=-86,-92.2,-127.5&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;Για την μετατροπή ενός αρχείου shapefile από το ETRS89/ETRS-LAEA στο
ΕΓΣΑ’87 εκτελούμε την εντολή:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;ogr2ogr -s_srs EPSG:3035 -t_srs EPSG:2100 outfile.shp infile.shp&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;όπου&lt;/p&gt;
&lt;p&gt;&lt;code&gt;-s_srs EPSG:3035&lt;/code&gt;, το ΓΣΑ του αρχείου προέλευσης (στην
περίπτωσή μας ορίζεται μέσω EPSG:3035 που είναι ο σχετικός κωδικός EPSG
για το ETRS89/ETRS-LAEA)&lt;/p&gt;
&lt;p&gt;&lt;code&gt;-t_srs EPSG:2100&lt;/code&gt;, το ΓΣΑ του αρχείου προορισμού (στην
περίπτωσή μας ορίζεται μέσω EPSG:2100 που είναι ο σχετικός κωδικός EPSG
για το ΕΓΣΑ’87)&lt;/p&gt;
&lt;p&gt;&lt;code&gt;outfile.shp&lt;/code&gt;, το shapefile προορισμού σε ΕΓΣΑ’87&lt;/p&gt;
&lt;p&gt;&lt;code&gt;infile.shp&lt;/code&gt;, το shapefile προέλευσης σε
ETRS89/ETRS-LAEA&lt;/p&gt;
&lt;p&gt;Για την μετατροπή ενός αρχείου tiff από το WGS84 στο ΕΓΣΑ’87
εκτελούμε την εντολή:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;gdalwarp -s_srs EPSG:4326 -t_srs EPSG:2100 infile.tif outfile.tif&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;όπου&lt;/p&gt;
&lt;p&gt;&lt;code&gt;-s_srs EPSG:4326&lt;/code&gt;, το ΓΣΑ του αρχείου προέλευσης (στην
περίπτωσή μας ορίζεται μέσω EPSG:4326 που είναι ο σχετικός κωδικός EPSG
για το WGS84)&lt;/p&gt;
&lt;p&gt;&lt;code&gt;-t_srs EPSG:2100&lt;/code&gt;, το ΓΣΑ του αρχείου προορισμού (στην
περίπτωσή μας ορίζεται μέσω EPSG:2100 που είναι ο σχετικός κωδικός EPSG
για το ΕΓΣΑ87)&lt;/p&gt;
&lt;p&gt;&lt;code&gt;outfile.tif&lt;/code&gt;, το tiff αρχείο προορισμού σε ΕΓΣΑ87&lt;/p&gt;
&lt;p&gt;&lt;code&gt;infile.tif&lt;/code&gt;, το tiff αρχείο προέλευσης σε WGS84&lt;/p&gt;</content><category term="GIS"></category><category term="cs2cs"></category><category term="ED50"></category><category term="ETRS89 ETRS LAEA"></category><category term="gdalwrap"></category><category term="Greek Grid"></category><category term="ogr2ogr"></category><category term="WGS84"></category><category term="ΕΓΣΑ87"></category></entry><entry><title>Python, διανυσματικά δεδομένα και η βιβλιοθήκη ogr</title><link href="https://geographer.gr/python-dianusmatika-dedomena-kai-e-bibliotheke-ogr/" rel="alternate"></link><published>2011-06-22T00:10:00+03:00</published><updated>2011-06-22T00:10:00+03:00</updated><author><name>Leonidas Liakos</name></author><id>tag:geographer.gr,2011-06-22:/python-dianusmatika-dedomena-kai-e-bibliotheke-ogr/</id><summary type="html">&lt;p&gt;&lt;img src="https://geographer.gr/images/extent1.png"/&gt;&lt;/p&gt;
&lt;p&gt;Λιάκος Λ., 2011, Python, διανυσματικά δεδομένα και η βιβλιοθήκη ogr,
1η Συνάντηση Ελλήνων Χρηστών GRASS and GFOSS, HellasGI, ΕΛ/ΛΑΚ,
ΤΜΧΠΑ-Πανεπιστήμιο Θεσσαλίας,ΤΕΙ Σερρών, ελληνικό παράρτημα του OSGeo,
Αργαλαστή Πηλίου, 17-19/6/2011&lt;/p&gt;
&lt;p&gt;Περιγραφή παρουσίασης:&lt;/p&gt;
&lt;p&gt;Tο τρέχον εκπαιδευτικό βοήθημα έχει σαν στόχο να εξοικειωθούν οι
ενδιαφερόμενοι με ένα εναλλακτικό μοντέλο …&lt;/p&gt;</summary><content type="html">&lt;p&gt;&lt;img src="https://geographer.gr/images/extent1.png"/&gt;&lt;/p&gt;
&lt;p&gt;Λιάκος Λ., 2011, Python, διανυσματικά δεδομένα και η βιβλιοθήκη ogr,
1η Συνάντηση Ελλήνων Χρηστών GRASS and GFOSS, HellasGI, ΕΛ/ΛΑΚ,
ΤΜΧΠΑ-Πανεπιστήμιο Θεσσαλίας,ΤΕΙ Σερρών, ελληνικό παράρτημα του OSGeo,
Αργαλαστή Πηλίου, 17-19/6/2011&lt;/p&gt;
&lt;p&gt;Περιγραφή παρουσίασης:&lt;/p&gt;
&lt;p&gt;Tο τρέχον εκπαιδευτικό βοήθημα έχει σαν στόχο να εξοικειωθούν οι
ενδιαφερόμενοι με ένα εναλλακτικό μοντέλο προγραμματισμού όσον αφορά την
προσπέλαση και επεξεργασία γεωχωρικών δεδομένων. Εναλλακτικό γιατί
στηρίζεται στις δυναμικές και συνεχώς εξελισσόμενες, αλλά πολλές φορές
παρεξηγημένες και απρόσιτες για τον κοινό χρήστη, τεχνολογίες του
ελεύθερου και ανοικτού λογισμικού. Για τον προγραμματισμό του εν λόγω
βοηθήματος επελέγει η διερμηνευόμενη και αντικειμενοστραφής γλώσσα
Python καθώς ο διερμηνευτής της είναι διαθέσιμος σε διάφορα λειτουργικά
συστήματα αλλά και για την ευκολία και απλότητα της σύνταξή της. Σε
συνάρτηση με την γλώσσα προγραμματισμού λειτουργούν και οι σχετικές
βιβλιοθήκες για την προσπέλαση των γεωχωρικών δεδομένων.&lt;/p&gt;
&lt;p&gt;Η βιβλιοθήκη gdal χρησιμοποιείται για την προσπέλαση ψηφιδωτών
γεωχωρικών δεδομένων και η βιβλιοθήκη ogr για την προσπέλαση
διανυσματικών δεδομένων. Το βοήθημα επικεντρώνεται στην ανάγνωση και
εγγραφή διανυσματικών δεδομένων, την δημιουργία γεωμετριών και τον
χειρισμό και μετατροπή προβολικών συστημάτων, το φιλτράρισμα και την
παρουσίαση των λειτουργιών ανάλυσης που παρέχει η βιβλιοθήκη ogr. Για
την παρακολούθηση των διαδικασιών του βοηθήματος θεωρείται απαραίτητη η
γνώση βασικών αρχών προγραμματισμού και η σύνταξη στην γλώσσα Python. Τα
παραδείγματα που θα παρουσιαστούν εκτελούνται σε περιβάλλον Linux ωστόσο
οι χρήστες Windows με την εγκατάσταση του απαραίτητου λογισμικού μπορούν
με ευκολία να ακολουθήσουν.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;#!/usr/bin/python
# -*- coding: utf-8 -*-
 
#http://www.gdal.org/ogr/ogr_arch.html
#Για help από το documentation του Python binding: pydoc -g osgeo
 
#********************** - ΕΙΣΑΓΩΓΗ ΑΠΑΡΑΙΤΗΤΩΝ ΒΙΒΛΙΟΘΗΚΩΝ - ********************** 
import sys, os
 
# Εισάγουμε την βιβλιοθήκη για πρόσβαση στα διανυσματικά δεδομένα (ogr) και 
#την βιβλιοθήκη  για την διαχείριση των προβολικών συστημάτων αναφοράς (osr)
try:
    #Σε περίπτωση που χρησιμοποιούμε κάποια διανομή OSGeo
    from osgeo import ogr , osr    
except:
    #Σε περίπτωση που χρησιμοποιούμε FWTools
    import ogr,  osr
 
# ********************** - ΑΝΑΓΝΩΣΗ ΔΙΑΝΥΣΜΑΤΙΚΩΝ ΔΕΔΟΜΕΝΩΝ - **********************************
#*************************************************************************************************************
 
#Ορίζουμε τη διαδρομή για τον τρέχοντα κατάλογο εργασίας και ονόμα αρχείου shapefile
scriptdir= os.path.dirname( os.path.realpath( __file__ ) )# η διαδρομή του φακέλου που βρίσκεται το τρέχον αρχείο
os.chdir(scriptdir+os.sep+'shps')#αλλαγή του τρέχοντος καταλόγου εργασίας
 
shapefile= 'oikismoi.shp'
 
# O driver είναι ένα αντικείμενο που μας βοηθά να αλληλεπιδρούμε (διαβάζουμε - γράφουμε) με έναν τύπο αρχείου
#http://www.gdal.org/ogr/ogr_formats.html
driver =  ogr.GetDriverByName('ESRI Shapefile') # Το όνομα παρέχεται από το documentation
 
# Με την μέθοδο Open() του driver επιστρεφεται ένα αντικείμενο datasource
dataSource = driver.Open(shapefile,  0) #0=readonly, 1=write
 
if dataSource is None: # Αν δεν υπάρχει τιμή στην dataSource
    print u'Η πηγή δεδομένων δεν αναγνώστηκε:' ,   shapefile
    sys.exit(1) #έξοδος με έναν κωδικό σφάλματος
 
layer = dataSource.GetLayer() 
#1.μπορούμε να χρησιμοποιήσουμε και index π.χ dataSource.GetLayer(1) αλλά για τα shapefiles είναι 0
#2.ή να περάσουμε το όνομα σαν string (π.χ. 'oikismoi')
print u'Το όνομα του layer:' , layer.GetName()
 
#Ο αριθμός των features στο layer
numFeatures = layer.GetFeatureCount()
print u'Αριθμός Features :', numFeatures
 
# επιστρέφει τα ακραία σημεία του layer
extent = layer.GetExtent() 
print u'Ακραία σημεία:', extent
 
# εφόσον γνωρίζουμε το FID ενος feature μπορούμε να το πάρουμε σαν αντικείμενο
feature = layer.GetFeature(2) #FID=2
 
CODE_OIK = feature.GetField('CODE_OIK') #GetField(&amp;amp;lt;όνομα πεδίου&amp;amp;gt;) μία μέθοδος του feature που μας επιστρέφει την τιμή του πεδίου 
#fields= layer.GetLayerDefn().GetFieldCount() # παίρνουμε τον αριθμό των πεδίων σε ένα layer
 
NAME_OIK = feature.GetField('NAME_OIK')
# Παραλλαγή:
#GetFieldAsString(&amp;amp;lt;όνομα πεδίου&amp;amp;gt;) και GetFieldAsInteger(&amp;amp;lt;όνομα πεδίου&amp;amp;gt;)
print u'CODE_OIK για το feature με id = 2:',  CODE_OIK
NAME_OIK = NAME_OIK.decode('iso-8859-7')
print u'NAME_OIK για το feature με id = 2:',  NAME_OIK
 
#μπορούμε να βάλουμε όλα τα features του layer σε έναν βρόγχο
feature = layer.GetNextFeature() # επιστρέφει το πρώτο Feature στην σειρά και κάθε φορά που το καλούμε πηγαίνει στο επόμενο
while feature:
    CODE_OIK = feature.GetField('CODE_OIK')
    print 'FID:%s,CODE_OIK:%s' % (feature.GetFID(), CODE_OIK)
    feature = layer.GetNextFeature()
 
layer.ResetReading() #επιστρέφει την ανάγνωση των features στην αρχή της λίστας των features
 
# ας ξανα πάμε στο πρώτο Feature
feature = layer.GetNextFeature() 
#ας πάρουμε την γεωμετρία του
geometry = feature.GetGeometryRef() #GetGeometryRef() μία μέθοδος του feature που επιστρέφει την γεωμετρία σαν αντικείμενο 
print "Geometry name: ", geometry.GetGeometryName() # as WKT
#Ειδικά τα σημειακά layers έχουν μια μέθοδο στο αντικείμενο της γεωμετρίας που τους επιστρέφει το X και το Y
x = geometry.GetX()
y = geometry.GetY()
print "X Y:",  x,  y
 
#********************************** - Φίλτρα στα περιγραφικά δεδομένα - **********************************
#************************************************************************************************************
# 1: .SetAttributeFilter
# 2: .ExecuteSQL
 
# ------1: layer.SetAttributeFilter
allFeatures = layer.GetFeatureCount()
print u'Όλα τα Features :', allFeatures
 
layer.SetAttributeFilter("CODE_NOM = '32'") # με την μέθοδο SetAttributeFilter ορίζουμε τα κριτήρια ενός φίλτρου π.χ. εδώ ζητήσαμε από τους οικισμούς να μας φέρει αυτούς που έχουν ("CODE_NOM = '32'") 
thesprotia = layer.GetFeatureCount() # πλέον η μέθοδος GetFeatureCount() του layer μας επιστρέφει μόνο τα Features με CODE_NOM = '32'
print u'Tα Features της Θεσπρωτίας :', thesprotia
 
feature = layer.GetNextFeature() # επιστρέφει το πρώτο Feature στην σειρά από την λίστα των φιλτραρισμένων και κάθε φορά που το καλούμε πηγαίνει στο επόμενο
 
layer.SetAttributeFilter(None) # κάνουμε reset του φίλτρου
 
# -------2: dataSource.ExecuteSQL
#Μπορούμε να κάνουμε και πιο προχωρημένα ερωτήματα με ExecuteSQL() στο datasource αντικείμενο
#http://www.gdal.org/ogr/ogr_sql.html
resultlayer = dataSource.ExecuteSQL("SELECT * from oikismoi  WHERE OBJECTID &amp;amp;gt; 13000 ORDER BY CODE_OIK DESC")
sqlFeatures = resultlayer.GetFeatureCount() # πλέον η μέθοδος GetFeatureCount() του layer μας επιστρέφει μόνο τα Features με CODE_NOM = '32'
print u'Tα Features με OBJECTID &amp;amp;gt; 13000 :', sqlFeatures
dataSource.ReleaseResultSet(resultlayer)# κάνουμε reset του φίλτρου
 
#********************************** - Φίλτρα στα χωρικά δεδομένα - **********************************
#************************************************************************************************************
 
#1.  .SetSpatialFilter()
#2.  .SetSpatialFilterRect(, ,, )
 
#Eπιλέγουμε το πολύγωνο της Θεσπρωτίας από τους νομούς για να το χρησιμοποιήσουμε σαν παράμετρο στο SetSpatialFilter
nomoishp= 'nomoi_okxe.shp'
dataSource2 = driver.Open(nomoishp,  0) #0=readonly, 1=write
layer2= dataSource2.GetLayer()
feature52 = layer2.GetFeature(52) #52 το fid του Ν. Θεσπρωτίας
polyThesprotia = feature52.GetGeometryRef()# πήραμε το γεωμετρικό αντικείμενο του feature52 (του Ν. Θεσπρωτίας)
 
#1.  .SetSpatialFilter()
layer.SetSpatialFilter(polyThesprotia) 
oikismoiThesprotias = layer.GetFeatureCount()
print u'Οι οικισμοί της Θεσπρωτίας από χωρικό φίλτρο :', oikismoiThesprotias
layer.SetSpatialFilter(None) # κάνουμε reset του φίλτρου
 
#SLIDE 9
 
#2. .SetSpatialFilterRect(, ,, )
layer.SetSpatialFilterRect(170000, 4270000,300000, 4500000)
numfromRect = layer.GetFeatureCount()
print u'Αριθμός από χωρικό φίλτρο :', numfromRect
 
#SLIDE 10
 
layer.SetSpatialFilter(None) # κάνουμε reset του φίλτρου
 
AllFeatures = layer.GetFeatureCount()
print u'Όλα τα Features ξανά :', AllFeatures
 
#************************************* - Simple analysis - Geoprocessing ***************************************************
#************************************************************************************************************
 
#Είναι μέθοδοι του geometry object όπου  επιστρέφουν boolean ή geometry objects ή αριθμός
#http://www.gdal.org/ogr/classOGRGeometry.html
#Within, Overlaps, Contains, Convexhull, Buffer, Union, Difference κ.α.
 
# Μερικά απαράιτητα δεδομένα:
 
# Η Παραμυθιά Θεσπρωτίας (point)
featParamythia= layer.GetFeature(3005) #feature object
ptParamythia= featParamythia.GetGeometryRef()#geometry object
print ptParamythia #σαν WKT
 
# Η Αργαλαστή (point)
featArgalasti= layer.GetFeature(11651) 
ptArgalasti = featArgalasti.GetGeometryRef()
print ptArgalasti
 
#Ποιά η  απόσταση από Παραμυθιά σε Αργαλαστή;
dist = ptParamythia.Distance(ptArgalasti) 
print u'Απόσταση Παραμυθιά-Αργαλαστή σε χλμ.:', dist/1000
 
#buffer 1000μ. για την Παραμυθιά
ptBuffer = ptParamythia.Buffer(1000) # geometry object
print ptBuffer #polygon
 
# Η Θεσπρωτία περιέχει την Παραμυθιά;
print polyThesprotia.Contains(ptParamythia)
 
# Η Παραμυθιά περιέχεται στην Θεσπρωτία;
print ptParamythia.Within(polyThesprotia)
 
#Το κεντροειδές της Θεσπρωτίας
centroid_obj = polyThesprotia.Centroid()
print  u'Το κεντροειδές της Θεσπρωτίας σαν WKT:' , centroid_obj
centroid = ogr.CreateGeometryFromWkt(str(centroid_obj))#Δημιουργία geometry object (σημείου) από  WKT
x = centroid.GetX()
y = centroid.GetY()
print u'Το κεντροειδές της Θεσπρωτίας: ',  x,  y
 
# Η γεωγραφική έκταση της Θεσπρωτίας (minx,maxx, miny, maxy):
print u'minx,maxx, miny, maxy για την Θεσπρωτία:', polyThesprotia.GetEnvelope()[0],  polyThesprotia.GetEnvelope()[1],  polyThesprotia.GetEnvelope()[2], polyThesprotia.GetEnvelope()[2]
 
#********************************* - ΕΓΓΡΑΦΗ ΔΕΔΟΜΕΝΩΝ -  ΠΡΟΒΟΛΙΚΑ ΣΥΣΤΗΜΑΤΑ*********************************************
#************************************************************************************************************
 
if os.path.exists('mypoints.shp'):# έλεγχος αν υπάρχει το path
    driver.DeleteDataSource('mypoints.shp')
 
ds = driver.CreateDataSource('mypoints.shp')
 
#Αναγκαία η εισαγωγή της βιβλιοθήκης: from osgeo import osr
 
#Ορίζουμε ένα αντικείμενο για το γεωγραφικό σύστημα αναφοράς
SpatialReference = osr.SpatialReference() #αρχικοποίηση αντικειμένου γεωγραφικού σύστηματος αναφοράς
#Πολλοί τρόποι σύνταξης/ορισμού ενός συστήματος αναφοράς,Well Known Text (WKT), Proj4, EPSG, ESRI .prj, JSON, GML, XML
#Σημαντικό: για το τρόπο σύνταξης και λεπτομέρειες ανά σύστημα αναφοράς μπορείτε να δείτε στο http://spatialreference.org/
 
#Περισσότεροι τρόποι:
#ImportFromWkt()
#ImportFromEPSG()
#ImportFromProj4()
#ImportFromESRI(&amp;amp;lt;proj_lines&amp;amp;gt;)
#ImportFromPCI(, ,
#ImportFromUSGS(&amp;amp;lt;proj_code&amp;amp;gt;, )
#ImportFromXML()
 
SpatialReference.ImportFromEPSG(2100)
#SpatialReference.SetFromUserInput('EPSG:2100')
#Μπορούμε να το ορίσουμε και με άλλο τρόπο μέσω του EPSG code:
#SpatialReference.ImportFromProj4("+proj=tmerc +lon_0=24 +k=.9996 +x_0=500000 +towgs84=-199.72,74.03,246.02+ellps=GRS80")
 
#------------Δημιουργία νέου layer--------------
newlayer = ds.CreateLayer('mypoints',geom_type=ogr.wkbPoint,  srs = SpatialReference)
#Τύπου γεωμετρίας: wkbPoint, wkbLineString, wkbPolygon, wkbGeometryCollection, wkbMultiPolygon, wkbMultiPoint, wkbMultiLineString.
 
# Αν θέλουμε να ανακτήσουμε το προβολικό σύστημα ενός layer σαν αντικείμενο:
SR = newlayer.GetSpatialRef()
print SR
# Μπορεί να ανακτηθεί και από ένα αντικείμενο γεωμετρίας: spatialRef = geom.GetSpatialReference()
print SR.ExportToXML() #εξαγωγή σαν GML
 
#Δημιουργία ενός FieldDefn
fieldDefn = ogr.FieldDefn('greekname', ogr.OFTString) #Constructor of Definition of an attribute of an OGRFieldDefn. , http://www.gdal.org/ogr/classOGRFieldDefn.html#fc375f038b548b5a86b854c214fee114
fieldDefn.SetWidth(15)
 
newlayer.CreateField(fieldDefn)#αποθήκευση του FieldDefn στο layer
 
#ορίζουμε ένα νέο γεωμετρικό αντικείμενο τύπου σημείου
geom = ogr.Geometry(type=ogr.wkbPoint)
geom.AddPoint(23.726683, 37.971505) #δεδομενα σε WGS84 , προαρετικά τρίτη παράμετρος το z  (default=0)
# για αλλαγή των Χ, Υ: geom.SetPoint(0, 23.0, 37.0), όπου για σημεία υποστηρίζεται μόνο το 0
#για αντικείμενα τύπου γραμμής προσθέτουμε νέα σημεία της γραμμής με το AddPoint
 
#------------Reprojection του geom από WGS84 σε Greek Grid
#Ορίζουμε τα προβολικά συστήματα ως objects και τους δίνουμε παραμέτρους:
 
#WGS84
wgs84SR= osr.SpatialReference()
wgs84SR.ImportFromEPSG(4326) #  WGS84
#Greek_Grid
greekGridSR= osr.SpatialReference()
greekGridSR.ImportFromEPSG(2100) # Greek Grid
 
#Απαιτείται ένα CoordinateTransformation αντικείμενο
coordTrans = osr.CoordinateTransformation(wgs84SR, greekGridSR)
 
#Καλούμε την function Transform του geometry αντικειμένου
geom.Transform(coordTrans)
 
xEgsa = geom.GetX()
yEgsa  = geom.GetY()
print "X, Y ΕΓΣΑ-87:",  xEgsa ,  yEgsa 
 
#Δημιουργία του Feature object
featureDefn = newlayer.GetLayerDefn() # ανάκτηση τους σχήματος του layer (σχήμα πεδίων και ιδιοτήτων τους των features του layer.Επιστρέφει: feature definition. 
feature = ogr.Feature(featureDefn) #Constructor για νέο feature object με το field definition του layer 
feature.SetGeometry(geom)#Του ορίζουμε σαν γεωμετρία το geom object
 
feature.SetField('greekname', u"Ακρόπολη".encode('iso-8859-7'))
 
newlayer.CreateFeature(feature)#αποθήκευση του feature στο layer
 
# Cleanup, απελευθερώνουμε πόρους
#Δεν καλούμε το Destroy() σε geometry objects που προέρχονται από features (Segmentation fault στην Python ) π.χ. polyThesprotia, ptArgalasti, ptParamythia
 
#Destroy geometries
centroid_obj.Destroy()
geom.Destroy()
 
#Destroy features
feature.Destroy()
feature52.Destroy()
featParamythia.Destroy()
featArgalasti.Destroy()
 
#Destroy datasources
dataSource.Destroy()
dataSource2.Destroy()
ds.Destroy() # Κλείσιμο και αποθήκευση του datasource για να αποθηκευτεί
 
print u'Δημιουργία εικόνας png με το Mapnik!'
 
import mapnik
 
#symbolizers
symbolizer = mapnik.PolygonSymbolizer(mapnik.Color("#fdf9e5"))
symbolizer1= mapnik.LineSymbolizer(mapnik.Color('black'),0.5)
symbolizer2= mapnik.ShieldSymbolizer('greekname','DejaVu Sans Bold',12,mapnik.Color('#000000'),'icon.png','png',32,32)
 
#
rule = mapnik.Rule()
rule.symbols.append(symbolizer)
rule.symbols.append(symbolizer1)
 
rule2 = mapnik.Rule()
rule2.symbols.append(symbolizer2)
 
#styles
style = mapnik.Style()
style.rules.append(rule)
 
style2 = mapnik.Style()
style2.rules.append(rule2)
 
#layers
layer = mapnik.Layer("nomoi")
layer.datasource = mapnik.Shapefile(file="nomoi_okxe.shp")
 
layer2= mapnik.Layer("oikismoi")
layer2.datasource = mapnik.Shapefile(file="mypoints.shp",  encoding='ISO-8859-7')
 
layer.styles.append("mapStyle")
layer2.styles.append("mapStyle2")
 
map = mapnik.Map(800, 400)
map.background = mapnik.Color("#c5edff")
 
map.append_style("mapStyle", style)
map.append_style("mapStyle2", style2)
 
map.layers.append(layer)
map.layers.append(layer2)
 
map.zoom_all()
 
mapnik.render_to_file(map, "map.png", "png")
 
print u'Η εκτέλεση του script ολοκληρώθηκε!'
 
#Παραδείγματα:
#//www.geographer.gr/gis/64-gefyria.html&lt;/code&gt;&lt;/pre&gt;</content><category term="GIS"></category><category term="ogr"></category><category term="osr"></category><category term="python"></category><category term="vector"></category></entry><entry><title>Χαρτόγραμμα, ένας καινοτόμος τρόπος χαρτογράφησης</title><link href="https://geographer.gr/khartogramma-enas-kainotomos-tropos-khartographeses/" rel="alternate"></link><published>2011-06-11T00:10:00+03:00</published><updated>2011-06-11T00:10:00+03:00</updated><author><name>Leonidas Liakos</name></author><id>tag:geographer.gr,2011-06-11:/khartogramma-enas-kainotomos-tropos-khartographeses/</id><summary type="html">&lt;p&gt;Ποιός είπε ότι δεν θέλουμε παραμορφώσεις στους χάρτες; Πάντα ο
άνθρωπος προσπαθούσε να αποδόσει βέλτιστα την προβολή της σφαίρας στο
επίπεδο με τις ελάχιστες δυνατές παραμορφώσεις. Πολλές φορές όμως ο
συμβατικός τρόπος σκέψης μας στερεί την φαντασία για δημιουργικές
καινοτομίες. Το χαρτόγραμμα είναι μια από αυτές τις καινοτομίες στην
χαρτογράφηση …&lt;/p&gt;</summary><content type="html">&lt;p&gt;Ποιός είπε ότι δεν θέλουμε παραμορφώσεις στους χάρτες; Πάντα ο
άνθρωπος προσπαθούσε να αποδόσει βέλτιστα την προβολή της σφαίρας στο
επίπεδο με τις ελάχιστες δυνατές παραμορφώσεις. Πολλές φορές όμως ο
συμβατικός τρόπος σκέψης μας στερεί την φαντασία για δημιουργικές
καινοτομίες. Το χαρτόγραμμα είναι μια από αυτές τις καινοτομίες στην
χαρτογράφηση. Σύμφωνα με το διεθνώς αναγνωρισμένο Λεξικό της Ανθρώπινης
Γεωγραφίας (Johnston et al., 2000, σελ. 59), χαρτόγραμμα είναι μια πολύ
προσαρμοσμένη χαρτογραφική προβολή η οποία παραμορφώνει τον χώρο ή την
απόσταση είτε για να προάγει την ευαναγνωσιμότητα είτε για να αποκαλύψει
πρότυπα που δεν είναι εύκολα εμφανή σε ένα πιο παραδοσιακό βασικό χάρτη
(&lt;a class="uri" href="http://gisc.gr/index.php/knolbase/40-spatialanalysis/154-cartograms"&gt;http://gisc.gr/index.php/knolbase/40-spatialanalysis/154-cartograms&lt;/a&gt;).
Ένα νέο πεδίο εξελίσσεται λοιπόν στο πεδίο της θεματικής χαρτογράφησης
και οπτικοποίησης των κοινωνικών μεταβλητών. Η παραμόρφωση πλέον είναι
αναγκαίο συστατικό του χάρτη ο οποίος άλλοτε συστέλλεται και άλλοτε
διαστέλλεται με σκοπό να τονίσει τις έντονες χωρικές διακυμάνσεις και
συγκεντρώσεις μιας μεταβλητής στον χώρο. Έτσι χωρικές ενότητες
αποτυπώνονται σε αναλογία με το μέγεθος μιας μεταβλητής π.χ. δημογραφικά
χαρακτηριστικά, εκλογικά αποτελέσματα, οικονομικά μεγέθη κτλ. Ο &lt;a href="https://en.wikipedia.org/wiki/Waldo_Tobler"&gt;Waldo R. Tobler&lt;/a&gt;
φαίνεται ότι ήταν ένας από τους πρώτους χαρτογράφους που ξέφυγε από τον
συμβατικό τρόπο χαρτογράφησης και μάλιστα από την δεκαετία του ’60.&lt;/p&gt;
&lt;p&gt;Παρακάτω φαίνεται ένα χαρτόγραμμα όπου το μέγεθος των κρατών είναι
ανάλογο του πληθυσμού τους:&lt;/p&gt;
&lt;p&gt;&lt;img src="https://geographer.gr/images/population1024x512.png"/&gt;&lt;/p&gt;
&lt;p&gt;Το επόμενο χαρτόγραμμα αφορά το πληθυσμό της Ελλάδας και έχει
υπολογιστεί με το λογισμικό &lt;a href="http://scapetoad.choros.ch/"&gt;ScapeToad v1.1&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src="https://geographer.gr/images/screenshot.png"/&gt;&lt;/p&gt;</content><category term="GIS"></category><category term="cartogram"></category></entry><entry><title>Hatt σε ΕΓΣΑ 87. Online μετατροπή συντεταγμένων</title><link href="https://geographer.gr/hatt-se-egsa-87-online-metatrope-suntetagmenon/" rel="alternate"></link><published>2010-11-03T10:20:00+02:00</published><updated>2010-11-03T10:20:00+02:00</updated><author><name>Leonidas Liakos</name></author><id>tag:geographer.gr,2010-11-03:/hatt-se-egsa-87-online-metatrope-suntetagmenon/</id><summary type="html">&lt;p&gt;&lt;img src="https://geographer.gr/images/hatt.jpg"/&gt;&lt;/p&gt;
&lt;p&gt;Πολλά από τα χαρτογραφικά δεδομένα που διαθέτουμε στα πλαίσια της
καθημερινής μας εργασίας είναι καταγγεγραμένα στο παλιό “ελληνικό” datum
(&lt;strong&gt;ελλειψοειδές Bessel&lt;/strong&gt;, &lt;strong&gt;προβολή Hatt&lt;/strong&gt;).
Δεδομένου ότι πλέον έχουμε μεταβεί στο νέο γεωδαιτικό συστήμα αναφοράς
ΕΓΣΑ ‘87 είναι αναγκαίο ένα εύχρηστο εργαλείο μετατροπής συντεταγμένων.
Γι’ αυτό τον σκοπό έχω δημιουργήσει δύο εργαλεία …&lt;/p&gt;</summary><content type="html">&lt;p&gt;&lt;img src="https://geographer.gr/images/hatt.jpg"/&gt;&lt;/p&gt;
&lt;p&gt;Πολλά από τα χαρτογραφικά δεδομένα που διαθέτουμε στα πλαίσια της
καθημερινής μας εργασίας είναι καταγγεγραμένα στο παλιό “ελληνικό” datum
(&lt;strong&gt;ελλειψοειδές Bessel&lt;/strong&gt;, &lt;strong&gt;προβολή Hatt&lt;/strong&gt;).
Δεδομένου ότι πλέον έχουμε μεταβεί στο νέο γεωδαιτικό συστήμα αναφοράς
ΕΓΣΑ ‘87 είναι αναγκαίο ένα εύχρηστο εργαλείο μετατροπής συντεταγμένων.
Γι’ αυτό τον σκοπό έχω δημιουργήσει δύο εργαλεία:&lt;/p&gt;
&lt;ol type="1"&gt;
&lt;li&gt;&lt;p&gt;&lt;a href="http://arcscripts.esri.com/details.asp?dbid=15500"&gt;Hatt
to Greek Grid (EGSA ’87)&lt;/a&gt;, το συγκεκριμένο εργαλείο χρησιμοποιεί το
περιβάλλον εργασίας του Arcgis και είναι γραμμένο σε Python. Ορίζετε ένα
πλήθος σημείων Hatt καταγγεγραμένα σε αρχείο txt και σας επιστρέψει ένα
αρχείο των ίδιων σημείων σε ΕΓΣΑ ’87. Επίσης, μπορείτε να επιλέξετε αν
το αποτέλεσμα θα σας επιστραφεί και σαν αρχείο shapefile (σημειακό και
γραμμικό).&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href="http://www.geographer.gr/ci/index.php/hatt/"&gt;Online
εργαλειο μετατροπήs από Hatt σε ΕΓΣΑ ’87&lt;/a&gt;. Το εργαλείο αυτό σας δίνει
την δυνατότητα να μετατρέψετε Online το σημείο σας και να το προβάλλετε
μάλιστα άμεσα είτε στο &lt;a href="https://maps.google.com/"&gt;Google
Maps&lt;/a&gt; είτε στο &lt;a href="https://www.openstreetmap.org/"&gt;OpenStreetMap&lt;/a&gt;. Παράλληλα,
μπορείτε να προβάλλετε το Φ.Χ. που επιλέγετε στο Google maps αλλά και να
δείτε τους συντελεστές μετατροπής του σχετικού πολυωνύμου που
χρησιμοποιείται για την μετατροπή.&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;</content><category term="GIS"></category><category term="ArcGIS"></category><category term="Greek Grid"></category><category term="HATT"></category><category term="python"></category><category term="ΕΓΣΑ87"></category></entry><entry><title>Τάσεις Μεταβολής της Απασχόλησης στους Νομούς της Ελλάδας</title><link href="https://geographer.gr/taseis-metaboles-tes-apaskholeses-stous-nomous-tes-elladas/" rel="alternate"></link><published>2010-09-04T00:10:00+03:00</published><updated>2010-09-04T00:10:00+03:00</updated><author><name>Leonidas Liakos</name></author><id>tag:geographer.gr,2010-09-04:/taseis-metaboles-tes-apaskholeses-stous-nomous-tes-elladas/</id><summary type="html">&lt;p&gt;&lt;strong&gt;Περίληψη&lt;/strong&gt;:&lt;/p&gt;
&lt;p&gt;Η παρούσα διπλωματική εργασία επικεντρώνεται στην διερεύνηση των
παραγόντων που επηρεάζουν την περιφερειακή απασχόληση και την ανεργία,
στην παρουσίαση κάποιων θεωριών σχετικά με την περιφερειακή ανάπτυξη και
την μελέτη των χαρακτηριστικών της ευρωπαϊκής αγοράς εργασίας. Στην
συνέχεια γίνεται μια αναφορά στις περιφερειακές ανισότητες στην Ελλάδα
κατά τα τελευταία χρόνια …&lt;/p&gt;</summary><content type="html">&lt;p&gt;&lt;strong&gt;Περίληψη&lt;/strong&gt;:&lt;/p&gt;
&lt;p&gt;Η παρούσα διπλωματική εργασία επικεντρώνεται στην διερεύνηση των
παραγόντων που επηρεάζουν την περιφερειακή απασχόληση και την ανεργία,
στην παρουσίαση κάποιων θεωριών σχετικά με την περιφερειακή ανάπτυξη και
την μελέτη των χαρακτηριστικών της ευρωπαϊκής αγοράς εργασίας. Στην
συνέχεια γίνεται μια αναφορά στις περιφερειακές ανισότητες στην Ελλάδα
κατά τα τελευταία χρόνια ενώ ύστερα ακολουθεί το ερευνητικό τμήμα με την
εφαρμογή της ανάλυσης απόκλισης-συμμετοχής στους νομούς της Ελλάδας.
Σκοπός της εργασίας είναι να προσδιορίσει τα πρότυπα περιφερειακής
ανάπτυξης στους νομούς της Ελλάδας, να ερμηνεύσει τις μεταβολές της
απασχόλησης και να διαγνώσει τα περιφερειακά προβλήματα και τους
παράγοντες των περιφερειακών ανισοτήτων. Θέματα όπως η κλαδική διάρθρωση
των νομών, τα συγκριτικά τους πλεονεκτήματα, τα τοπικά τους προβλήματα
και η σύνθεση του πληθυσμού εξετάζονται προκειμένου να διαπιστωθεί κατά
πόσο ερμηνεύουν την μεταβολή της απασχόλησης. Τέλος, προτείνονται κάποια
μέτρα για την ανάπτυξη των λιγότερο ανεπτυγμένων νομών, την άρση των
περιφερειακών ανισοτήτων και την αύξηση της απασχόλησης.&lt;/p&gt;
&lt;p&gt;&lt;img height="200" src="https://geographer.gr/images/apasxolisi.png" width="200"/&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Abstract&lt;/strong&gt;:&lt;/p&gt;
&lt;p&gt;The present paper concerns the investigation of factors that
influence the regional employment and unemployment, the presentation of
certain theories with regard to the regional growth and the study of
characteristics of European labour market. First, it is focused on the
regional inequalities in Greece during the recent past, while later, it
follows the inquiring department of the research with the application of
shift-share analysis in the prefectures of Greece. The aim of this work
is to determine the models of regional growth in the prefectures of
Greece, to interpret the changes of employment and determine the
regional problems and the factors of regional inequalities. Subjects
such as the industrial structure of prefectures, their comparative
advantages, their local problems and the composition of population are
examined in order to realise the extend in which they interpret the
change of employment. Finally, certain measures are proposed for the
growth of the problematic prefectures, the obliteration of regional
inequalities and the increase of employment.&lt;/p&gt;</content><category term="GIS"></category><category term="shift share analysis"></category><category term="thesis"></category></entry><entry><title>Οι Καλλικρατικοί δήμοι της Ελλάδας- Διαδραστικός χάρτης</title><link href="https://geographer.gr/%CE%BA%CE%B1%CE%BB%CE%BB%CE%B9%CE%BA%CF%81%CE%B1%CF%84%CE%B9%CE%BA%CE%BF%CE%AF-%CE%B4%CE%AE%CE%BC%CE%BF%CE%B9-%CE%B5%CE%BB%CE%BB%CE%AC%CE%B4%CE%B1%CF%82/" rel="alternate"></link><published>2010-08-03T00:10:00+03:00</published><updated>2010-08-03T00:10:00+03:00</updated><author><name>Leonidas Liakos</name></author><id>tag:geographer.gr,2010-08-03:/καλλικρατικοί-δήμοι-ελλάδας/</id><summary type="html">&lt;p class="first last"&gt;Παρακάτω απεικονίζονται οι δήμοι της Ελλάδας σύμφωνα με το σχέδιο &amp;quot;Καλλικράτης&amp;quot;. Κάνοντας κλίκ στο πολύγωνο ενός δήμου μπορείτε να δείτε το όνομά του.&lt;/p&gt;
</summary><content type="html">&lt;img alt="&amp;quot;Οι δήμοι της Ελλάδας σύμφωνα με το σχέδιο &amp;quot;Καλλικράτης&amp;quot;" src="https://geographer.gr/images/kallikratis.jpeg" style="width: 100px;" /&gt;
&lt;p&gt;Παρακάτω απεικονίζονται οι δήμοι της Ελλάδας σύμφωνα με το σχέδιο &amp;quot;Καλλικράτης&amp;quot;.&lt;/p&gt;
&lt;p&gt;Κάνοντας κλίκ στο πολύγωνο ενός δήμου μπορείτε να δείτε το όνομά του.&lt;/p&gt;
&lt;p&gt;(&lt;em&gt;Ακολουθεί διαδραστικός χάρτης ο οποίος απαιτεί λίγο χρόνο για να εμφανιστεί&lt;/em&gt;)&lt;/p&gt;
&lt;iframe src="https://geographer.gr/html/m.html" frameborder="0" style="overflow:hidden;height:600px;width:70%" height="600px" width="100%"&gt;&lt;/iframe&gt;&lt;p&gt;Πηγές δεδομένων:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Ελληνική Στατιστική Αρχή, Ψηφιακά Χαρτογραφικά Υπόβαθρα (Απογραφικά/Διοικητικά όρια), Διαθέσιμο στο &amp;lt;&lt;a class="reference external" href="http://www.statistics.gr/digital-cartographical-data"&gt;http://www.statistics.gr/digital-cartographical-data&lt;/a&gt;&amp;gt; [Πρόσβαση:09/02/2022]&lt;/li&gt;
&lt;/ul&gt;
</content><category term="GIS"></category><category term="Καλλικράτης"></category><category term="OSM"></category></entry><entry><title>Τρέξτε το CoordGr σε Ubuntu</title><link href="https://geographer.gr/trexte-to-coordgr-se-ubuntu/" rel="alternate"></link><published>2010-08-03T00:00:00+03:00</published><updated>2010-08-03T00:00:00+03:00</updated><author><name>Leonidas Liakos</name></author><id>tag:geographer.gr,2010-08-03:/trexte-to-coordgr-se-ubuntu/</id><summary type="html">&lt;p&gt;Ένα από τα πλέον χρήσιμα προγράμματα για όσους ασχολούνται με την
μετατροπή συντεταγμένων στον ελλαδικό χώρο είναι το &lt;a href="https://dasologoi.gr/%CE%B1%CF%81%CF%87%CE%B5%CE%AF%CE%B1-downloads/download/7-%CE%B3%CE%B5%CE%BD%CE%B9%CE%BA%CE%AC/127-coord_gr"&gt;CoordGr&lt;/a&gt;
του Γιάννη Συγγρού. Το εν λόγω λογισμικό δεν θέλει συστάσεις μιας και
είναι αρκετά διαδεδομένο λόγω της χρησιμότητας και μοναδικότητάς
του.&lt;/p&gt;
&lt;p&gt;Δυστυχώς το CoordGr είναι σχεδιασμένο ώστε να εκτελείται σε Windows …&lt;/p&gt;</summary><content type="html">&lt;p&gt;Ένα από τα πλέον χρήσιμα προγράμματα για όσους ασχολούνται με την
μετατροπή συντεταγμένων στον ελλαδικό χώρο είναι το &lt;a href="https://dasologoi.gr/%CE%B1%CF%81%CF%87%CE%B5%CE%AF%CE%B1-downloads/download/7-%CE%B3%CE%B5%CE%BD%CE%B9%CE%BA%CE%AC/127-coord_gr"&gt;CoordGr&lt;/a&gt;
του Γιάννη Συγγρού. Το εν λόγω λογισμικό δεν θέλει συστάσεις μιας και
είναι αρκετά διαδεδομένο λόγω της χρησιμότητας και μοναδικότητάς
του.&lt;/p&gt;
&lt;p&gt;Δυστυχώς το CoordGr είναι σχεδιασμένο ώστε να εκτελείται σε Windows.
Παρόλα αυτά είναι δυνατόν να εκτελεστεί και σε linux με την βοήθεια του
Wine.&lt;/p&gt;
&lt;p&gt;Τα βήματα για την εγκατάσταση είναι τα εξής:&lt;/p&gt;
&lt;ol type="1"&gt;
&lt;li&gt;Αρχικά εγκαθιστούμε το Wine:&lt;/li&gt;
&lt;/ol&gt;
&lt;div class="sourceCode" id="cb1"&gt;&lt;pre class="sourceCode bash"&gt;&lt;code class="sourceCode bash"&gt;&lt;span id="cb1-1"&gt;&lt;a aria-hidden="true" href="#cb1-1" tabindex="-1"&gt;&lt;/a&gt;&lt;span class="fu"&gt;sudo&lt;/span&gt; apt-get install wine&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;ol start="2" type="1"&gt;
&lt;li&gt;Για να μη πάρετε μήνυμα σφάλματος κατά την εγκατάσταση του Coordgr
σαν το παρακάτω εγκαταστήστε το πακέτο &lt;em&gt;Visual Basic 5 runtime&lt;/em&gt;
για το Wine αφού πρώτα κατεβάσετε το &lt;em&gt;winetricks&lt;/em&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;div class="sourceCode" id="cb2"&gt;&lt;pre class="sourceCode bash"&gt;&lt;code class="sourceCode bash"&gt;&lt;span id="cb2-1"&gt;&lt;a aria-hidden="true" href="#cb2-1" tabindex="-1"&gt;&lt;/a&gt;&lt;span class="fu"&gt;wget&lt;/span&gt; http://winetricks.org/winetricks&lt;/span&gt;
&lt;span id="cb2-2"&gt;&lt;a aria-hidden="true" href="#cb2-2" tabindex="-1"&gt;&lt;/a&gt;&lt;span class="fu"&gt;sh&lt;/span&gt; winetricks vb5run&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;img src="https://geographer.gr/images/dtaddin.png"/&gt;&lt;/p&gt;
&lt;ol start="3" type="1"&gt;
&lt;li&gt;Στο επόμενο βήμα πρέπει να κατεβάσουμε, να αποσυμπιέσουμε και να
εγκαταστήσουμε το πρόγραμμα:&lt;/li&gt;
&lt;/ol&gt;
&lt;pre class="shell"&gt;&lt;code&gt;wget http://web.auth.gr/e-topo/TOMEIS_INDEX/TOMEASA/Katsambalos/Give/coords_gr.zip
unzip coords_gr.zip -d CoordGr
cd CoordGr
wine setup.exe&lt;/code&gt;&lt;/pre&gt;
&lt;ol start="4" type="1"&gt;
&lt;li&gt;Στην συνέχεια πρέπει να ενεργοποιήσουμε τα κατάλληλα locales για την
ελληνική γλώσσα ώστε τα διάφορα μενού να εμφανιστούν στα ελληνικά:&lt;/li&gt;
&lt;/ol&gt;
&lt;pre&gt;&lt;code&gt;sudo locale-gen el_GR.UTF-8&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Σε περίπτωση που τα ελληνικά εξακολουθούν να μην εμφανίζονται ελέγξτε
αν στο φάκελο των Fonts του Wine
(&lt;code&gt;~/.wine/dosdevices/c:/windows/Fonts&lt;/code&gt;) είναι οι απαραίτητες
γραμματοσειρές και πιο συγκεκριμένα η γραμματοσειρά
&lt;em&gt;sserifeg.fon&lt;/em&gt; και &lt;em&gt;tahoma.ttf&lt;/em&gt;. Αν δεν υπάρχουν τότε
κάντε μια αναζήτηση στο διαδίκτυο.&lt;/p&gt;
&lt;ol start="5" type="1"&gt;
&lt;li&gt;Τέλος μπορούμε να εκκινήσουμε το πρόγραμμα, αφού πρώτα αλλάξουμε τον
τρέχων κατάλογο στην τοποθεσία που είναι εγκατεστημένο το CoordGr στο
Wine ως εξής:&lt;/li&gt;
&lt;/ol&gt;
&lt;pre&gt;&lt;code&gt;cd "~/.wine/dosdevices/c:/Program Files/COORD_GR" env  LC_CTYPE=el_GR.UTF-8 wine "C:\Program Files\COORD_GR\COORD_GR.exe"&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Αν κατά την εκκίνηση λάβετε ένα μήνυμα σφάλματος σαν το παρακάτω, το
πρόβλημα βρίσκεται στα regional settings του wine.&lt;/p&gt;
&lt;p&gt;&lt;img src="https://geographer.gr/images/error_coordgr_regional_settings.png"/&gt;&lt;/p&gt;
&lt;p&gt;Για να το διορθώσετε δώστε:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;wine regedit&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;και ορίστε την μεταβλητή &lt;code&gt;sDecimal = .&lt;/code&gt; και την μεταβλητή
&lt;code&gt;sThousand=,&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;Εναλλακτικά μπορείτε να δημιουργήσετε έναν εκκινητή (Launcher) στην
επιφάνεια εργασίας. Δημιουργήστε έναν νέο αρχείο με την ονομασία
&lt;code&gt;COORD_GR.desktop&lt;/code&gt; με τα παρακάτω δεδομένα στο
&lt;code&gt;~/Desktop&lt;/code&gt;:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;[Desktop Entry]
Name=COORD_GR
Exec=env LC_CTYPE=el_GR.UTF-8  WINEPREFIX="/home/leonidas/.wine" wine start "C:\Program Files\COORD_GR\COORD_GR.exe"
Type=Application
Terminal=false
Path=/home/leonidas/.wine/dosdevices/c:/Program Files/COORD_GR
Icon=/home/leonidas/.wine/drive_c/Program Files/COORD_GR/coordsGR.ico&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;Προσοχή&lt;/strong&gt;: Αντικαταστήστε το
&lt;code&gt;/home/leonidas&lt;/code&gt; με το δικό σας home directory.&lt;/p&gt;
&lt;p&gt;Στην συνέχεια ορίστε το αρχείο εκτελέσιμο και ο εκκινητής είναι
έτοιμος:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;chmod +x COORD_GR.desktop&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Επειδή το εικονίδιο της συντόμευσης δεν είναι ιδιαίτερα καλαίσθητο
μπορεί να αντικατασταθεί με το παρακάτω:&lt;/p&gt;
&lt;p&gt;&lt;img height="100" src="https://geographer.gr/images/coordgr.svg" width="100"/&gt;&lt;/p&gt;
&lt;p&gt;Αν όλα λειτούργησαν σωστά πρέπει να δείτε το μήνυμα&lt;/p&gt;
&lt;p&gt;&lt;img src="https://geographer.gr/images/coord2.jpg"/&gt;&lt;/p&gt;
&lt;p&gt;Και στην συνέχεια το περιβάλλον εργασίας του CoordGr&lt;/p&gt;
&lt;p&gt;&lt;img src="https://geographer.gr/images/coord1.jpg"/&gt;&lt;/p&gt;
&lt;p&gt;(&lt;em&gt;Η εγκατάσταση και εκτέλεση του CoordGr έγινε στην διανομή Ubuntu
10.04 LTS-Lucid Lynx με Wine-1.1.42&lt;/em&gt;)&lt;/p&gt;</content><category term="GIS"></category><category term="coordgr"></category><category term="wine"></category></entry><entry><title>Εφαρμογή των Συστημάτων Γεωγραφικών Πληροφοριών ανοικτού κώδικα στην αρχαιολογία</title><link href="https://geographer.gr/epharmoge-ton-sustematon-geographikon-plerophorion-anoiktou-kodika-sten-arkhaiologia/" rel="alternate"></link><published>2010-05-10T00:00:00+03:00</published><updated>2010-05-10T00:00:00+03:00</updated><author><name>Leonidas Liakos</name></author><id>tag:geographer.gr,2010-05-10:/epharmoge-ton-sustematon-geographikon-plerophorion-anoiktou-kodika-sten-arkhaiologia/</id><summary type="html">&lt;p&gt;H χρήση των υπολογιστικών συστημάτων στην αρχαιολογία σηματοδότησε
παράλληλα και την έλευση των Συστημάτων Γεωγραφικών Πληροφοριών
(G.I.S.). Ιδιαίτερα για την αρχαιολογία, τα δεδομένα της οποίας είναι
διάσπαρτα στον χώρο και τον χρόνο τα GIS αποτελούν ένα σύμμαχο στο
πλευρό του αρχαιολόγου τόσο γιατί του παρέχει την δυνατότητα
ολοκληρωμένης …&lt;/p&gt;</summary><content type="html">&lt;p&gt;H χρήση των υπολογιστικών συστημάτων στην αρχαιολογία σηματοδότησε
παράλληλα και την έλευση των Συστημάτων Γεωγραφικών Πληροφοριών
(G.I.S.). Ιδιαίτερα για την αρχαιολογία, τα δεδομένα της οποίας είναι
διάσπαρτα στον χώρο και τον χρόνο τα GIS αποτελούν ένα σύμμαχο στο
πλευρό του αρχαιολόγου τόσο γιατί του παρέχει την δυνατότητα
ολοκληρωμένης διαχείρισης των δεδομένων αυτών αλλά όσο και γιατί μπορεί,
μέσω της πλήρης ενσωμάτωσης γεωφυσικών, χωροταξικών και αρχαιολογικών
δεδομένων, να αποτελέσει ένα εργαλείο σχεδιασμού, ανάλυσης και
πρόβλεψης.&lt;/p&gt;
&lt;p&gt;Οι ανάγκες της αρχαιολογικής έρευνας για σύνθετα αναλυτικά μοντέλα
και διαχείριση των γεωγραφικών και περιγραφικών δεδομένων δύναται να
καλύφθουν σε ικανοποιmwητικό βαθμό από ελεύθερο λογισμικό ανοικτού
κώδικα. Πυλώνες της προσπάθειας αυτής αποτελούν λογισμικά ανοικτού
κώδικα που το κάθε ένα επικεντρώνεται στην κάλυψη διαφορετικών
απαιτήσεων και τα οποία σε ορισμένο βαθμό συνεργάζονται επιτυχώς με
εμπορικά λογισμικά κλειστού κώδικα.&lt;/p&gt;
&lt;p&gt;Το MapWindow GIS, ελευθερο λογισμικό ανοικτού κώδικα, χρησιμοποιήθηκε
επιτυχώς από την ΛΓ’ Εφορεία Προϊστορικών και Κλασικών Αρχαιοτήτων
προκειμένου να υλοποιηθεί μια εφαρμογή διαχείρισης των αρχαιολογικών
δεδομένων. Οι δυνατότητες επεκτασιμότητας που προσφέρει συνέβαλαν στην
δημιουργία εύχρηστων φορμών και εργαλείων με την βοήθεια της VB.NET ώστε
να καλύπτει τις ανάγκες ενός μέσου χρήστη. Η εφαρμογή που προέκυψε
αποτελεί ένα λειτουργικό παράδειγμα του “παντρέματος” ανάμεσα σε ΕΛ/ΛΑΚ
και λογισμικό εμπορικών-ιδιοκτησιακών αδειών χρήσης.&lt;/p&gt;
&lt;p&gt;&lt;img src="https://geographer.gr/images/mw.png"/&gt;&lt;/p&gt;
&lt;p&gt;Το GRASS GIS, το πλέον αξιόλογο ΕΛ/ΛΑΚ στον τομέα των GIS,
χρησιμοποιήθηκε στα πλαίσια της εκπόνησης του έργου
“Αρχαιολογικός-Ιστορικός Άτλας της Ελληνοαλβανικής μεθορίου”. Οι
αναλυτικές του δυνατότητες και τα σύνθετα μοντέλα που μπορούν να
εκτελεστούν στο GRASS GIS συνέβαλαν στην διεξαγωγή αξιόλογων
συμπερασμάτων για τις περιοχές εκμετάλλευσης των αρχαίων
κέντρων-οικισμών της περιοχής έρευνας αλλά και των πιθανών διαδρομών
μετακίνησης κατά την αρχαιότητα.&lt;/p&gt;
&lt;p&gt;Τέλος, με την βοήθεια των Open Source βιβλιοθηκών OSGEO, Mapwindow
GIS συντάχθηκαν διάφορα σενάρια προγραμματισμού (scripts) και λογισμικά
γενικής και ειδικής χρήσης. Οι μελλοντικές προτάσεις για την χρήση των
OS GIS προβλέπουν την διαχείριση αρχαιολογικών δεδομένων και διάχυση
πληροφοριών με πλατφορμες WebMapping που θα στηρίζονται στον Apache Web
Server, στον Mapserver, το Geomoose και την php. Τα πρώτα βήματα έχουν
ήδη γίνει και προς αυτήν την κατεύθυνση.&lt;/p&gt;
&lt;p&gt;&lt;a href="https://www.scribd.com/fullscreen/31221573?access_key=key-vaqqic52pq6eo5o9z6t"&gt;Δείτε
την παρουσίαση στο συνέδριο του ΕΛ/ΛΑΚ&lt;/a&gt;&lt;/p&gt;</content><category term="GIS"></category><category term="GIS"></category><category term="Mapwindow"></category><category term="αρχαιολογία"></category></entry><entry><title>Χαρτογραφόντας τα πέτρινα γεφύρια της Ηπείρου…</title><link href="https://geographer.gr/khartographontas-ta-petrina-gephuria-tes-epeirou/" rel="alternate"></link><published>2009-08-31T00:10:00+03:00</published><updated>2009-08-31T00:10:00+03:00</updated><author><name>Leonidas Liakos</name></author><id>tag:geographer.gr,2009-08-31:/khartographontas-ta-petrina-gephuria-tes-epeirou/</id><summary type="html">&lt;p&gt;&lt;img src="https://geographer.gr/images/m1.jpg"/&gt;&lt;/p&gt;
&lt;p&gt;H διαθεσιμότητα δεδομένων από το Πανεπιστήμιο Ιωαννίνων, μεταξύ αυτών
και γεωγραφικών, για τα πέτρινα γεφύρια της Ηπείρου στο διαδίκτυο (&lt;a class="uri" href="http://www.petrinagefiria.uoi.gr/"&gt;http://www.petrinagefiria.uoi.gr/&lt;/a&gt;) δίνει την δυνατότητα
χαρτογράφησης αυτής της πληροφορίας με λογισμικό ανοικτού κώδικα αλλά
και τον περαιτέρω έλεγχο της εγκυρότητας των δεδομένων. Με την βοήθεια
της γλώσσας Το …&lt;/p&gt;</summary><content type="html">&lt;p&gt;&lt;img src="https://geographer.gr/images/m1.jpg"/&gt;&lt;/p&gt;
&lt;p&gt;H διαθεσιμότητα δεδομένων από το Πανεπιστήμιο Ιωαννίνων, μεταξύ αυτών
και γεωγραφικών, για τα πέτρινα γεφύρια της Ηπείρου στο διαδίκτυο (&lt;a class="uri" href="http://www.petrinagefiria.uoi.gr/"&gt;http://www.petrinagefiria.uoi.gr/&lt;/a&gt;) δίνει την δυνατότητα
χαρτογράφησης αυτής της πληροφορίας με λογισμικό ανοικτού κώδικα αλλά
και τον περαιτέρω έλεγχο της εγκυρότητας των δεδομένων. Με την βοήθεια
της γλώσσας Το γεφύρι της Άρταςπρογραμματισμού &lt;a href="http://www.petrinagefiria.uoi.gr/"&gt;Python&lt;/a&gt; και με δεδομένο ότι
οι σχετικές ιστοσελίδες για τα γεφύρια δημιουργούνται δυναμικά μέσω της
γλώσσας PHP και κατά συνέπεια διατηρούν μια κοινή δομή, είναι δυνατή η
προσπέλαση τους και η απόσπαση συγκεκριμένων πληροφοριών με την
βιβλιοθήκη &lt;a href="https://docs.python.org/library/urllib2.html"&gt;urllib2&lt;/a&gt;. Στην
συνέχεια με την χρήση της βιβλιοθήκης &lt;a href="http://www.osgeo.org/"&gt;OSGeo&lt;/a&gt; μετατρέψαμε τις απαραίτητες
πληροφορίες σε αρχείο &lt;a href="https://en.wikipedia.org/wiki/Shapefile"&gt;shapefile&lt;/a&gt; όπου
αποθηκεύτηκαν τα απαραίτητα χωρικά και περιγραφικά δεδομένα.&lt;/p&gt;
&lt;p&gt;Παρακάτω διατίθεται ο κώδικας:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;# -*- coding: utf-8 -*-
import html5lib
from html5lib import treebuilders
import urllib2,  re
from osgeo import ogr
from osgeo import osr
import os
def writeshp(path,  SRS,  gefiria):
    outShapeFile = path
    drv = ogr.GetDriverByName('ESRI Shapefile')    
    errors=[]
    if os.path.exists(str(outShapeFile)):
        drv.DeleteDataSource(str(outShapeFile))
        print "Deleting shapefile that already exists: " + outShapeFile
 
    # Create SpatialReference
    t_srs = osr.SpatialReference()
 
    if SRS=='Greek Grid':
        print "Greek Grid is the GRS for the shapefile"
        t_srs.ImportFromProj4("+proj=tmerc +lon_0=24 +k=.9996 +x_0=500000 +towgs84=-199.72,74.03,246.02+ellps=GRS80")#Greek Grid  
    else:
        t_srs.SetFromUserInput('WGS84')
        print "WGS84 is the GRS for the shapefile"
 
    ds = drv.CreateDataSource(outShapeFile)
    print "Creating shapefile: " + outShapeFile
    layer = ds.CreateLayer(ds.GetName(), geom_type = ogr.wkbPoint, srs = t_srs)
 
#Τα πεδία με το όνομα τους και τις ιδιότητές τους    
    fields=[['NAME',  ogr.OFTString, 255],
           ['GEFYRIID',  ogr.OFTInteger] ,  
           ['lamda',  ogr.OFTReal] ,  
           ['phi',  ogr.OFTReal] ,  
           ['RIVERCODE',  ogr.OFTString, 20],  
           ['NOMOS',  ogr.OFTString, 25],  
           ['KOINOTHTA',  ogr.OFTString, 100],  
           ['PLACE',  ogr.OFTString, 255],  
           ['RIVER',  ogr.OFTString, 100],  
           ['HEIGHT',  ogr.OFTInteger],  
           ['ODIKO',  ogr.OFTString, 255],
           ['PARAKEIM',  ogr.OFTString, 255],
           ['DATE',  ogr.OFTString, 15],
           ['BUILDERS',  ogr.OFTString, 255],
           ['XORIGOS',  ogr.OFTString, 255],
           ['DAPANI',  ogr.OFTString, 255],
           ['SINTIRISI',  ogr.OFTString, 255],
           ['ALLA',  ogr.OFTString, 255],
           ['MORFI',  ogr.OFTString, 255],
           ['MEGETHOS',  ogr.OFTString, 255],
           ['YLIKA',  ogr.OFTString, 255],
           ['KATASTASH',  ogr.OFTString, 255],
           ['EPIGRAFH',  ogr.OFTString, 255],
           ['ISTOR_LAO',  ogr.OFTString, 500],
           ['BIBLIOG',  ogr.OFTString, 500],
           ['MARTIRIES',  ogr.OFTString, 255]
            ]
#Δύο ειδικά πεδία για τις συντεταγμένες στο ΕΓΣΑ '87 
    if SRS=='Greek Grid':
        print "Creating Field X..."
        layer.CreateField(ogr.FieldDefn('X', ogr.OFTReal))
        print "Creating Field Y..."
        layer.CreateField(ogr.FieldDefn('Y', ogr.OFTReal))
 
#Δημιουργία πεδίων
    for field in fields:
#        print field[0]
        fieldname=field[0]
        fieldproperty=field[1]
        print "Creating Field "  + fieldname
        ofield  = ogr.FieldDefn(fieldname, fieldproperty)
        if fieldproperty ==4:#Ειδικό property αν είναι string
            print "string is"
            fieldlen=field[2]
            ofield.SetWidth(fieldlen)
        layer.CreateField(ofield)
 
    print "Creating geometry object..."
    geom = ogr.Geometry(type=ogr.wkbPoint)      
 
    print "Adding shapes to shapefile..."
    for gefyri in gefyria:
        #print gefyri[6]
 
        try:
            coods= converttoDD(gefyri[7])#Get the sixth field, coordinates
        except:
            print "Error at coordinates for gefyri:" + str(gefyri[1]) + "with ID:" +  str(gefyri[0])
            errors.append([gefyri[0] , gefyri[1]] )
            continue
        print "Adding point with coordinates " + str(coods[0] )+ "," + str(coods[1])
        geom.AddPoint(coods[0],coods[1])#Add a point with the Coordinates
 
        #Μετατροπή των συντεταγμένων σε περίπτωση που έχει επιλεγθεί το ΕΓΣΑ '87
        if SRS=='Greek Grid':
            sourceSR = osr.SpatialReference()
            sourceSR.SetFromUserInput('WGS84') #Geo WGS84
            targetSR = osr.SpatialReference()
            targetSR.ImportFromProj4("+proj=tmerc +lon_0=24 +k=.9996 +x_0=500000 +towgs84=-199.72,74.03,246.02+ellps=GRS80")
            #targetSR.SetFromUserInput('EPSG:2100') #Greek Grid
            coordTrans = osr.CoordinateTransformation(sourceSR, targetSR)
            print "Converting point coordinates to Greek Grid...."
            geom.Transform(coordTrans)        
            print "The coordinates in Greek Grid are " + str(geom.GetX()) +"," + str(geom.GetY())
 
        feat = ogr.Feature(feature_def=layer.GetLayerDefn())
        print "Importing shape into feature."
        feat.SetGeometry(geom)
        print "Importing attributes into feature."
        if SRS=='Greek Grid':
            feat.SetField('X',geom.GetX() )
            feat.SetField('Y',geom.GetY() )
 
        feat.SetField('NAME',gefyri[1] )
        feat.SetField('GEFYRIID', gefyri[0] )
        feat.SetField('lamda',coods[0] )
        feat.SetField('phi',coods[1] )
        feat.SetField('MORFI',gefyri[16] )
        feat.SetField('RIVERCODE',checkrivers(gefyri[6]) )
        feat.SetField('NOMOS',gefyri[3])
        feat.SetField('KOINOTHTA',gefyri[4])
        feat.SetField('PLACE',gefyri[5] )
        feat.SetField('RIVER',gefyri[6])
        feat.SetField('HEIGHT',gefyri[8] )     
        feat.SetField('PARAKEIM',gefyri[9] )     
        feat.SetField('DATE',gefyri[10] )           
        feat.SetField('BUILDERS',gefyri[11] )           
        feat.SetField('XORIGOS',gefyri[12] )          
        feat.SetField('DAPANI',gefyri[13] )  
        feat.SetField('SINTIRISI',gefyri[14] )     
        feat.SetField('ALLA',gefyri[15] )    
        feat.SetField('MORFI',gefyri[16] )     
        feat.SetField('MEGETHOS',gefyri[17] )     
        feat.SetField('YLIKA',gefyri[18] ) 
        feat.SetField('KATASTASH',gefyri[19] )     
        feat.SetField('EPIGRAFH',gefyri[20] )     
        feat.SetField('ISTOR_LAO',gefyri[21] )      
        feat.SetField('BIBLIOG',gefyri[22] )     
        feat.SetField('MARTIRIES',gefyri[23] )
        feat.SetField('ODIKO',gefyri[24] )
 
        layer.CreateFeature(feat)
 
    #Clean up objects  
    feat.Destroy()
    ds.Destroy()
 
    if len(errors)&amp;amp;gt;0:
        print "There are " + str(len(errors) )+"errors"
        for gefyri in errors:
            print "Errors in coordinates for:" +gefyri[1] + " with id:" + gefyri[0]
 
def getdata (www):
    parser=html5lib.HTMLParser(tree=treebuilders.getTreeBuilder("beautifulsoup"))
    id = www[47:len(www)]
 
    print  "Parsing data from " + www
    tree=parser.parse(urllib2.urlopen(www))
    data=tree.findAll("td")
    cells=data[0:]#convert to list
 
#    Αν δεν υπάρχουν καθόλου κελιά με φωτογραφίες τότε ο συνολικός αριθμός των κελιών είναι 83
    if len(cells) == 79 :
        plus = -4
    if len(cells) == 80 :
        plus = -3
    if len(cells) == 81 :
        plus = -2
    if len(cells) == 82 :
        plus = -1
    if len(cells) == 83 :
        plus = 0
#    Αν δεν υπάρχει ένα κελίμε φωτογραφίες τότε ο συνολικός αριθμός των κελιών είναι 84 κτλ.     
    if len(cells) == 84 :
        plus = 1
 
    if len(cells) == 85 :
        plus = 2
 
    if len(cells) == 86 :
        plus = 3
    if len(cells) == 87 :
        plus = 4
 
    if len(cells) == 88 :
        plus = 5
 
    if len(cells) == 89 :
        plus = 6    
    if len(cells) == 90 :
        plus = 7
    if len(cells) == 91 :
        plus = 8
#Η εύρεση των απαραίτητων κελιών γίνεται δυναμικά καθώς ο αριθμός των κελιών με τις φωτογραφίες δεν είναι πάντα σταθερός
    td=[id, cells[16],  cells[18],   cells[25+plus],  cells[27+plus],  cells[29+plus],  cells[31+plus], cells[33+plus], cells[35+plus], cells[39+plus], cells[42+plus], cells[44+plus], cells[46+plus], cells[48+plus],  cells[50+plus],  cells[52+plus], cells[55+plus],  cells[57+plus],   cells[59+plus],   cells[61+plus],   cells[63+plus],   cells[66+plus],   cells[68+plus],   cells[70+plus],  cells[37+plus],]
    p = re.compile(r'&amp;amp;lt;.*?&amp;amp;gt;')#αφαιρούμε τα html tags και κρατάμε μόνο τα περιεχόμενα του κελιού
 
    data=[]
 
    for i in td:
        cellcontents = p.sub('', str(i)).strip()#αφαιρούμε περιττά κενά στην αρχή και το τελός των περιεχομένων του κελιού
        cleancellcontents=cellcontents.replace("n", "") #αφαιρούμε περιττούς χαρακτήρες που ορίζουν νέες γραμμές
        cleancellcontents=cleancellcontents.replace("t", "") #αφαιρούμε περιττούς χαρακτήρες tab
        cleancellcontents=cleancellcontents.strip()
        data.append(cleancellcontents)
 
    return data
 
def converttoDD(coords):
        #Καθαρίζω τις συντεταγμένες από περιττούς χαρακτήρες και κενά
        coords= coords.replace(' ', '')
        coords= coords.replace('N', '')
        coords= coords.replace('E', '')
        coords= coords.replace('Ν', '')#Ν με ελληνικούς χαρακτήρες
        coords= coords.replace('Ε', '')#Ε με ελληνικούς χαρακτήρες
        coords= coords.replace(',', '')
        coords= coords.replace('΄', '')
        coords= coords.replace(';', '')
        coords= coords.replace('°', '')
        coords= coords.replace('.', '')
        coords= coords.replace('`', '')
 
        y= float( coords[0:2]) + (float( coords[2:4])/60)  + ((  float(coords[4:6] ) +  float(coords[6:7])/10)  /3600)
        x= float( coords[8:10]) + (float( coords[10:12])/60)  + ((  float(coords[12:14] ) +  float(coords[14:15])/10)  /3600)
 
        xy=[x, y]
 
        return xy
 
def checkrivers(river):
    if river.find("Αχέροντας") &amp;amp;gt;= 0:
        return "axerontas"
    if river.find("ραχθος") &amp;amp;gt;= 0:
        return "araxthos"
    if river.find("Αώος") &amp;amp;gt;= 0:
        return "aoos"
    if river.find("Δρίνος") &amp;amp;gt;= 0:
        return "drinos"
    if river.find("Καλαμάς") &amp;amp;gt;= 0:
        return "kalamas"
    if river.find("Ξάνθος") &amp;amp;gt;= 0:
        return "ksanthos"
 
gefiriid=1
gefyria=[]
while gefiriid&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Αφού εκτελέστηκε το script εντοπίστηκαν 18 εγγραφές (γεφύρια) με
λανθασμένες ή ελλειπώς καταγεγγραμένες συντεταγμένες. Στον επόμενο
πίνακα παρατίθενται τα γεφύρια αυτά μαζί με τα ID τους.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Πίνακας 1.&lt;/strong&gt; Γεφύρια με λανθασμένες συντεταγμένες&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr class="header"&gt;
&lt;th&gt;ID&lt;/th&gt;
&lt;th&gt;&lt;/th&gt;
&lt;th&gt;Ονομασία γεφυριού&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr class="odd"&gt;
&lt;td&gt;15&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;Γεφύρι στο Μεγάλο Λαγκάδι&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class="even"&gt;
&lt;td&gt;24&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;Γεφύρι του Βουρκοπόταμου&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class="odd"&gt;
&lt;td&gt;36&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;Γεφύρι του Στέργιου&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class="even"&gt;
&lt;td&gt;47&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;Γεφύρι της Θεοτόκου&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class="odd"&gt;
&lt;td&gt;82&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;Καλογερικό γεφύρι ή Πλακίδα&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class="even"&gt;
&lt;td&gt;84&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;Γεφύρι στη Βρύση του Δεσπότη&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class="odd"&gt;
&lt;td&gt;85&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;Γεφύρι του Μύλου&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class="even"&gt;
&lt;td&gt;95&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;Γεφύρι στον Λάκκο Ρωμιάς ή Γεφύρι στις Μιάσες&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class="odd"&gt;
&lt;td&gt;105&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;Γεφύρι του Μύλου (Κήπων)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class="even"&gt;
&lt;td&gt;108&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;Γεφύρι στον Άγιο&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class="odd"&gt;
&lt;td&gt;110&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;Γεφύρι του Πετσώνη&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class="even"&gt;
&lt;td&gt;128&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;Γεφύρι του Κώτη&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class="odd"&gt;
&lt;td&gt;130&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;Γεφύρι της Γκούρας&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class="even"&gt;
&lt;td&gt;136&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;Γεφύρι της Γκάνας&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class="odd"&gt;
&lt;td&gt;141&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;Γεφύρι του Λώλη ή του Λάκκου&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class="even"&gt;
&lt;td&gt;142&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;Γεφύρι στον Άγιο Νικόλαο&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class="odd"&gt;
&lt;td&gt;143&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;Γεφύρι της Πλάκας&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class="even"&gt;
&lt;td&gt;149&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;Γεφύρι της Άρτας&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;&lt;br/&gt;&lt;/p&gt;
&lt;p&gt;Το shapefile με τις θέσεις των γεφυριών εντάχθηκε σε ένα σύστημα
γεωγραφικών πληροφοριών με σκοπό την χαρτογράφησή του όπου περιλαμβάνει
του ψηφιακό μοντέλο εδάφους, το υδρογραφικό δίκτυο, τις λίμνες και τα
διοικητικά όρια των νομών. Το λογισμικό ΣΓΠ που χρησιμοποιήθηκε είναι το
&lt;a href="http://www.qgis.org/"&gt;QGIS&lt;/a&gt; (ανοικτού κώδικα). Τα πεδία που
περιέχει η σχετική ιστοσελίδα για κάθε γεφύρι μετατρέπονται σε πεδία του
αρχείου shapefile όπου ο χρήστης μπορεί να αναζητήσει πληροφορίες καθώς
πλοηγείται στο QGIS (μέσω του εργαλείου Identify) ή να εκτελέσει
ερωτήματα τύπου SQL (π.χ. αναζήτησε τα γεφύρια που εντοπίζονται στον
Καλαμά και είναι δίτοξα).&lt;/p&gt;
&lt;figure&gt;
&lt;img alt="Εικόνα 1. Αναγνώριση γεφυριού στο QGIS με το εργαλείο Identify" src="https://geographer.gr/images/identify.jpg"/&gt;
&lt;figcaption aria-hidden="true"&gt;Εικόνα 1. Αναγνώριση γεφυριού στο QGIS με
το εργαλείο Identify&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;p&gt;&lt;br/&gt;&lt;/p&gt;
&lt;figure&gt;
&lt;img alt="Εικόνα 2. Αναζήτηση δεδομένων με την σύνταξη ερωτημάτων μορφής SQL" src="https://geographer.gr/images/sql.jpg"/&gt;
&lt;figcaption aria-hidden="true"&gt;Εικόνα 2. Αναζήτηση δεδομένων με την
σύνταξη ερωτημάτων μορφής SQL&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;p&gt;&lt;br/&gt;&lt;/p&gt;
&lt;p&gt;O παρακάτω χάρτης συντάχθηκε με την χρήση του λογισμικού ανοικτού
κώδικα Qgis ενώ η περαιτέρω γραφιστική επιμέλεια (υπομνήμα,
σελιδοποίηση) έγινε με την βοήθεια των λογισμικών &lt;a href="https://www.scribus.net/"&gt;Scribus&lt;/a&gt; και &lt;a href="https://www.inkscape.org/"&gt;Inkscape&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;&lt;img src="https://geographer.gr/images/gefyria_sites-copy.jpg"/&gt;&lt;/p&gt;
&lt;p&gt;Άμεσα εντοπίστηκαν και τα πρώτα σφάλματα καταγραφής στις θέσεις
κάποιων γεφυριών. Έτσι το Γεφύρι του Τρίστενου, το οποίο εντοπίζεται
στον νομό Ιωαννίνων, χαρτογραφήθηκε στην Αλβανία, βόρεια του Βουθρωτού.
Αλλά και το Γεφύρι της Σκαρβένας που βρίσκεται στο ρέμα Κουίτσας στον Ν.
Ιωαννίνων χαρτογραφήθηκε στον Αμβρακικό κόλπο! Επιπλέον έλεγχος στον
χάρτη ενδέχεται να αποκαλύψει και άλλα σφάλματα που οφείλονται στην
λανθασμένη καταγραφή της γεωγραφικής πληροφορίας.&lt;/p&gt;
&lt;p&gt;Εντάσσοντας στο χαρτογραφικό υπόβαθρο τις λεκάνες απορροής των
ποταμών (βλέπε Εικόνα 3) εντοπίστηκαν λανθασμένες ή αμφίβολες
πληροφορίες όσον αφορά την κατάταξη των γεφυριών με βάση τον ποταμό στον
οποίο εντοπίζονται. Με την χρήση του εργαλείου “Join attributes by
Location” της εργαλειοθήκης &lt;a href="http://www.ftools.ca/"&gt;fTools&lt;/a&gt;
ταυτοποιήθηκε σε ποιά λεκάνη απορροής ανήκει. Στην συνέχεια έγινε
σύγκριση με τα δεδομένα της ιστοσελίδας όπως αυτά μεταφέρθηκαν και
παραμετροποιήθηκαν στον πίνακα των περιγραφικών δεδομένων του shapefile.
Για παράδειγμα το Γεφύρι του Γκούμου στην Αγία Κυριακή (Πόποβο)
Θεσπρωτίας εμπεριέχεται στην λεκάνη απορροής του ποταμού Καλαμά και όχι
του ποταμού Αχέροντα όπως αναφέρεται στην σχετική ιστοσελίδα (βλέπε
Εικόνα 4).&lt;/p&gt;
&lt;p&gt;Εντοπίστηκαν τα εξής σφάλματα:&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Πίνακας 2&lt;/strong&gt;. Σφάλματα κατάταξης των γεφυριών ως προς
τον ποταμό που εντάσσονται.&lt;/p&gt;
&lt;table&gt;
&lt;colgroup&gt;
&lt;col style="width: 20%"/&gt;
&lt;col style="width: 38%"/&gt;
&lt;col style="width: 41%"/&gt;
&lt;/colgroup&gt;
&lt;thead&gt;
&lt;tr class="header"&gt;
&lt;th&gt;Ονομασία γεφυριού&lt;/th&gt;
&lt;th&gt;Ποταμός που αναφέρεται στην ιστοσελίδα&lt;/th&gt;
&lt;th&gt;Εντάσσεται στην λεκάνη απορροής του ποταμού&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr class="odd"&gt;
&lt;td&gt;Γεφύρι στο Κορφίτο&lt;/td&gt;
&lt;td&gt;Άραχθος&lt;/td&gt;
&lt;td&gt;Άλλο&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class="even"&gt;
&lt;td&gt;Γεφύρι του Γκούμου&lt;/td&gt;
&lt;td&gt;Αχέροντας&lt;/td&gt;
&lt;td&gt;Καλαμάς&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class="odd"&gt;
&lt;td&gt;Γεφύρι του Μεζάνη&lt;/td&gt;
&lt;td&gt;Αχέροντας&lt;/td&gt;
&lt;td&gt;Άλλο&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class="even"&gt;
&lt;td&gt;Γεφύρι του Παπά&lt;/td&gt;
&lt;td&gt;Καλαμάς&lt;/td&gt;
&lt;td&gt;Αώος&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class="odd"&gt;
&lt;td&gt;Γεφύρι στην Ποταμιά&lt;/td&gt;
&lt;td&gt;Καλαμάς&lt;/td&gt;
&lt;td&gt;Αώος&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class="even"&gt;
&lt;td&gt;Γεφύρι της Γκούρας&lt;/td&gt;
&lt;td&gt;Ξάνθος&lt;/td&gt;
&lt;td&gt;Καλαμάς&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class="odd"&gt;
&lt;td&gt;Γεφύρι του Κουβαρά&lt;/td&gt;
&lt;td&gt;Ξάνθος&lt;/td&gt;
&lt;td&gt;Αώος&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class="even"&gt;
&lt;td&gt;Γεφύρι της Γκούμανης&lt;/td&gt;
&lt;td&gt;Άραχθος&lt;/td&gt;
&lt;td&gt;Καλαμάς&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;&lt;br/&gt; &lt;br/&gt; &lt;img alt="Εικόνα 3. Οι λεκάνες απορροής" src="https://geographer.gr/images/river_basins.jpg"/&gt; &lt;br/&gt; &lt;br/&gt;&lt;/p&gt;
&lt;p&gt;&lt;img alt="Εικόνα 4. Το γεφύρι του Γκούμου σε σχέση με τις λεκάνες απορροής" src="https://geographer.gr/images/river_basins_gkoumou.jpg"/&gt;
&lt;br/&gt; &lt;br/&gt;&lt;/p&gt;
&lt;p&gt;Με την βοήθεια του εργαλείο &lt;a href="http://www.gdal.org/ogr2ogr.html"&gt;ogr2ogr&lt;/a&gt; είναι δυνατή η
μετατροπή του αρχείου shapefile σε kml και η προβολή των δεδομένων στο
Google Earth. Η σχετική εντολή συντάσσεται ως εξής :&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;ogr2ogr -f "KML" -s_srs "EPSG:2100" -t_srs "EPSG:4326" gefyria.kml gf.shp&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Το &lt;code&gt;-f "KML"&lt;/code&gt; ορίζει ότι θέλουμε το αρχείο προορισμού να
είναι kml.&lt;/p&gt;
&lt;p&gt;Με το &lt;code&gt;-s_srs "EPSG:2100"&lt;/code&gt; ορίζουμε ότι το προβολικό
σύστημα του αρχείου προέλευσης είναι το ΕΓΣΑ ’87 (ο κωδικός EPSG του
ΕΓΣΑ ’87 είναι 2100).&lt;/p&gt;
&lt;p&gt;Με το &lt;code&gt;-t_srs "EPSG:4326"&lt;/code&gt; ορίζουμε ότι το προβολικό
σύστημα του αρχείου προέλευσης είναι το WGS84 (το προβολικό σύστημα
δηλαδή που χρησιμοποιεί και το Google Earth).&lt;/p&gt;
&lt;p&gt;Τέλος, τα αρχεία &lt;code&gt;gefyria.kml gefyria.shp&lt;/code&gt; είναι τα αρχεία
προορισμού και προέλευσης αντίστοιχα.&lt;/p&gt;
&lt;p&gt;Το αποτέλεσμα φαίνεται στον παρακάτω χάρτη&lt;/p&gt;
&lt;p&gt;Ενδεικτικά αναρτώνται δύο εικόνες με την απεικόνιση του αρχείου kml
στο Google Earth.&lt;/p&gt;
&lt;figure&gt;
&lt;img alt="Εικόνα 5. Το γεφύρι της Τύριας." src="https://geographer.gr/images/googleearth2.jpg"/&gt;
&lt;figcaption aria-hidden="true"&gt;Εικόνα 5. Το γεφύρι της
Τύριας.&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;figure&gt;
&lt;img alt="Εικόνα 6. Γενική άποψη των γεφυριών στον Ν. Ιωαννίνων" src="https://geographer.gr/images/googleearth1.jpg"/&gt;
&lt;figcaption aria-hidden="true"&gt;Εικόνα 6. Γενική άποψη των γεφυριών στον
Ν. Ιωαννίνων&lt;/figcaption&gt;
&lt;/figure&gt;</content><category term="GIS"></category><category term="fTools"></category><category term="inkscape"></category><category term="ogr"></category><category term="python"></category><category term="qgis"></category><category term="scraper"></category><category term="urllib2"></category><category term="γεφύρια"></category><category term="Ήπειρος"></category></entry><entry><title>NMEA183toshp.py - Μετατροπή αρχείου ΝΜΕΑ183 σε shapefile</title><link href="https://geographer.gr/nmea183toshppy-metatrope-arkheiou-nmea183-se-shapefile/" rel="alternate"></link><published>2009-07-07T00:10:00+03:00</published><updated>2009-07-07T00:10:00+03:00</updated><author><name>Leonidas Liakos</name></author><id>tag:geographer.gr,2009-07-07:/nmea183toshppy-metatrope-arkheiou-nmea183-se-shapefile/</id><summary type="html">&lt;p&gt;&lt;img src="https://geographer.gr/images/nmea.png"/&gt;&lt;/p&gt;
&lt;p&gt;Tο εργαλείο NMEA183toshp.py έχει σαν σκοπό την μετατροπή
καταγεγραμμένων συντεταγμένων από το πρότυπο &lt;a href="https://en.wikipedia.org/wiki/NMEA_0183"&gt;ΝΜΕΑ183&lt;/a&gt; σε αρχείο &lt;a href="https://en.wikipedia.org/wiki/Shapefile#Spatial_representation"&gt;shapefile&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Στον χρήστη δίνεται η δυνατότητα να εξάγει το αρχειο σε μορφή
shapefile επιλέγοντας τον τύπο της γεωμετρίας (γραμμική ή σημειακή)
καθώς και το γεωγραφικό σύστημα αναφοράς (WGS84 ή ΕΓΣΑ’87).&lt;/p&gt;
&lt;p&gt;Το παρόν …&lt;/p&gt;</summary><content type="html">&lt;p&gt;&lt;img src="https://geographer.gr/images/nmea.png"/&gt;&lt;/p&gt;
&lt;p&gt;Tο εργαλείο NMEA183toshp.py έχει σαν σκοπό την μετατροπή
καταγεγραμμένων συντεταγμένων από το πρότυπο &lt;a href="https://en.wikipedia.org/wiki/NMEA_0183"&gt;ΝΜΕΑ183&lt;/a&gt; σε αρχείο &lt;a href="https://en.wikipedia.org/wiki/Shapefile#Spatial_representation"&gt;shapefile&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Στον χρήστη δίνεται η δυνατότητα να εξάγει το αρχειο σε μορφή
shapefile επιλέγοντας τον τύπο της γεωμετρίας (γραμμική ή σημειακή)
καθώς και το γεωγραφικό σύστημα αναφοράς (WGS84 ή ΕΓΣΑ’87).&lt;/p&gt;
&lt;p&gt;Το παρόν εργαλείο αποτελεί παραμετροποίηση και επέκταση από το arcgis
script &lt;a href="http://arcscripts.esri.com/details.asp?dbid=13990"&gt;gps2shp&lt;/a&gt; του
&lt;a href="http://dstath.users.uth.gr/"&gt;Δημήτρη Σταθάκη&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Είναι γραμμένο με την γλώσσα Python και το γραφικό του περιβάλλον
στηρίζεται στην πλατφόρμα pyQt4. Η περαιτέρω επεξεργασία για την
μετατροπή των δεδομένων σε shapefile βασίζεται στην βιβλιοθήκη &lt;a href="https://wiki.osgeo.org/wiki/OSGeo_Python_Library"&gt;osgeo για την
python&lt;/a&gt;. Το πρόγραμμα έχει δοκιμαστεί στο λειτουργικό σύστημα Ubuntu
9.04&lt;/p&gt;
&lt;p&gt;Download &lt;a href="https://geographer.gr/extra/NMEA183toshp.py"&gt;NMEA183toshp.py&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Αφού κατεβάσετε το αρχείο πρέπει να το ορίσετε σαν εκτελέσιμο:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt; chmod +x NMEA183toshp.py&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Στην συνέχεια με διπλό κλικ στο αρχείο NMEA183toshp.py θα εμφανιστεί
το γραφικό περιβάλλον του προγράμματος.&lt;/p&gt;
&lt;p&gt;&lt;img src="https://geographer.gr/images/nmea2shp.jpg"/&gt;&lt;/p&gt;
&lt;p&gt;Παρακάτω διατίθεται ο κώδικας του προγράμματος:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;#!/usr/bin/python
# -*- coding: utf-8 -*-
 
import sys,  os,  string
from osgeo import ogr
from osgeo import osr
from PyQt4 import QtGui, QtCore
 
class Ui_MainWindow(object):
def setupUi(self, MainWindow):
MainWindow.setObjectName("MainWindow")
MainWindow.resize(800, 600)
self.centralwidget = QtGui.QWidget(MainWindow)
self.centralwidget.setObjectName("centralwidget")
self.groupBox = QtGui.QGroupBox(self.centralwidget)
self.groupBox.setGeometry(QtCore.QRect(30, 20, 741, 331))
self.groupBox.setObjectName("groupBox")
self.textBrowser = QtGui.QTextBrowser(self.groupBox)
self.textBrowser.setGeometry(QtCore.QRect(20, 60, 701, 251))
self.textBrowser.setFrameShape(QtGui.QFrame.Box)
self.textBrowser.setFrameShadow(QtGui.QFrame.Plain)
self.textBrowser.setHorizontalScrollBarPolicy(QtCore.Qt.ScrollBarAlwaysOff)
self.textBrowser.setObjectName("textBrowser")
self.widget = QtGui.QWidget(self.groupBox)
self.widget.setGeometry(QtCore.QRect(20, 18, 701, 41))
self.widget.setObjectName("widget")
self.gridLayout = QtGui.QGridLayout(self.widget)
self.gridLayout.setObjectName("gridLayout")
self.label = QtGui.QLabel(self.widget)
self.label.setObjectName("label")
self.gridLayout.addWidget(self.label, 0, 0, 1, 1)
self.lineEdit = QtGui.QLineEdit(self.widget)
self.lineEdit.setObjectName("lineEdit")
self.gridLayout.addWidget(self.lineEdit, 0, 1, 1, 1)
self.pushButton = QtGui.QPushButton(self.widget)
self.pushButton.setObjectName("pushButton")
self.gridLayout.addWidget(self.pushButton, 0, 2, 1, 1)
self.groupBox_2 = QtGui.QGroupBox(self.centralwidget)
self.groupBox_2.setGeometry(QtCore.QRect(30, 360, 741, 161))
self.groupBox_2.setObjectName("groupBox_2")
self.layoutWidget = QtGui.QWidget(self.groupBox_2)
self.layoutWidget.setGeometry(QtCore.QRect(20, 20, 701, 41))
self.layoutWidget.setObjectName("layoutWidget")
self.gridLayout_2 = QtGui.QGridLayout(self.layoutWidget)
self.gridLayout_2.setObjectName("gridLayout_2")
self.label_2 = QtGui.QLabel(self.layoutWidget)
self.label_2.setObjectName("label_2")
self.gridLayout_2.addWidget(self.label_2, 0, 0, 1, 1)
self.lineEdit_2 = QtGui.QLineEdit(self.layoutWidget)
self.lineEdit_2.setObjectName("lineEdit_2")
self.gridLayout_2.addWidget(self.lineEdit_2, 0, 1, 1, 1)
self.pushButton_2 = QtGui.QPushButton(self.layoutWidget)
self.pushButton_2.setObjectName("pushButton_2")
self.gridLayout_2.addWidget(self.pushButton_2, 0, 2, 1, 1)
self.groupBox_3 = QtGui.QGroupBox(self.groupBox_2)
self.groupBox_3.setGeometry(QtCore.QRect(20, 60, 151, 80))
self.groupBox_3.setObjectName("groupBox_3")
self.radioButton = QtGui.QRadioButton(self.groupBox_3)
self.radioButton.setGeometry(QtCore.QRect(10, 20, 141, 22))
self.radioButton.setObjectName("radioButton")
self.radioButton.setChecked(True)
self.radioButton_2 = QtGui.QRadioButton(self.groupBox_3)
self.radioButton_2.setGeometry(QtCore.QRect(10, 50, 131, 22))
self.radioButton_2.setObjectName("radioButton_2")
self.groupBox_4 = QtGui.QGroupBox(self.groupBox_2)
self.groupBox_4.setGeometry(QtCore.QRect(190, 60, 211, 80))
self.groupBox_4.setObjectName("groupBox_4")
self.comboBox = QtGui.QComboBox(self.groupBox_4)
self.comboBox.setGeometry(QtCore.QRect(10, 30, 121, 22))
self.comboBox.setObjectName("comboBox")
self.comboBox.addItem(QtCore.QString())
self.comboBox.addItem(QtCore.QString())
self.pushButton_3 = QtGui.QPushButton(self.centralwidget)
self.pushButton_3.setGeometry(QtCore.QRect(310, 540, 80, 27))
self.pushButton_3.setObjectName("pushButton_3")
MainWindow.setCentralWidget(self.centralwidget)
self.statusbar = QtGui.QStatusBar(MainWindow)
self.statusbar.setObjectName("statusbar")
MainWindow.setStatusBar(self.statusbar)
 
self.retranslateUi(MainWindow)
QtCore.QMetaObject.connectSlotsByName(MainWindow)
 
QtCore.QObject.connect(self.pushButton, QtCore.SIGNAL("clicked()"), self.showDialog)
QtCore.QObject.connect(self.pushButton_2, QtCore.SIGNAL("clicked()"), self.saveDialog)
QtCore.QObject.connect(self.pushButton_3, QtCore.SIGNAL("clicked()"), self.Convert)
QtCore.QObject.connect(self.comboBox, QtCore.SIGNAL("currentIndexChanged(int)"), self.GetSRS)
def Convert(self):
try:
# path &amp;amp;amp; name of the GPS log file
gpsFile = self.Openfilename.toLocal8Bit()
print gpsFile
print type(gpsFile)
 
# output folder &amp;amp;amp; SHAPEFILE name
outShapeFile = self.shp
drv = ogr.GetDriverByName('ESRI Shapefile')
if os.path.exists(str(outShapeFile)):
 
drv.DeleteDataSource(str(outShapeFile))
print ("shapefile deleted")
print outShapeFile
print type(outShapeFile)
t_srs = osr.SpatialReference()
 
if self.comboBox.currentText()=='Greek Grid':
print "Greek Grid"
t_srs.ImportFromProj4("+proj=tmerc +lon_0=24 +k=.9996 +x_0=500000 +towgs84=-199.72,74.03,246.02+ellps=GRS80")
 
t_srs.SetFromUserInput('EPSG:2100') #Greek Grid
else:
t_srs.SetFromUserInput('WGS84')
print "WGS84"
print str(outShapeFile)
ds = drv.CreateDataSource(str(outShapeFile))
if  self.radioButton.isChecked():
layer = ds.CreateLayer(ds.GetName(), geom_type = ogr.wkbPoint, srs = t_srs)
layer.CreateField(ogr.FieldDefn('TimeStamp', ogr.OFTInteger))
layer.CreateField(ogr.FieldDefn('quality', ogr.OFTInteger))
layer.CreateField(ogr.FieldDefn('NumbSats', ogr.OFTInteger))
layer.CreateField(ogr.FieldDefn('HDOP', ogr.OFTReal))
layer.CreateField(ogr.FieldDefn('Altitude', ogr.OFTReal))
else:
print('line shp is created')
layer = ds.CreateLayer(ds.GetName(), geom_type = ogr.wkbLineString, srs = t_srs)
line = ogr.Geometry(ogr.wkbLineString)
 
# initialize variables.
numberOfLines = 0
numberOfSkippedLines = 0
gpsLine = ""
coord = ""
 
# open GPS log file to read.
f=open(str(gpsFile), 'r')
while gpsLine.isalnum:
gpsLine = f.readline()
if not gpsLine: break
numberOfLines = numberOfLines + 1
linesp = gpsLine.split(',',15)
 
if linesp[0]=='$GPGGA':
 
# convert Latitude from DDMM.MMM (variable no of digits) to DD.DDD
latDDMM = linesp[2].split('.',2)
latLen = len(latDDMM[0]) - 2
 
if len(latDDMM) == 1:
latDDDD = int(latDDMM[0][0:latLen]) + (float(latDDMM[0][-2:]) / 60)
else:
latDDDD = int(latDDMM[0][0:latLen]) + (float(latDDMM[0][-2:] + "." + latDDMM[1]) / 60)
 
# convert Longitude from DDMM.MMM (variable no of digits) to DD.DDD
longDDMM = linesp[4].split('.',2)
longLen = len(longDDMM[0]) - 2
 
if len(longDDMM) == 1:
longDDDD = int(longDDMM[0][0:longLen]) + (float(longDDMM[0][-2:]) / 60)
else:
longDDDD = int(longDDMM[0][0:longLen]) + (float(longDDMM[0][-2:] + "." + longDDMM[1]) / 60)
 
# Convert to negative for West and South coord.
if linesp[3] == "S":
longDDDD = longDDDD * (-1)
if linesp[5] == "W":
latDDDD = latDDDD * (-1)
 
# a simple test to skip corrupted NMEA sentences.
if latDDDD &amp;amp;lt;= -90 or latDDDD &amp;amp;gt;= 90:
numberOfSkippedLines = numberOfSkippedLines + 1
break
if longDDDD &amp;amp;lt;= -180 or longDDDD &amp;amp;gt;= 180:
numberOfSkippedLines = numberOfSkippedLines + 1
break
 
if  self.radioButton.isChecked():
 
print longDDDD, latDDDD
geom = ogr.Geometry(type=ogr.wkbPoint)
geom.AddPoint(longDDDD,latDDDD)
print geom.GetX(), geom.GetY()
 
if self.comboBox.currentText()=='Greek Grid':
sourceSR = osr.SpatialReference()
sourceSR.SetFromUserInput('WGS84')
targetSR = osr.SpatialReference()
targetSR.ImportFromProj4("+proj=tmerc +lon_0=24 +k=.9996 +x_0=500000 +towgs84=-199.72,74.03,246.02+ellps=GRS80")
 
coordTrans = osr.CoordinateTransformation(sourceSR, targetSR)
geom.Transform(coordTrans)
print geom.GetX(), geom.GetY()
 
feat = ogr.Feature(feature_def=layer.GetLayerDefn())
feat.SetGeometry(geom)
feat.SetFID(int(numberOfLines))
 
#change time stamp format to DDDHHMMSS. Looks better!
TStamp = linesp[1].split('.',2)
feat.SetField('TimeStamp', int(string.zfill(TStamp[1], 3) + string.zfill(TStamp[0], 6)))
feat.SetField('quality', int(linesp[6]))
feat.SetField('NumbSats', float(linesp[7]))
if not linesp[8]:
feat.SetField('HDOP', 0)
else:
feat.SetField('HDOP', float(linesp[8]))
feat.SetField('Altitude', float(linesp[9]))
layer.CreateFeature(feat)
else:
print('Add point in line ' + str(longDDDD )+ ','  + str(latDDDD))
line.AddPoint(longDDDD,latDDDD)
 
if  self.radioButton.isChecked():
pass
else:
print line.GetPointCount()
print('line is writen')
feat = ogr.Feature(feature_def=layer.GetLayerDefn())
if self.comboBox.currentText()=='Greek Grid':
sourceSR = osr.SpatialReference()
sourceSR.SetFromUserInput('WGS84')
targetSR = osr.SpatialReference()
targetSR.ImportFromProj4("+proj=tmerc +lon_0=24 +k=.9996 +x_0=500000 +towgs84=-199.72,74.03,246.02+ellps=GRS80")
coordTrans = osr.CoordinateTransformation(sourceSR, targetSR)
line.Transform(coordTrans)
feat.SetGeometry(line)
feat.SetFID(0)
layer.CreateFeature(feat)
 
# Clean up
ds.Destroy()
Done = QtGui.QMessageBox.question(None, u'Ενημέρωση', u'Η μετατροπή ολοκληρώθηκε επιτυχώς', QtGui.QMessageBox.Ok)
except AttributeError:
Error = QtGui.QMessageBox.critical(None, u'Σφάλμα', u'Παρακαλώ ελέγξτε τις διαδρομές των αρχείων', QtGui.QMessageBox.Ok)
#
#
 
def GetSRS(self):
item = self.comboBox.currentText()
print  item
 
def saveDialog(self):
home=os.environ.get('HOME')
self.Savefilename = QtGui.QFileDialog.getSaveFileName(None, u'Αποθήκευση δεδομένων σε αρχείο shapefile',  home,  "Shapefile (*.shp)");
 
if self.Savefilename.toLocal8Bit()=='' :
pass
else:
self.shp=self.Savefilename.toLocal8Bit() + '.shp'
self.lineEdit_2.setText(self.shp)
 
def showDialog(self):
home=os.environ.get('HOME')
 
self.Openfilename = QtGui.QFileDialog.getOpenFileName(None, u'Επιλογή αρχειου NMEA183', home)
 
if self.Openfilename.toLocal8Bit()=='' :
pass
else:
file=open(self.Openfilename.toLocal8Bit())
data = file.read()
self.lineEdit.setText(str(self.Openfilename))
self.textBrowser.setText(data)
file.close
 
def retranslateUi(self, MainWindow):
MainWindow.setWindowTitle(QtGui.QApplication.translate("MainWindow", "Μετατροπή αρχείου NMEA183 σε Shapefile", None, QtGui.QApplication.UnicodeUTF8))
self.groupBox.setTitle(QtGui.QApplication.translate("MainWindow", "Αρχείο NMEA183", None, QtGui.QApplication.UnicodeUTF8))
self.textBrowser.setToolTip(QtGui.QApplication.translate("MainWindow", "Δεδομένα του αρχείου Shapefile", None, QtGui.QApplication.UnicodeUTF8))
self.label.setText(QtGui.QApplication.translate("MainWindow", "Αρχείο:", None, QtGui.QApplication.UnicodeUTF8))
self.lineEdit.setToolTip(QtGui.QApplication.translate("MainWindow", "Παρακαλώ επιλέξτε το αρχείο NMEA183", None, QtGui.QApplication.UnicodeUTF8))
self.pushButton.setText(QtGui.QApplication.translate("MainWindow", "Άνοιγμα", None, QtGui.QApplication.UnicodeUTF8))
self.groupBox_2.setTitle(QtGui.QApplication.translate("MainWindow", "Shapefile", None, QtGui.QApplication.UnicodeUTF8))
self.label_2.setText(QtGui.QApplication.translate("MainWindow", "Αρχείο:", None, QtGui.QApplication.UnicodeUTF8))
self.lineEdit_2.setToolTip(QtGui.QApplication.translate("MainWindow", "Παρακαλώ, αποθηκεύστε την μετατροπή σε ένα νέο αρχείο Shapefile", None, QtGui.QApplication.UnicodeUTF8))
self.pushButton_2.setText(QtGui.QApplication.translate("MainWindow", "Αποθήκευση", None, QtGui.QApplication.UnicodeUTF8))
self.groupBox_3.setTitle(QtGui.QApplication.translate("MainWindow", "Τύπος αρχείου", None, QtGui.QApplication.UnicodeUTF8))
self.radioButton.setText(QtGui.QApplication.translate("MainWindow", "Point", None, QtGui.QApplication.UnicodeUTF8))
self.radioButton_2.setText(QtGui.QApplication.translate("MainWindow", "Line", None, QtGui.QApplication.UnicodeUTF8))
self.groupBox_4.setTitle(QtGui.QApplication.translate("MainWindow", "Γεωγραφικό Σύστημα Αναφοράς", None, QtGui.QApplication.UnicodeUTF8))
self.comboBox.setItemText(0, QtGui.QApplication.translate("MainWindow", "WGS84", None, QtGui.QApplication.UnicodeUTF8))
self.comboBox.setItemText(1, QtGui.QApplication.translate("MainWindow", "Greek Grid", None, QtGui.QApplication.UnicodeUTF8))
self.pushButton_3.setText(QtGui.QApplication.translate("MainWindow", "Μετατροπή", None, QtGui.QApplication.UnicodeUTF8))
app = QtGui.QApplication(sys.argv)
widget = QtGui.QMainWindow()
mywidget = Ui_MainWindow()
mywidget.setupUi( widget )
widget.show()
app.exec_()
&lt;/code&gt;&lt;/pre&gt;</content><category term="GIS"></category><category term="gps"></category><category term="nmea183"></category><category term="ogr"></category><category term="python"></category></entry></feed>